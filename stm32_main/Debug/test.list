
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca44  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000564  0800cc30  0800cc30  0001cc30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d194  0800d194  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800d194  0800d194  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d194  0800d194  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d194  0800d194  0001d194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d198  0800d198  0001d198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800d19c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000055c  200001e4  0800d380  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000740  0800d380  00020740  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010aaf  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d70  00000000  00000000  00030cbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f30  00000000  00000000  00033a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000df0  00000000  00000000  00034960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bd71  00000000  00000000  00035750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012abf  00000000  00000000  000514c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009aca1  00000000  00000000  00063f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fec21  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054b4  00000000  00000000  000fec74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001e4 	.word	0x200001e4
 8000204:	00000000 	.word	0x00000000
 8000208:	0800cc14 	.word	0x0800cc14

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001e8 	.word	0x200001e8
 8000224:	0800cc14 	.word	0x0800cc14

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_fmul>:
 8000238:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800023c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000240:	bf1e      	ittt	ne
 8000242:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000246:	ea92 0f0c 	teqne	r2, ip
 800024a:	ea93 0f0c 	teqne	r3, ip
 800024e:	d06f      	beq.n	8000330 <__aeabi_fmul+0xf8>
 8000250:	441a      	add	r2, r3
 8000252:	ea80 0c01 	eor.w	ip, r0, r1
 8000256:	0240      	lsls	r0, r0, #9
 8000258:	bf18      	it	ne
 800025a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800025e:	d01e      	beq.n	800029e <__aeabi_fmul+0x66>
 8000260:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000264:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000268:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800026c:	fba0 3101 	umull	r3, r1, r0, r1
 8000270:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000274:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000278:	bf3e      	ittt	cc
 800027a:	0049      	lslcc	r1, r1, #1
 800027c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000280:	005b      	lslcc	r3, r3, #1
 8000282:	ea40 0001 	orr.w	r0, r0, r1
 8000286:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800028a:	2afd      	cmp	r2, #253	; 0xfd
 800028c:	d81d      	bhi.n	80002ca <__aeabi_fmul+0x92>
 800028e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000292:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000296:	bf08      	it	eq
 8000298:	f020 0001 	biceq.w	r0, r0, #1
 800029c:	4770      	bx	lr
 800029e:	f090 0f00 	teq	r0, #0
 80002a2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80002a6:	bf08      	it	eq
 80002a8:	0249      	lsleq	r1, r1, #9
 80002aa:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80002ae:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80002b2:	3a7f      	subs	r2, #127	; 0x7f
 80002b4:	bfc2      	ittt	gt
 80002b6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80002ba:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80002be:	4770      	bxgt	lr
 80002c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002c4:	f04f 0300 	mov.w	r3, #0
 80002c8:	3a01      	subs	r2, #1
 80002ca:	dc5d      	bgt.n	8000388 <__aeabi_fmul+0x150>
 80002cc:	f112 0f19 	cmn.w	r2, #25
 80002d0:	bfdc      	itt	le
 80002d2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80002d6:	4770      	bxle	lr
 80002d8:	f1c2 0200 	rsb	r2, r2, #0
 80002dc:	0041      	lsls	r1, r0, #1
 80002de:	fa21 f102 	lsr.w	r1, r1, r2
 80002e2:	f1c2 0220 	rsb	r2, r2, #32
 80002e6:	fa00 fc02 	lsl.w	ip, r0, r2
 80002ea:	ea5f 0031 	movs.w	r0, r1, rrx
 80002ee:	f140 0000 	adc.w	r0, r0, #0
 80002f2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80002f6:	bf08      	it	eq
 80002f8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80002fc:	4770      	bx	lr
 80002fe:	f092 0f00 	teq	r2, #0
 8000302:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000306:	bf02      	ittt	eq
 8000308:	0040      	lsleq	r0, r0, #1
 800030a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800030e:	3a01      	subeq	r2, #1
 8000310:	d0f9      	beq.n	8000306 <__aeabi_fmul+0xce>
 8000312:	ea40 000c 	orr.w	r0, r0, ip
 8000316:	f093 0f00 	teq	r3, #0
 800031a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800031e:	bf02      	ittt	eq
 8000320:	0049      	lsleq	r1, r1, #1
 8000322:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000326:	3b01      	subeq	r3, #1
 8000328:	d0f9      	beq.n	800031e <__aeabi_fmul+0xe6>
 800032a:	ea41 010c 	orr.w	r1, r1, ip
 800032e:	e78f      	b.n	8000250 <__aeabi_fmul+0x18>
 8000330:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000334:	ea92 0f0c 	teq	r2, ip
 8000338:	bf18      	it	ne
 800033a:	ea93 0f0c 	teqne	r3, ip
 800033e:	d00a      	beq.n	8000356 <__aeabi_fmul+0x11e>
 8000340:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000344:	bf18      	it	ne
 8000346:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800034a:	d1d8      	bne.n	80002fe <__aeabi_fmul+0xc6>
 800034c:	ea80 0001 	eor.w	r0, r0, r1
 8000350:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000354:	4770      	bx	lr
 8000356:	f090 0f00 	teq	r0, #0
 800035a:	bf17      	itett	ne
 800035c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000360:	4608      	moveq	r0, r1
 8000362:	f091 0f00 	teqne	r1, #0
 8000366:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800036a:	d014      	beq.n	8000396 <__aeabi_fmul+0x15e>
 800036c:	ea92 0f0c 	teq	r2, ip
 8000370:	d101      	bne.n	8000376 <__aeabi_fmul+0x13e>
 8000372:	0242      	lsls	r2, r0, #9
 8000374:	d10f      	bne.n	8000396 <__aeabi_fmul+0x15e>
 8000376:	ea93 0f0c 	teq	r3, ip
 800037a:	d103      	bne.n	8000384 <__aeabi_fmul+0x14c>
 800037c:	024b      	lsls	r3, r1, #9
 800037e:	bf18      	it	ne
 8000380:	4608      	movne	r0, r1
 8000382:	d108      	bne.n	8000396 <__aeabi_fmul+0x15e>
 8000384:	ea80 0001 	eor.w	r0, r0, r1
 8000388:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800038c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000390:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000394:	4770      	bx	lr
 8000396:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800039a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800039e:	4770      	bx	lr

080003a0 <__aeabi_drsub>:
 80003a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a4:	e002      	b.n	80003ac <__adddf3>
 80003a6:	bf00      	nop

080003a8 <__aeabi_dsub>:
 80003a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003ac <__adddf3>:
 80003ac:	b530      	push	{r4, r5, lr}
 80003ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003b6:	ea94 0f05 	teq	r4, r5
 80003ba:	bf08      	it	eq
 80003bc:	ea90 0f02 	teqeq	r0, r2
 80003c0:	bf1f      	itttt	ne
 80003c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d2:	f000 80e2 	beq.w	800059a <__adddf3+0x1ee>
 80003d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003de:	bfb8      	it	lt
 80003e0:	426d      	neglt	r5, r5
 80003e2:	dd0c      	ble.n	80003fe <__adddf3+0x52>
 80003e4:	442c      	add	r4, r5
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	ea82 0000 	eor.w	r0, r2, r0
 80003f2:	ea83 0101 	eor.w	r1, r3, r1
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	2d36      	cmp	r5, #54	; 0x36
 8000400:	bf88      	it	hi
 8000402:	bd30      	pophi	{r4, r5, pc}
 8000404:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000408:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800040c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000410:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000414:	d002      	beq.n	800041c <__adddf3+0x70>
 8000416:	4240      	negs	r0, r0
 8000418:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800041c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000420:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000424:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x84>
 800042a:	4252      	negs	r2, r2
 800042c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000430:	ea94 0f05 	teq	r4, r5
 8000434:	f000 80a7 	beq.w	8000586 <__adddf3+0x1da>
 8000438:	f1a4 0401 	sub.w	r4, r4, #1
 800043c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000440:	db0d      	blt.n	800045e <__adddf3+0xb2>
 8000442:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000446:	fa22 f205 	lsr.w	r2, r2, r5
 800044a:	1880      	adds	r0, r0, r2
 800044c:	f141 0100 	adc.w	r1, r1, #0
 8000450:	fa03 f20e 	lsl.w	r2, r3, lr
 8000454:	1880      	adds	r0, r0, r2
 8000456:	fa43 f305 	asr.w	r3, r3, r5
 800045a:	4159      	adcs	r1, r3
 800045c:	e00e      	b.n	800047c <__adddf3+0xd0>
 800045e:	f1a5 0520 	sub.w	r5, r5, #32
 8000462:	f10e 0e20 	add.w	lr, lr, #32
 8000466:	2a01      	cmp	r2, #1
 8000468:	fa03 fc0e 	lsl.w	ip, r3, lr
 800046c:	bf28      	it	cs
 800046e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000472:	fa43 f305 	asr.w	r3, r3, r5
 8000476:	18c0      	adds	r0, r0, r3
 8000478:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800047c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000480:	d507      	bpl.n	8000492 <__adddf3+0xe6>
 8000482:	f04f 0e00 	mov.w	lr, #0
 8000486:	f1dc 0c00 	rsbs	ip, ip, #0
 800048a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800048e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000492:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000496:	d31b      	bcc.n	80004d0 <__adddf3+0x124>
 8000498:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800049c:	d30c      	bcc.n	80004b8 <__adddf3+0x10c>
 800049e:	0849      	lsrs	r1, r1, #1
 80004a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004a8:	f104 0401 	add.w	r4, r4, #1
 80004ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b4:	f080 809a 	bcs.w	80005ec <__adddf3+0x240>
 80004b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004bc:	bf08      	it	eq
 80004be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c2:	f150 0000 	adcs.w	r0, r0, #0
 80004c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ca:	ea41 0105 	orr.w	r1, r1, r5
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d4:	4140      	adcs	r0, r0
 80004d6:	eb41 0101 	adc.w	r1, r1, r1
 80004da:	3c01      	subs	r4, #1
 80004dc:	bf28      	it	cs
 80004de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e2:	d2e9      	bcs.n	80004b8 <__adddf3+0x10c>
 80004e4:	f091 0f00 	teq	r1, #0
 80004e8:	bf04      	itt	eq
 80004ea:	4601      	moveq	r1, r0
 80004ec:	2000      	moveq	r0, #0
 80004ee:	fab1 f381 	clz	r3, r1
 80004f2:	bf08      	it	eq
 80004f4:	3320      	addeq	r3, #32
 80004f6:	f1a3 030b 	sub.w	r3, r3, #11
 80004fa:	f1b3 0220 	subs.w	r2, r3, #32
 80004fe:	da0c      	bge.n	800051a <__adddf3+0x16e>
 8000500:	320c      	adds	r2, #12
 8000502:	dd08      	ble.n	8000516 <__adddf3+0x16a>
 8000504:	f102 0c14 	add.w	ip, r2, #20
 8000508:	f1c2 020c 	rsb	r2, r2, #12
 800050c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000510:	fa21 f102 	lsr.w	r1, r1, r2
 8000514:	e00c      	b.n	8000530 <__adddf3+0x184>
 8000516:	f102 0214 	add.w	r2, r2, #20
 800051a:	bfd8      	it	le
 800051c:	f1c2 0c20 	rsble	ip, r2, #32
 8000520:	fa01 f102 	lsl.w	r1, r1, r2
 8000524:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000528:	bfdc      	itt	le
 800052a:	ea41 010c 	orrle.w	r1, r1, ip
 800052e:	4090      	lslle	r0, r2
 8000530:	1ae4      	subs	r4, r4, r3
 8000532:	bfa2      	ittt	ge
 8000534:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000538:	4329      	orrge	r1, r5
 800053a:	bd30      	popge	{r4, r5, pc}
 800053c:	ea6f 0404 	mvn.w	r4, r4
 8000540:	3c1f      	subs	r4, #31
 8000542:	da1c      	bge.n	800057e <__adddf3+0x1d2>
 8000544:	340c      	adds	r4, #12
 8000546:	dc0e      	bgt.n	8000566 <__adddf3+0x1ba>
 8000548:	f104 0414 	add.w	r4, r4, #20
 800054c:	f1c4 0220 	rsb	r2, r4, #32
 8000550:	fa20 f004 	lsr.w	r0, r0, r4
 8000554:	fa01 f302 	lsl.w	r3, r1, r2
 8000558:	ea40 0003 	orr.w	r0, r0, r3
 800055c:	fa21 f304 	lsr.w	r3, r1, r4
 8000560:	ea45 0103 	orr.w	r1, r5, r3
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f1c4 040c 	rsb	r4, r4, #12
 800056a:	f1c4 0220 	rsb	r2, r4, #32
 800056e:	fa20 f002 	lsr.w	r0, r0, r2
 8000572:	fa01 f304 	lsl.w	r3, r1, r4
 8000576:	ea40 0003 	orr.w	r0, r0, r3
 800057a:	4629      	mov	r1, r5
 800057c:	bd30      	pop	{r4, r5, pc}
 800057e:	fa21 f004 	lsr.w	r0, r1, r4
 8000582:	4629      	mov	r1, r5
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f094 0f00 	teq	r4, #0
 800058a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800058e:	bf06      	itte	eq
 8000590:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000594:	3401      	addeq	r4, #1
 8000596:	3d01      	subne	r5, #1
 8000598:	e74e      	b.n	8000438 <__adddf3+0x8c>
 800059a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800059e:	bf18      	it	ne
 80005a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a4:	d029      	beq.n	80005fa <__adddf3+0x24e>
 80005a6:	ea94 0f05 	teq	r4, r5
 80005aa:	bf08      	it	eq
 80005ac:	ea90 0f02 	teqeq	r0, r2
 80005b0:	d005      	beq.n	80005be <__adddf3+0x212>
 80005b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005b6:	bf04      	itt	eq
 80005b8:	4619      	moveq	r1, r3
 80005ba:	4610      	moveq	r0, r2
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	ea91 0f03 	teq	r1, r3
 80005c2:	bf1e      	ittt	ne
 80005c4:	2100      	movne	r1, #0
 80005c6:	2000      	movne	r0, #0
 80005c8:	bd30      	popne	{r4, r5, pc}
 80005ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ce:	d105      	bne.n	80005dc <__adddf3+0x230>
 80005d0:	0040      	lsls	r0, r0, #1
 80005d2:	4149      	adcs	r1, r1
 80005d4:	bf28      	it	cs
 80005d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd30      	pop	{r4, r5, pc}
 80005dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e0:	bf3c      	itt	cc
 80005e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005e6:	bd30      	popcc	{r4, r5, pc}
 80005e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f4:	f04f 0000 	mov.w	r0, #0
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005fe:	bf1a      	itte	ne
 8000600:	4619      	movne	r1, r3
 8000602:	4610      	movne	r0, r2
 8000604:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000608:	bf1c      	itt	ne
 800060a:	460b      	movne	r3, r1
 800060c:	4602      	movne	r2, r0
 800060e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000612:	bf06      	itte	eq
 8000614:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000618:	ea91 0f03 	teqeq	r1, r3
 800061c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	bf00      	nop

08000624 <__aeabi_ui2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000638:	f04f 0500 	mov.w	r5, #0
 800063c:	f04f 0100 	mov.w	r1, #0
 8000640:	e750      	b.n	80004e4 <__adddf3+0x138>
 8000642:	bf00      	nop

08000644 <__aeabi_i2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000658:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800065c:	bf48      	it	mi
 800065e:	4240      	negmi	r0, r0
 8000660:	f04f 0100 	mov.w	r1, #0
 8000664:	e73e      	b.n	80004e4 <__adddf3+0x138>
 8000666:	bf00      	nop

08000668 <__aeabi_f2d>:
 8000668:	0042      	lsls	r2, r0, #1
 800066a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800066e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000672:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000676:	bf1f      	itttt	ne
 8000678:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800067c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000680:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000684:	4770      	bxne	lr
 8000686:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068a:	bf08      	it	eq
 800068c:	4770      	bxeq	lr
 800068e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000692:	bf04      	itt	eq
 8000694:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000698:	4770      	bxeq	lr
 800069a:	b530      	push	{r4, r5, lr}
 800069c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	e71c      	b.n	80004e4 <__adddf3+0x138>
 80006aa:	bf00      	nop

080006ac <__aeabi_ul2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f04f 0500 	mov.w	r5, #0
 80006ba:	e00a      	b.n	80006d2 <__aeabi_l2d+0x16>

080006bc <__aeabi_l2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ca:	d502      	bpl.n	80006d2 <__aeabi_l2d+0x16>
 80006cc:	4240      	negs	r0, r0
 80006ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006de:	f43f aed8 	beq.w	8000492 <__adddf3+0xe6>
 80006e2:	f04f 0203 	mov.w	r2, #3
 80006e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ea:	bf18      	it	ne
 80006ec:	3203      	addne	r2, #3
 80006ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f2:	bf18      	it	ne
 80006f4:	3203      	addne	r2, #3
 80006f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fa:	f1c2 0320 	rsb	r3, r2, #32
 80006fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000702:	fa20 f002 	lsr.w	r0, r0, r2
 8000706:	fa01 fe03 	lsl.w	lr, r1, r3
 800070a:	ea40 000e 	orr.w	r0, r0, lr
 800070e:	fa21 f102 	lsr.w	r1, r1, r2
 8000712:	4414      	add	r4, r2
 8000714:	e6bd      	b.n	8000492 <__adddf3+0xe6>
 8000716:	bf00      	nop

08000718 <__aeabi_dmul>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8de 	bleq	80008f4 <__aeabi_dmul+0x1dc>
 8000738:	442c      	add	r4, r5
 800073a:	ea81 0603 	eor.w	r6, r1, r3
 800073e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000742:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000746:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800074a:	bf18      	it	ne
 800074c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000750:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000754:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000758:	d038      	beq.n	80007cc <__aeabi_dmul+0xb4>
 800075a:	fba0 ce02 	umull	ip, lr, r0, r2
 800075e:	f04f 0500 	mov.w	r5, #0
 8000762:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000766:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800076a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800076e:	f04f 0600 	mov.w	r6, #0
 8000772:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000776:	f09c 0f00 	teq	ip, #0
 800077a:	bf18      	it	ne
 800077c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000780:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000784:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000788:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800078c:	d204      	bcs.n	8000798 <__aeabi_dmul+0x80>
 800078e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000792:	416d      	adcs	r5, r5
 8000794:	eb46 0606 	adc.w	r6, r6, r6
 8000798:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800079c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80007a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80007a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80007a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80007ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80007b0:	bf88      	it	hi
 80007b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80007b6:	d81e      	bhi.n	80007f6 <__aeabi_dmul+0xde>
 80007b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80007bc:	bf08      	it	eq
 80007be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80007c2:	f150 0000 	adcs.w	r0, r0, #0
 80007c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80007d0:	ea46 0101 	orr.w	r1, r6, r1
 80007d4:	ea40 0002 	orr.w	r0, r0, r2
 80007d8:	ea81 0103 	eor.w	r1, r1, r3
 80007dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007e0:	bfc2      	ittt	gt
 80007e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007ea:	bd70      	popgt	{r4, r5, r6, pc}
 80007ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007f0:	f04f 0e00 	mov.w	lr, #0
 80007f4:	3c01      	subs	r4, #1
 80007f6:	f300 80ab 	bgt.w	8000950 <__aeabi_dmul+0x238>
 80007fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80007fe:	bfde      	ittt	le
 8000800:	2000      	movle	r0, #0
 8000802:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000806:	bd70      	pople	{r4, r5, r6, pc}
 8000808:	f1c4 0400 	rsb	r4, r4, #0
 800080c:	3c20      	subs	r4, #32
 800080e:	da35      	bge.n	800087c <__aeabi_dmul+0x164>
 8000810:	340c      	adds	r4, #12
 8000812:	dc1b      	bgt.n	800084c <__aeabi_dmul+0x134>
 8000814:	f104 0414 	add.w	r4, r4, #20
 8000818:	f1c4 0520 	rsb	r5, r4, #32
 800081c:	fa00 f305 	lsl.w	r3, r0, r5
 8000820:	fa20 f004 	lsr.w	r0, r0, r4
 8000824:	fa01 f205 	lsl.w	r2, r1, r5
 8000828:	ea40 0002 	orr.w	r0, r0, r2
 800082c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000830:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000834:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000838:	fa21 f604 	lsr.w	r6, r1, r4
 800083c:	eb42 0106 	adc.w	r1, r2, r6
 8000840:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000844:	bf08      	it	eq
 8000846:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800084a:	bd70      	pop	{r4, r5, r6, pc}
 800084c:	f1c4 040c 	rsb	r4, r4, #12
 8000850:	f1c4 0520 	rsb	r5, r4, #32
 8000854:	fa00 f304 	lsl.w	r3, r0, r4
 8000858:	fa20 f005 	lsr.w	r0, r0, r5
 800085c:	fa01 f204 	lsl.w	r2, r1, r4
 8000860:	ea40 0002 	orr.w	r0, r0, r2
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800086c:	f141 0100 	adc.w	r1, r1, #0
 8000870:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000874:	bf08      	it	eq
 8000876:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800087a:	bd70      	pop	{r4, r5, r6, pc}
 800087c:	f1c4 0520 	rsb	r5, r4, #32
 8000880:	fa00 f205 	lsl.w	r2, r0, r5
 8000884:	ea4e 0e02 	orr.w	lr, lr, r2
 8000888:	fa20 f304 	lsr.w	r3, r0, r4
 800088c:	fa01 f205 	lsl.w	r2, r1, r5
 8000890:	ea43 0302 	orr.w	r3, r3, r2
 8000894:	fa21 f004 	lsr.w	r0, r1, r4
 8000898:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800089c:	fa21 f204 	lsr.w	r2, r1, r4
 80008a0:	ea20 0002 	bic.w	r0, r0, r2
 80008a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80008a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80008ac:	bf08      	it	eq
 80008ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80008b2:	bd70      	pop	{r4, r5, r6, pc}
 80008b4:	f094 0f00 	teq	r4, #0
 80008b8:	d10f      	bne.n	80008da <__aeabi_dmul+0x1c2>
 80008ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80008be:	0040      	lsls	r0, r0, #1
 80008c0:	eb41 0101 	adc.w	r1, r1, r1
 80008c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c8:	bf08      	it	eq
 80008ca:	3c01      	subeq	r4, #1
 80008cc:	d0f7      	beq.n	80008be <__aeabi_dmul+0x1a6>
 80008ce:	ea41 0106 	orr.w	r1, r1, r6
 80008d2:	f095 0f00 	teq	r5, #0
 80008d6:	bf18      	it	ne
 80008d8:	4770      	bxne	lr
 80008da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80008de:	0052      	lsls	r2, r2, #1
 80008e0:	eb43 0303 	adc.w	r3, r3, r3
 80008e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008e8:	bf08      	it	eq
 80008ea:	3d01      	subeq	r5, #1
 80008ec:	d0f7      	beq.n	80008de <__aeabi_dmul+0x1c6>
 80008ee:	ea43 0306 	orr.w	r3, r3, r6
 80008f2:	4770      	bx	lr
 80008f4:	ea94 0f0c 	teq	r4, ip
 80008f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fc:	bf18      	it	ne
 80008fe:	ea95 0f0c 	teqne	r5, ip
 8000902:	d00c      	beq.n	800091e <__aeabi_dmul+0x206>
 8000904:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000908:	bf18      	it	ne
 800090a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090e:	d1d1      	bne.n	80008b4 <__aeabi_dmul+0x19c>
 8000910:	ea81 0103 	eor.w	r1, r1, r3
 8000914:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000918:	f04f 0000 	mov.w	r0, #0
 800091c:	bd70      	pop	{r4, r5, r6, pc}
 800091e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000922:	bf06      	itte	eq
 8000924:	4610      	moveq	r0, r2
 8000926:	4619      	moveq	r1, r3
 8000928:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800092c:	d019      	beq.n	8000962 <__aeabi_dmul+0x24a>
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	d102      	bne.n	800093a <__aeabi_dmul+0x222>
 8000934:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000938:	d113      	bne.n	8000962 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	d105      	bne.n	800094c <__aeabi_dmul+0x234>
 8000940:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000944:	bf1c      	itt	ne
 8000946:	4610      	movne	r0, r2
 8000948:	4619      	movne	r1, r3
 800094a:	d10a      	bne.n	8000962 <__aeabi_dmul+0x24a>
 800094c:	ea81 0103 	eor.w	r1, r1, r3
 8000950:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000954:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000958:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800095c:	f04f 0000 	mov.w	r0, #0
 8000960:	bd70      	pop	{r4, r5, r6, pc}
 8000962:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000966:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800096a:	bd70      	pop	{r4, r5, r6, pc}

0800096c <__aeabi_ddiv>:
 800096c:	b570      	push	{r4, r5, r6, lr}
 800096e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000972:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000976:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800097a:	bf1d      	ittte	ne
 800097c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000980:	ea94 0f0c 	teqne	r4, ip
 8000984:	ea95 0f0c 	teqne	r5, ip
 8000988:	f000 f8a7 	bleq	8000ada <__aeabi_ddiv+0x16e>
 800098c:	eba4 0405 	sub.w	r4, r4, r5
 8000990:	ea81 0e03 	eor.w	lr, r1, r3
 8000994:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000998:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800099c:	f000 8088 	beq.w	8000ab0 <__aeabi_ddiv+0x144>
 80009a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80009a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80009a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80009ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80009b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80009b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80009b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80009bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80009c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80009c4:	429d      	cmp	r5, r3
 80009c6:	bf08      	it	eq
 80009c8:	4296      	cmpeq	r6, r2
 80009ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80009ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80009d2:	d202      	bcs.n	80009da <__aeabi_ddiv+0x6e>
 80009d4:	085b      	lsrs	r3, r3, #1
 80009d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009da:	1ab6      	subs	r6, r6, r2
 80009dc:	eb65 0503 	sbc.w	r5, r5, r3
 80009e0:	085b      	lsrs	r3, r3, #1
 80009e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80009f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009f6:	bf22      	ittt	cs
 80009f8:	1ab6      	subcs	r6, r6, r2
 80009fa:	4675      	movcs	r5, lr
 80009fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a00:	085b      	lsrs	r3, r3, #1
 8000a02:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a06:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a0a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a0e:	bf22      	ittt	cs
 8000a10:	1ab6      	subcs	r6, r6, r2
 8000a12:	4675      	movcs	r5, lr
 8000a14:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a18:	085b      	lsrs	r3, r3, #1
 8000a1a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a1e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a22:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a26:	bf22      	ittt	cs
 8000a28:	1ab6      	subcs	r6, r6, r2
 8000a2a:	4675      	movcs	r5, lr
 8000a2c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a30:	085b      	lsrs	r3, r3, #1
 8000a32:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a36:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a3a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a3e:	bf22      	ittt	cs
 8000a40:	1ab6      	subcs	r6, r6, r2
 8000a42:	4675      	movcs	r5, lr
 8000a44:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a48:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a4c:	d018      	beq.n	8000a80 <__aeabi_ddiv+0x114>
 8000a4e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a52:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a56:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a5a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a5e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a62:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a66:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a6a:	d1c0      	bne.n	80009ee <__aeabi_ddiv+0x82>
 8000a6c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a70:	d10b      	bne.n	8000a8a <__aeabi_ddiv+0x11e>
 8000a72:	ea41 0100 	orr.w	r1, r1, r0
 8000a76:	f04f 0000 	mov.w	r0, #0
 8000a7a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a7e:	e7b6      	b.n	80009ee <__aeabi_ddiv+0x82>
 8000a80:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a84:	bf04      	itt	eq
 8000a86:	4301      	orreq	r1, r0
 8000a88:	2000      	moveq	r0, #0
 8000a8a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a8e:	bf88      	it	hi
 8000a90:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a94:	f63f aeaf 	bhi.w	80007f6 <__aeabi_dmul+0xde>
 8000a98:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a9c:	bf04      	itt	eq
 8000a9e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000aa2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000aa6:	f150 0000 	adcs.w	r0, r0, #0
 8000aaa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000aae:	bd70      	pop	{r4, r5, r6, pc}
 8000ab0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000ab4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000ab8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000abc:	bfc2      	ittt	gt
 8000abe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000ac2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000ac6:	bd70      	popgt	{r4, r5, r6, pc}
 8000ac8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000acc:	f04f 0e00 	mov.w	lr, #0
 8000ad0:	3c01      	subs	r4, #1
 8000ad2:	e690      	b.n	80007f6 <__aeabi_dmul+0xde>
 8000ad4:	ea45 0e06 	orr.w	lr, r5, r6
 8000ad8:	e68d      	b.n	80007f6 <__aeabi_dmul+0xde>
 8000ada:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000ade:	ea94 0f0c 	teq	r4, ip
 8000ae2:	bf08      	it	eq
 8000ae4:	ea95 0f0c 	teqeq	r5, ip
 8000ae8:	f43f af3b 	beq.w	8000962 <__aeabi_dmul+0x24a>
 8000aec:	ea94 0f0c 	teq	r4, ip
 8000af0:	d10a      	bne.n	8000b08 <__aeabi_ddiv+0x19c>
 8000af2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000af6:	f47f af34 	bne.w	8000962 <__aeabi_dmul+0x24a>
 8000afa:	ea95 0f0c 	teq	r5, ip
 8000afe:	f47f af25 	bne.w	800094c <__aeabi_dmul+0x234>
 8000b02:	4610      	mov	r0, r2
 8000b04:	4619      	mov	r1, r3
 8000b06:	e72c      	b.n	8000962 <__aeabi_dmul+0x24a>
 8000b08:	ea95 0f0c 	teq	r5, ip
 8000b0c:	d106      	bne.n	8000b1c <__aeabi_ddiv+0x1b0>
 8000b0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000b12:	f43f aefd 	beq.w	8000910 <__aeabi_dmul+0x1f8>
 8000b16:	4610      	mov	r0, r2
 8000b18:	4619      	mov	r1, r3
 8000b1a:	e722      	b.n	8000962 <__aeabi_dmul+0x24a>
 8000b1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b20:	bf18      	it	ne
 8000b22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b26:	f47f aec5 	bne.w	80008b4 <__aeabi_dmul+0x19c>
 8000b2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b2e:	f47f af0d 	bne.w	800094c <__aeabi_dmul+0x234>
 8000b32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b36:	f47f aeeb 	bne.w	8000910 <__aeabi_dmul+0x1f8>
 8000b3a:	e712      	b.n	8000962 <__aeabi_dmul+0x24a>

08000b3c <__gedf2>:
 8000b3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000b40:	e006      	b.n	8000b50 <__cmpdf2+0x4>
 8000b42:	bf00      	nop

08000b44 <__ledf2>:
 8000b44:	f04f 0c01 	mov.w	ip, #1
 8000b48:	e002      	b.n	8000b50 <__cmpdf2+0x4>
 8000b4a:	bf00      	nop

08000b4c <__cmpdf2>:
 8000b4c:	f04f 0c01 	mov.w	ip, #1
 8000b50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	bf18      	it	ne
 8000b62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b66:	d01b      	beq.n	8000ba0 <__cmpdf2+0x54>
 8000b68:	b001      	add	sp, #4
 8000b6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b6e:	bf0c      	ite	eq
 8000b70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b74:	ea91 0f03 	teqne	r1, r3
 8000b78:	bf02      	ittt	eq
 8000b7a:	ea90 0f02 	teqeq	r0, r2
 8000b7e:	2000      	moveq	r0, #0
 8000b80:	4770      	bxeq	lr
 8000b82:	f110 0f00 	cmn.w	r0, #0
 8000b86:	ea91 0f03 	teq	r1, r3
 8000b8a:	bf58      	it	pl
 8000b8c:	4299      	cmppl	r1, r3
 8000b8e:	bf08      	it	eq
 8000b90:	4290      	cmpeq	r0, r2
 8000b92:	bf2c      	ite	cs
 8000b94:	17d8      	asrcs	r0, r3, #31
 8000b96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b9a:	f040 0001 	orr.w	r0, r0, #1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba8:	d102      	bne.n	8000bb0 <__cmpdf2+0x64>
 8000baa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bae:	d107      	bne.n	8000bc0 <__cmpdf2+0x74>
 8000bb0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb8:	d1d6      	bne.n	8000b68 <__cmpdf2+0x1c>
 8000bba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bbe:	d0d3      	beq.n	8000b68 <__cmpdf2+0x1c>
 8000bc0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_cdrcmple>:
 8000bc8:	4684      	mov	ip, r0
 8000bca:	4610      	mov	r0, r2
 8000bcc:	4662      	mov	r2, ip
 8000bce:	468c      	mov	ip, r1
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4663      	mov	r3, ip
 8000bd4:	e000      	b.n	8000bd8 <__aeabi_cdcmpeq>
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_cdcmpeq>:
 8000bd8:	b501      	push	{r0, lr}
 8000bda:	f7ff ffb7 	bl	8000b4c <__cmpdf2>
 8000bde:	2800      	cmp	r0, #0
 8000be0:	bf48      	it	mi
 8000be2:	f110 0f00 	cmnmi.w	r0, #0
 8000be6:	bd01      	pop	{r0, pc}

08000be8 <__aeabi_dcmpeq>:
 8000be8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bec:	f7ff fff4 	bl	8000bd8 <__aeabi_cdcmpeq>
 8000bf0:	bf0c      	ite	eq
 8000bf2:	2001      	moveq	r0, #1
 8000bf4:	2000      	movne	r0, #0
 8000bf6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bfa:	bf00      	nop

08000bfc <__aeabi_dcmplt>:
 8000bfc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c00:	f7ff ffea 	bl	8000bd8 <__aeabi_cdcmpeq>
 8000c04:	bf34      	ite	cc
 8000c06:	2001      	movcc	r0, #1
 8000c08:	2000      	movcs	r0, #0
 8000c0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c0e:	bf00      	nop

08000c10 <__aeabi_dcmple>:
 8000c10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c14:	f7ff ffe0 	bl	8000bd8 <__aeabi_cdcmpeq>
 8000c18:	bf94      	ite	ls
 8000c1a:	2001      	movls	r0, #1
 8000c1c:	2000      	movhi	r0, #0
 8000c1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c22:	bf00      	nop

08000c24 <__aeabi_dcmpge>:
 8000c24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c28:	f7ff ffce 	bl	8000bc8 <__aeabi_cdrcmple>
 8000c2c:	bf94      	ite	ls
 8000c2e:	2001      	movls	r0, #1
 8000c30:	2000      	movhi	r0, #0
 8000c32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c36:	bf00      	nop

08000c38 <__aeabi_dcmpgt>:
 8000c38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c3c:	f7ff ffc4 	bl	8000bc8 <__aeabi_cdrcmple>
 8000c40:	bf34      	ite	cc
 8000c42:	2001      	movcc	r0, #1
 8000c44:	2000      	movcs	r0, #0
 8000c46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c4a:	bf00      	nop

08000c4c <__aeabi_dcmpun>:
 8000c4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c54:	d102      	bne.n	8000c5c <__aeabi_dcmpun+0x10>
 8000c56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c5a:	d10a      	bne.n	8000c72 <__aeabi_dcmpun+0x26>
 8000c5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c64:	d102      	bne.n	8000c6c <__aeabi_dcmpun+0x20>
 8000c66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c6a:	d102      	bne.n	8000c72 <__aeabi_dcmpun+0x26>
 8000c6c:	f04f 0000 	mov.w	r0, #0
 8000c70:	4770      	bx	lr
 8000c72:	f04f 0001 	mov.w	r0, #1
 8000c76:	4770      	bx	lr

08000c78 <__aeabi_d2iz>:
 8000c78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c80:	d215      	bcs.n	8000cae <__aeabi_d2iz+0x36>
 8000c82:	d511      	bpl.n	8000ca8 <__aeabi_d2iz+0x30>
 8000c84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c8c:	d912      	bls.n	8000cb4 <__aeabi_d2iz+0x3c>
 8000c8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	4240      	negne	r0, r0
 8000ca6:	4770      	bx	lr
 8000ca8:	f04f 0000 	mov.w	r0, #0
 8000cac:	4770      	bx	lr
 8000cae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000cb2:	d105      	bne.n	8000cc0 <__aeabi_d2iz+0x48>
 8000cb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000cb8:	bf08      	it	eq
 8000cba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000cbe:	4770      	bx	lr
 8000cc0:	f04f 0000 	mov.w	r0, #0
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_d2uiz>:
 8000cc8:	004a      	lsls	r2, r1, #1
 8000cca:	d211      	bcs.n	8000cf0 <__aeabi_d2uiz+0x28>
 8000ccc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000cd0:	d211      	bcs.n	8000cf6 <__aeabi_d2uiz+0x2e>
 8000cd2:	d50d      	bpl.n	8000cf0 <__aeabi_d2uiz+0x28>
 8000cd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000cd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000cdc:	d40e      	bmi.n	8000cfc <__aeabi_d2uiz+0x34>
 8000cde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ce2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ce6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000cea:	fa23 f002 	lsr.w	r0, r3, r2
 8000cee:	4770      	bx	lr
 8000cf0:	f04f 0000 	mov.w	r0, #0
 8000cf4:	4770      	bx	lr
 8000cf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000cfa:	d102      	bne.n	8000d02 <__aeabi_d2uiz+0x3a>
 8000cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000d00:	4770      	bx	lr
 8000d02:	f04f 0000 	mov.w	r0, #0
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2f>:
 8000d08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000d0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000d10:	bf24      	itt	cs
 8000d12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000d16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000d1a:	d90d      	bls.n	8000d38 <__aeabi_d2f+0x30>
 8000d1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000d24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000d28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000d2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000d30:	bf08      	it	eq
 8000d32:	f020 0001 	biceq.w	r0, r0, #1
 8000d36:	4770      	bx	lr
 8000d38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000d3c:	d121      	bne.n	8000d82 <__aeabi_d2f+0x7a>
 8000d3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000d42:	bfbc      	itt	lt
 8000d44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000d48:	4770      	bxlt	lr
 8000d4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000d4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000d52:	f1c2 0218 	rsb	r2, r2, #24
 8000d56:	f1c2 0c20 	rsb	ip, r2, #32
 8000d5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000d5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000d62:	bf18      	it	ne
 8000d64:	f040 0001 	orrne.w	r0, r0, #1
 8000d68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000d70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000d74:	ea40 000c 	orr.w	r0, r0, ip
 8000d78:	fa23 f302 	lsr.w	r3, r3, r2
 8000d7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d80:	e7cc      	b.n	8000d1c <__aeabi_d2f+0x14>
 8000d82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000d86:	d107      	bne.n	8000d98 <__aeabi_d2f+0x90>
 8000d88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000d92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000d96:	4770      	bxne	lr
 8000d98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000d9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000da0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop

08000da8 <__aeabi_frsub>:
 8000da8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000dac:	e002      	b.n	8000db4 <__addsf3>
 8000dae:	bf00      	nop

08000db0 <__aeabi_fsub>:
 8000db0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000db4 <__addsf3>:
 8000db4:	0042      	lsls	r2, r0, #1
 8000db6:	bf1f      	itttt	ne
 8000db8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000dbc:	ea92 0f03 	teqne	r2, r3
 8000dc0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000dc4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dc8:	d06a      	beq.n	8000ea0 <__addsf3+0xec>
 8000dca:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000dce:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000dd2:	bfc1      	itttt	gt
 8000dd4:	18d2      	addgt	r2, r2, r3
 8000dd6:	4041      	eorgt	r1, r0
 8000dd8:	4048      	eorgt	r0, r1
 8000dda:	4041      	eorgt	r1, r0
 8000ddc:	bfb8      	it	lt
 8000dde:	425b      	neglt	r3, r3
 8000de0:	2b19      	cmp	r3, #25
 8000de2:	bf88      	it	hi
 8000de4:	4770      	bxhi	lr
 8000de6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000dea:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dee:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000df2:	bf18      	it	ne
 8000df4:	4240      	negne	r0, r0
 8000df6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000dfa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000dfe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000e02:	bf18      	it	ne
 8000e04:	4249      	negne	r1, r1
 8000e06:	ea92 0f03 	teq	r2, r3
 8000e0a:	d03f      	beq.n	8000e8c <__addsf3+0xd8>
 8000e0c:	f1a2 0201 	sub.w	r2, r2, #1
 8000e10:	fa41 fc03 	asr.w	ip, r1, r3
 8000e14:	eb10 000c 	adds.w	r0, r0, ip
 8000e18:	f1c3 0320 	rsb	r3, r3, #32
 8000e1c:	fa01 f103 	lsl.w	r1, r1, r3
 8000e20:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000e24:	d502      	bpl.n	8000e2c <__addsf3+0x78>
 8000e26:	4249      	negs	r1, r1
 8000e28:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000e2c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000e30:	d313      	bcc.n	8000e5a <__addsf3+0xa6>
 8000e32:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000e36:	d306      	bcc.n	8000e46 <__addsf3+0x92>
 8000e38:	0840      	lsrs	r0, r0, #1
 8000e3a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000e3e:	f102 0201 	add.w	r2, r2, #1
 8000e42:	2afe      	cmp	r2, #254	; 0xfe
 8000e44:	d251      	bcs.n	8000eea <__addsf3+0x136>
 8000e46:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000e4a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e4e:	bf08      	it	eq
 8000e50:	f020 0001 	biceq.w	r0, r0, #1
 8000e54:	ea40 0003 	orr.w	r0, r0, r3
 8000e58:	4770      	bx	lr
 8000e5a:	0049      	lsls	r1, r1, #1
 8000e5c:	eb40 0000 	adc.w	r0, r0, r0
 8000e60:	3a01      	subs	r2, #1
 8000e62:	bf28      	it	cs
 8000e64:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000e68:	d2ed      	bcs.n	8000e46 <__addsf3+0x92>
 8000e6a:	fab0 fc80 	clz	ip, r0
 8000e6e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000e72:	ebb2 020c 	subs.w	r2, r2, ip
 8000e76:	fa00 f00c 	lsl.w	r0, r0, ip
 8000e7a:	bfaa      	itet	ge
 8000e7c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000e80:	4252      	neglt	r2, r2
 8000e82:	4318      	orrge	r0, r3
 8000e84:	bfbc      	itt	lt
 8000e86:	40d0      	lsrlt	r0, r2
 8000e88:	4318      	orrlt	r0, r3
 8000e8a:	4770      	bx	lr
 8000e8c:	f092 0f00 	teq	r2, #0
 8000e90:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000e94:	bf06      	itte	eq
 8000e96:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000e9a:	3201      	addeq	r2, #1
 8000e9c:	3b01      	subne	r3, #1
 8000e9e:	e7b5      	b.n	8000e0c <__addsf3+0x58>
 8000ea0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ea4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ea8:	bf18      	it	ne
 8000eaa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000eae:	d021      	beq.n	8000ef4 <__addsf3+0x140>
 8000eb0:	ea92 0f03 	teq	r2, r3
 8000eb4:	d004      	beq.n	8000ec0 <__addsf3+0x10c>
 8000eb6:	f092 0f00 	teq	r2, #0
 8000eba:	bf08      	it	eq
 8000ebc:	4608      	moveq	r0, r1
 8000ebe:	4770      	bx	lr
 8000ec0:	ea90 0f01 	teq	r0, r1
 8000ec4:	bf1c      	itt	ne
 8000ec6:	2000      	movne	r0, #0
 8000ec8:	4770      	bxne	lr
 8000eca:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ece:	d104      	bne.n	8000eda <__addsf3+0x126>
 8000ed0:	0040      	lsls	r0, r0, #1
 8000ed2:	bf28      	it	cs
 8000ed4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	4770      	bx	lr
 8000eda:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ede:	bf3c      	itt	cc
 8000ee0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ee4:	4770      	bxcc	lr
 8000ee6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000eea:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000eee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ef2:	4770      	bx	lr
 8000ef4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ef8:	bf16      	itet	ne
 8000efa:	4608      	movne	r0, r1
 8000efc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000f00:	4601      	movne	r1, r0
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	bf06      	itte	eq
 8000f06:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000f0a:	ea90 0f01 	teqeq	r0, r1
 8000f0e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000f12:	4770      	bx	lr

08000f14 <__aeabi_ui2f>:
 8000f14:	f04f 0300 	mov.w	r3, #0
 8000f18:	e004      	b.n	8000f24 <__aeabi_i2f+0x8>
 8000f1a:	bf00      	nop

08000f1c <__aeabi_i2f>:
 8000f1c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000f20:	bf48      	it	mi
 8000f22:	4240      	negmi	r0, r0
 8000f24:	ea5f 0c00 	movs.w	ip, r0
 8000f28:	bf08      	it	eq
 8000f2a:	4770      	bxeq	lr
 8000f2c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000f30:	4601      	mov	r1, r0
 8000f32:	f04f 0000 	mov.w	r0, #0
 8000f36:	e01c      	b.n	8000f72 <__aeabi_l2f+0x2a>

08000f38 <__aeabi_ul2f>:
 8000f38:	ea50 0201 	orrs.w	r2, r0, r1
 8000f3c:	bf08      	it	eq
 8000f3e:	4770      	bxeq	lr
 8000f40:	f04f 0300 	mov.w	r3, #0
 8000f44:	e00a      	b.n	8000f5c <__aeabi_l2f+0x14>
 8000f46:	bf00      	nop

08000f48 <__aeabi_l2f>:
 8000f48:	ea50 0201 	orrs.w	r2, r0, r1
 8000f4c:	bf08      	it	eq
 8000f4e:	4770      	bxeq	lr
 8000f50:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000f54:	d502      	bpl.n	8000f5c <__aeabi_l2f+0x14>
 8000f56:	4240      	negs	r0, r0
 8000f58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f5c:	ea5f 0c01 	movs.w	ip, r1
 8000f60:	bf02      	ittt	eq
 8000f62:	4684      	moveq	ip, r0
 8000f64:	4601      	moveq	r1, r0
 8000f66:	2000      	moveq	r0, #0
 8000f68:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000f6c:	bf08      	it	eq
 8000f6e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000f72:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000f76:	fabc f28c 	clz	r2, ip
 8000f7a:	3a08      	subs	r2, #8
 8000f7c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000f80:	db10      	blt.n	8000fa4 <__aeabi_l2f+0x5c>
 8000f82:	fa01 fc02 	lsl.w	ip, r1, r2
 8000f86:	4463      	add	r3, ip
 8000f88:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f8c:	f1c2 0220 	rsb	r2, r2, #32
 8000f90:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000f94:	fa20 f202 	lsr.w	r2, r0, r2
 8000f98:	eb43 0002 	adc.w	r0, r3, r2
 8000f9c:	bf08      	it	eq
 8000f9e:	f020 0001 	biceq.w	r0, r0, #1
 8000fa2:	4770      	bx	lr
 8000fa4:	f102 0220 	add.w	r2, r2, #32
 8000fa8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000fac:	f1c2 0220 	rsb	r2, r2, #32
 8000fb0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000fb4:	fa21 f202 	lsr.w	r2, r1, r2
 8000fb8:	eb43 0002 	adc.w	r0, r3, r2
 8000fbc:	bf08      	it	eq
 8000fbe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000fc2:	4770      	bx	lr

08000fc4 <__aeabi_f2iz>:
 8000fc4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fc8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fcc:	d30f      	bcc.n	8000fee <__aeabi_f2iz+0x2a>
 8000fce:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fd2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fd6:	d90d      	bls.n	8000ff4 <__aeabi_f2iz+0x30>
 8000fd8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fdc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fe0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000fe4:	fa23 f002 	lsr.w	r0, r3, r2
 8000fe8:	bf18      	it	ne
 8000fea:	4240      	negne	r0, r0
 8000fec:	4770      	bx	lr
 8000fee:	f04f 0000 	mov.w	r0, #0
 8000ff2:	4770      	bx	lr
 8000ff4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000ff8:	d101      	bne.n	8000ffe <__aeabi_f2iz+0x3a>
 8000ffa:	0242      	lsls	r2, r0, #9
 8000ffc:	d105      	bne.n	800100a <__aeabi_f2iz+0x46>
 8000ffe:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001002:	bf08      	it	eq
 8001004:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001008:	4770      	bx	lr
 800100a:	f04f 0000 	mov.w	r0, #0
 800100e:	4770      	bx	lr

08001010 <__aeabi_d2lz>:
 8001010:	b538      	push	{r3, r4, r5, lr}
 8001012:	4605      	mov	r5, r0
 8001014:	460c      	mov	r4, r1
 8001016:	2200      	movs	r2, #0
 8001018:	2300      	movs	r3, #0
 800101a:	4628      	mov	r0, r5
 800101c:	4621      	mov	r1, r4
 800101e:	f7ff fded 	bl	8000bfc <__aeabi_dcmplt>
 8001022:	b928      	cbnz	r0, 8001030 <__aeabi_d2lz+0x20>
 8001024:	4628      	mov	r0, r5
 8001026:	4621      	mov	r1, r4
 8001028:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800102c:	f000 b80a 	b.w	8001044 <__aeabi_d2ulz>
 8001030:	4628      	mov	r0, r5
 8001032:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001036:	f000 f805 	bl	8001044 <__aeabi_d2ulz>
 800103a:	4240      	negs	r0, r0
 800103c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001040:	bd38      	pop	{r3, r4, r5, pc}
 8001042:	bf00      	nop

08001044 <__aeabi_d2ulz>:
 8001044:	b5d0      	push	{r4, r6, r7, lr}
 8001046:	2200      	movs	r2, #0
 8001048:	4b0b      	ldr	r3, [pc, #44]	; (8001078 <__aeabi_d2ulz+0x34>)
 800104a:	4606      	mov	r6, r0
 800104c:	460f      	mov	r7, r1
 800104e:	f7ff fb63 	bl	8000718 <__aeabi_dmul>
 8001052:	f7ff fe39 	bl	8000cc8 <__aeabi_d2uiz>
 8001056:	4604      	mov	r4, r0
 8001058:	f7ff fae4 	bl	8000624 <__aeabi_ui2d>
 800105c:	2200      	movs	r2, #0
 800105e:	4b07      	ldr	r3, [pc, #28]	; (800107c <__aeabi_d2ulz+0x38>)
 8001060:	f7ff fb5a 	bl	8000718 <__aeabi_dmul>
 8001064:	4602      	mov	r2, r0
 8001066:	460b      	mov	r3, r1
 8001068:	4630      	mov	r0, r6
 800106a:	4639      	mov	r1, r7
 800106c:	f7ff f99c 	bl	80003a8 <__aeabi_dsub>
 8001070:	f7ff fe2a 	bl	8000cc8 <__aeabi_d2uiz>
 8001074:	4621      	mov	r1, r4
 8001076:	bdd0      	pop	{r4, r6, r7, pc}
 8001078:	3df00000 	.word	0x3df00000
 800107c:	41f00000 	.word	0x41f00000

08001080 <JY901_init>:
#include "main.h"
#include "JY901.h"

#include <string.h>

void JY901_init(struct JY901 *data, UART_HandleTypeDef *huart){
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	6039      	str	r1, [r7, #0]
    /*
        UART:
            DMA
            Baudrate = 115200
    */
    __HAL_UART_ENABLE_IT(huart, UART_IT_IDLE);
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	68da      	ldr	r2, [r3, #12]
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f042 0210 	orr.w	r2, r2, #16
 8001098:	60da      	str	r2, [r3, #12]
    HAL_UART_Receive_DMA(huart, data->buffer, JY901_BUFFERLEN);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	220b      	movs	r2, #11
 800109e:	4619      	mov	r1, r3
 80010a0:	6838      	ldr	r0, [r7, #0]
 80010a2:	f005 ff3a 	bl	8006f1a <HAL_UART_Receive_DMA>
}
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <JY901_getdata>:

void JY901_getdata(struct JY901 *data, struct SAngle *angle){
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b082      	sub	sp, #8
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	6078      	str	r0, [r7, #4]
 80010b6:	6039      	str	r1, [r7, #0]
    if(data->RXlen != JY901_BUFFERLEN)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	899b      	ldrh	r3, [r3, #12]
 80010bc:	2b0b      	cmp	r3, #11
 80010be:	d10f      	bne.n	80010e0 <JY901_getdata+0x32>
        return;
    if(!(data->buffer[0] == 0x55 && data->buffer[1] == 0x53))
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	2b55      	cmp	r3, #85	; 0x55
 80010c6:	d10d      	bne.n	80010e4 <JY901_getdata+0x36>
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	785b      	ldrb	r3, [r3, #1]
 80010cc:	2b53      	cmp	r3, #83	; 0x53
 80010ce:	d109      	bne.n	80010e4 <JY901_getdata+0x36>
        return;
    memcpy(angle, data->buffer + 2, 8);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	3302      	adds	r3, #2
 80010d4:	2208      	movs	r2, #8
 80010d6:	4619      	mov	r1, r3
 80010d8:	6838      	ldr	r0, [r7, #0]
 80010da:	f006 fd2f 	bl	8007b3c <memcpy>
 80010de:	e002      	b.n	80010e6 <JY901_getdata+0x38>
        return;
 80010e0:	bf00      	nop
 80010e2:	e000      	b.n	80010e6 <JY901_getdata+0x38>
        return;
 80010e4:	bf00      	nop
}
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}

080010ec <buffer_push>:

uint8_t queue[3], top;
extern uint8_t opid;
extern short opnd;

uint8_t buffer_push(uint8_t val){
 80010ec:	b480      	push	{r7}
 80010ee:	b085      	sub	sp, #20
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	71fb      	strb	r3, [r7, #7]
    if(top < 3){
 80010f6:	4b1c      	ldr	r3, [pc, #112]	; (8001168 <buffer_push+0x7c>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	2b02      	cmp	r3, #2
 80010fc:	d80a      	bhi.n	8001114 <buffer_push+0x28>
        queue[top++] = val;
 80010fe:	4b1a      	ldr	r3, [pc, #104]	; (8001168 <buffer_push+0x7c>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	1c5a      	adds	r2, r3, #1
 8001104:	b2d1      	uxtb	r1, r2
 8001106:	4a18      	ldr	r2, [pc, #96]	; (8001168 <buffer_push+0x7c>)
 8001108:	7011      	strb	r1, [r2, #0]
 800110a:	4619      	mov	r1, r3
 800110c:	4a17      	ldr	r2, [pc, #92]	; (800116c <buffer_push+0x80>)
 800110e:	79fb      	ldrb	r3, [r7, #7]
 8001110:	5453      	strb	r3, [r2, r1]
 8001112:	e00a      	b.n	800112a <buffer_push+0x3e>
    }else{
        queue[0] = queue[1];
 8001114:	4b15      	ldr	r3, [pc, #84]	; (800116c <buffer_push+0x80>)
 8001116:	785a      	ldrb	r2, [r3, #1]
 8001118:	4b14      	ldr	r3, [pc, #80]	; (800116c <buffer_push+0x80>)
 800111a:	701a      	strb	r2, [r3, #0]
        queue[1] = queue[2];
 800111c:	4b13      	ldr	r3, [pc, #76]	; (800116c <buffer_push+0x80>)
 800111e:	789a      	ldrb	r2, [r3, #2]
 8001120:	4b12      	ldr	r3, [pc, #72]	; (800116c <buffer_push+0x80>)
 8001122:	705a      	strb	r2, [r3, #1]
        queue[2] = val;
 8001124:	4a11      	ldr	r2, [pc, #68]	; (800116c <buffer_push+0x80>)
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	7093      	strb	r3, [r2, #2]
    }
    uint8_t res = 0;
 800112a:	2300      	movs	r3, #0
 800112c:	73fb      	strb	r3, [r7, #15]
    if(top == 3 && queue[0]){
 800112e:	4b0e      	ldr	r3, [pc, #56]	; (8001168 <buffer_push+0x7c>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	2b03      	cmp	r3, #3
 8001134:	d111      	bne.n	800115a <buffer_push+0x6e>
 8001136:	4b0d      	ldr	r3, [pc, #52]	; (800116c <buffer_push+0x80>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d00d      	beq.n	800115a <buffer_push+0x6e>
        opid = queue[0];
 800113e:	4b0b      	ldr	r3, [pc, #44]	; (800116c <buffer_push+0x80>)
 8001140:	781a      	ldrb	r2, [r3, #0]
 8001142:	4b0b      	ldr	r3, [pc, #44]	; (8001170 <buffer_push+0x84>)
 8001144:	701a      	strb	r2, [r3, #0]
        memcpy(&opnd, queue + 1, 2);
 8001146:	4b0b      	ldr	r3, [pc, #44]	; (8001174 <buffer_push+0x88>)
 8001148:	881b      	ldrh	r3, [r3, #0]
 800114a:	b29a      	uxth	r2, r3
 800114c:	4b0a      	ldr	r3, [pc, #40]	; (8001178 <buffer_push+0x8c>)
 800114e:	801a      	strh	r2, [r3, #0]
        top = 0;
 8001150:	4b05      	ldr	r3, [pc, #20]	; (8001168 <buffer_push+0x7c>)
 8001152:	2200      	movs	r2, #0
 8001154:	701a      	strb	r2, [r3, #0]
        res = 1;
 8001156:	2301      	movs	r3, #1
 8001158:	73fb      	strb	r3, [r7, #15]
    }
    return res;
 800115a:	7bfb      	ldrb	r3, [r7, #15]
}
 800115c:	4618      	mov	r0, r3
 800115e:	3714      	adds	r7, #20
 8001160:	46bd      	mov	sp, r7
 8001162:	bc80      	pop	{r7}
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	20000203 	.word	0x20000203
 800116c:	20000200 	.word	0x20000200
 8001170:	2000071e 	.word	0x2000071e
 8001174:	20000201 	.word	0x20000201
 8001178:	20000720 	.word	0x20000720

0800117c <control_init>:
extern struct Wheel wheelL, wheelR;
extern TIM_HandleTypeDef htim1, htim4, htim8;
extern uint8_t doPID;
extern struct PID fwdPIDL, fwdPIDR;

void control_init(){
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af04      	add	r7, sp, #16
    Wheel_init(&wheelL, &htim4, TIM_CHANNEL_1, GPIOD, GPIO_PIN_0, GPIOD, GPIO_PIN_1, &htim8);	// left
 8001182:	4b10      	ldr	r3, [pc, #64]	; (80011c4 <control_init+0x48>)
 8001184:	9303      	str	r3, [sp, #12]
 8001186:	2302      	movs	r3, #2
 8001188:	9302      	str	r3, [sp, #8]
 800118a:	4b0f      	ldr	r3, [pc, #60]	; (80011c8 <control_init+0x4c>)
 800118c:	9301      	str	r3, [sp, #4]
 800118e:	2301      	movs	r3, #1
 8001190:	9300      	str	r3, [sp, #0]
 8001192:	4b0d      	ldr	r3, [pc, #52]	; (80011c8 <control_init+0x4c>)
 8001194:	2200      	movs	r2, #0
 8001196:	490d      	ldr	r1, [pc, #52]	; (80011cc <control_init+0x50>)
 8001198:	480d      	ldr	r0, [pc, #52]	; (80011d0 <control_init+0x54>)
 800119a:	f002 fc0d 	bl	80039b8 <Wheel_init>
    Wheel_init(&wheelR, &htim4, TIM_CHANNEL_2, GPIOB, GPIO_PIN_9, GPIOB, GPIO_PIN_8, &htim1);	// right
 800119e:	4b0d      	ldr	r3, [pc, #52]	; (80011d4 <control_init+0x58>)
 80011a0:	9303      	str	r3, [sp, #12]
 80011a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011a6:	9302      	str	r3, [sp, #8]
 80011a8:	4b0b      	ldr	r3, [pc, #44]	; (80011d8 <control_init+0x5c>)
 80011aa:	9301      	str	r3, [sp, #4]
 80011ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011b0:	9300      	str	r3, [sp, #0]
 80011b2:	4b09      	ldr	r3, [pc, #36]	; (80011d8 <control_init+0x5c>)
 80011b4:	2204      	movs	r2, #4
 80011b6:	4905      	ldr	r1, [pc, #20]	; (80011cc <control_init+0x50>)
 80011b8:	4808      	ldr	r0, [pc, #32]	; (80011dc <control_init+0x60>)
 80011ba:	f002 fbfd 	bl	80039b8 <Wheel_init>
}
 80011be:	bf00      	nop
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	200003b8 	.word	0x200003b8
 80011c8:	40011400 	.word	0x40011400
 80011cc:	200002e0 	.word	0x200002e0
 80011d0:	20000544 	.word	0x20000544
 80011d4:	20000208 	.word	0x20000208
 80011d8:	40010c00 	.word	0x40010c00
 80011dc:	2000055c 	.word	0x2000055c

080011e0 <handleBlueRX>:

extern uint8_t startmove;

#define BLUESEND HAL_UART_Transmit(&huart1, (uint8_t*)txbuff, BLUETXLEN, 100);

void handleBlueRX(char *rxbuff, char *txbuff){
 80011e0:	b590      	push	{r4, r7, lr}
 80011e2:	b085      	sub	sp, #20
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	6039      	str	r1, [r7, #0]
    startmove = 1;
 80011ea:	4bc3      	ldr	r3, [pc, #780]	; (80014f8 <handleBlueRX+0x318>)
 80011ec:	2201      	movs	r2, #1
 80011ee:	701a      	strb	r2, [r3, #0]

    float ftmp;
    short stmp;
    switch(rxbuff[0]){
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	3b42      	subs	r3, #66	; 0x42
 80011f6:	2b32      	cmp	r3, #50	; 0x32
 80011f8:	f200 81e7 	bhi.w	80015ca <handleBlueRX+0x3ea>
 80011fc:	a201      	add	r2, pc, #4	; (adr r2, 8001204 <handleBlueRX+0x24>)
 80011fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001202:	bf00      	nop
 8001204:	08001451 	.word	0x08001451
 8001208:	080015cb 	.word	0x080015cb
 800120c:	080015ad 	.word	0x080015ad
 8001210:	080015cb 	.word	0x080015cb
 8001214:	080012d1 	.word	0x080012d1
 8001218:	080015cb 	.word	0x080015cb
 800121c:	080015cb 	.word	0x080015cb
 8001220:	080015cb 	.word	0x080015cb
 8001224:	080015cb 	.word	0x080015cb
 8001228:	080015cb 	.word	0x080015cb
 800122c:	080015cb 	.word	0x080015cb
 8001230:	080015cb 	.word	0x080015cb
 8001234:	080015cb 	.word	0x080015cb
 8001238:	080015cb 	.word	0x080015cb
 800123c:	080015a7 	.word	0x080015a7
 8001240:	080015cb 	.word	0x080015cb
 8001244:	080015cb 	.word	0x080015cb
 8001248:	080015cb 	.word	0x080015cb
 800124c:	080015cb 	.word	0x080015cb
 8001250:	080015cb 	.word	0x080015cb
 8001254:	080015cb 	.word	0x080015cb
 8001258:	080015cb 	.word	0x080015cb
 800125c:	080015cb 	.word	0x080015cb
 8001260:	080015cb 	.word	0x080015cb
 8001264:	080015cb 	.word	0x080015cb
 8001268:	080015cb 	.word	0x080015cb
 800126c:	080015cb 	.word	0x080015cb
 8001270:	080015cb 	.word	0x080015cb
 8001274:	080015cb 	.word	0x080015cb
 8001278:	080015cb 	.word	0x080015cb
 800127c:	080015cb 	.word	0x080015cb
 8001280:	08001411 	.word	0x08001411
 8001284:	08001429 	.word	0x08001429
 8001288:	080013b9 	.word	0x080013b9
 800128c:	080015cb 	.word	0x080015cb
 8001290:	080015cb 	.word	0x080015cb
 8001294:	080015cb 	.word	0x080015cb
 8001298:	0800132d 	.word	0x0800132d
 800129c:	080015cb 	.word	0x080015cb
 80012a0:	080015cb 	.word	0x080015cb
 80012a4:	080015cb 	.word	0x080015cb
 80012a8:	080015cb 	.word	0x080015cb
 80012ac:	08001387 	.word	0x08001387
 80012b0:	080015cb 	.word	0x080015cb
 80012b4:	080015cb 	.word	0x080015cb
 80012b8:	080015cb 	.word	0x080015cb
 80012bc:	080013db 	.word	0x080013db
 80012c0:	080015cb 	.word	0x080015cb
 80012c4:	08001583 	.word	0x08001583
 80012c8:	080015cb 	.word	0x080015cb
 80012cc:	08001499 	.word	0x08001499
        case 'F':
            dospinPID = 0;
 80012d0:	4b8a      	ldr	r3, [pc, #552]	; (80014fc <handleBlueRX+0x31c>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	701a      	strb	r2, [r3, #0]
            sscanf(rxbuff + 1, "%hd", &stmp);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	3301      	adds	r3, #1
 80012da:	f107 020a 	add.w	r2, r7, #10
 80012de:	4988      	ldr	r1, [pc, #544]	; (8001500 <handleBlueRX+0x320>)
 80012e0:	4618      	mov	r0, r3
 80012e2:	f007 fad3 	bl	800888c <siscanf>
            if(stmp){
 80012e6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d004      	beq.n	80012f8 <handleBlueRX+0x118>
                fwdlim = stmp;
 80012ee:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80012f2:	461a      	mov	r2, r3
 80012f4:	4b83      	ldr	r3, [pc, #524]	; (8001504 <handleBlueRX+0x324>)
 80012f6:	601a      	str	r2, [r3, #0]
            }
            PID_clear(&rotPID);
 80012f8:	4883      	ldr	r0, [pc, #524]	; (8001508 <handleBlueRX+0x328>)
 80012fa:	f001 f941 	bl	8002580 <PID_clear>
            doangPID = 1;
 80012fe:	4b83      	ldr	r3, [pc, #524]	; (800150c <handleBlueRX+0x32c>)
 8001300:	2201      	movs	r2, #1
 8001302:	701a      	strb	r2, [r3, #0]
            tank = 1;
 8001304:	4b82      	ldr	r3, [pc, #520]	; (8001510 <handleBlueRX+0x330>)
 8001306:	2201      	movs	r2, #1
 8001308:	701a      	strb	r2, [r3, #0]
            lasforward = 1;
 800130a:	4b82      	ldr	r3, [pc, #520]	; (8001514 <handleBlueRX+0x334>)
 800130c:	2201      	movs	r2, #1
 800130e:	701a      	strb	r2, [r3, #0]
            doPID = 1;
 8001310:	4b81      	ldr	r3, [pc, #516]	; (8001518 <handleBlueRX+0x338>)
 8001312:	2201      	movs	r2, #1
 8001314:	701a      	strb	r2, [r3, #0]

            sprintf(txbuff, "FORWARD\n");
 8001316:	4981      	ldr	r1, [pc, #516]	; (800151c <handleBlueRX+0x33c>)
 8001318:	6838      	ldr	r0, [r7, #0]
 800131a:	f007 fa97 	bl	800884c <siprintf>
            BLUESEND
 800131e:	2364      	movs	r3, #100	; 0x64
 8001320:	2214      	movs	r2, #20
 8001322:	6839      	ldr	r1, [r7, #0]
 8001324:	487e      	ldr	r0, [pc, #504]	; (8001520 <handleBlueRX+0x340>)
 8001326:	f005 fd36 	bl	8006d96 <HAL_UART_Transmit>
            break;
 800132a:	e14e      	b.n	80015ca <handleBlueRX+0x3ea>
        case 'g':
            force = 1;
 800132c:	4b7d      	ldr	r3, [pc, #500]	; (8001524 <handleBlueRX+0x344>)
 800132e:	2201      	movs	r2, #1
 8001330:	701a      	strb	r2, [r3, #0]
            dospinPID = 0;
 8001332:	4b72      	ldr	r3, [pc, #456]	; (80014fc <handleBlueRX+0x31c>)
 8001334:	2200      	movs	r2, #0
 8001336:	701a      	strb	r2, [r3, #0]
            doPID = 0;
 8001338:	4b77      	ldr	r3, [pc, #476]	; (8001518 <handleBlueRX+0x338>)
 800133a:	2200      	movs	r2, #0
 800133c:	701a      	strb	r2, [r3, #0]
            sscanf(rxbuff + 1, "%hu", &aimENC);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	3301      	adds	r3, #1
 8001342:	4a79      	ldr	r2, [pc, #484]	; (8001528 <handleBlueRX+0x348>)
 8001344:	4979      	ldr	r1, [pc, #484]	; (800152c <handleBlueRX+0x34c>)
 8001346:	4618      	mov	r0, r3
 8001348:	f007 faa0 	bl	800888c <siscanf>
            PID_clear(&fwdPIDL);
 800134c:	4878      	ldr	r0, [pc, #480]	; (8001530 <handleBlueRX+0x350>)
 800134e:	f001 f917 	bl	8002580 <PID_clear>
            PID_clear(&fwdPIDR);
 8001352:	4878      	ldr	r0, [pc, #480]	; (8001534 <handleBlueRX+0x354>)
 8001354:	f001 f914 	bl	8002580 <PID_clear>
            PID_clear(&rotPID);
 8001358:	486b      	ldr	r0, [pc, #428]	; (8001508 <handleBlueRX+0x328>)
 800135a:	f001 f911 	bl	8002580 <PID_clear>
            Encoder_start(wheelL.encoder);
 800135e:	4b76      	ldr	r3, [pc, #472]	; (8001538 <handleBlueRX+0x358>)
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	4618      	mov	r0, r3
 8001364:	f000 fa96 	bl	8001894 <Encoder_start>
            Encoder_start(wheelR.encoder);
 8001368:	4b74      	ldr	r3, [pc, #464]	; (800153c <handleBlueRX+0x35c>)
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	4618      	mov	r0, r3
 800136e:	f000 fa91 	bl	8001894 <Encoder_start>
            lasforward = 0;
 8001372:	4b68      	ldr	r3, [pc, #416]	; (8001514 <handleBlueRX+0x334>)
 8001374:	2200      	movs	r2, #0
 8001376:	701a      	strb	r2, [r3, #0]
            tank = 0;
 8001378:	4b65      	ldr	r3, [pc, #404]	; (8001510 <handleBlueRX+0x330>)
 800137a:	2200      	movs	r2, #0
 800137c:	701a      	strb	r2, [r3, #0]
            doPID = 1;
 800137e:	4b66      	ldr	r3, [pc, #408]	; (8001518 <handleBlueRX+0x338>)
 8001380:	2201      	movs	r2, #1
 8001382:	701a      	strb	r2, [r3, #0]
            break;
 8001384:	e121      	b.n	80015ca <handleBlueRX+0x3ea>
        case 'l':
            sprintf(txbuff, "L%u R%u\n", Encoder_read(wheelL.encoder), Encoder_read(wheelR.encoder));
 8001386:	4b6c      	ldr	r3, [pc, #432]	; (8001538 <handleBlueRX+0x358>)
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	4618      	mov	r0, r3
 800138c:	f000 fa8f 	bl	80018ae <Encoder_read>
 8001390:	4603      	mov	r3, r0
 8001392:	461c      	mov	r4, r3
 8001394:	4b69      	ldr	r3, [pc, #420]	; (800153c <handleBlueRX+0x35c>)
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	4618      	mov	r0, r3
 800139a:	f000 fa88 	bl	80018ae <Encoder_read>
 800139e:	4603      	mov	r3, r0
 80013a0:	4622      	mov	r2, r4
 80013a2:	4967      	ldr	r1, [pc, #412]	; (8001540 <handleBlueRX+0x360>)
 80013a4:	6838      	ldr	r0, [r7, #0]
 80013a6:	f007 fa51 	bl	800884c <siprintf>
            BLUESEND
 80013aa:	2364      	movs	r3, #100	; 0x64
 80013ac:	2214      	movs	r2, #20
 80013ae:	6839      	ldr	r1, [r7, #0]
 80013b0:	485b      	ldr	r0, [pc, #364]	; (8001520 <handleBlueRX+0x340>)
 80013b2:	f005 fcf0 	bl	8006d96 <HAL_UART_Transmit>
            break;
 80013b6:	e108      	b.n	80015ca <handleBlueRX+0x3ea>
        case 'c':
            sscanf(rxbuff + 1, "%f", &ftmp);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	3301      	adds	r3, #1
 80013bc:	f107 020c 	add.w	r2, r7, #12
 80013c0:	4960      	ldr	r1, [pc, #384]	; (8001544 <handleBlueRX+0x364>)
 80013c2:	4618      	mov	r0, r3
 80013c4:	f007 fa62 	bl	800888c <siscanf>
            PID_init(&rotPID, ftmp, 0, 0);
 80013c8:	68f9      	ldr	r1, [r7, #12]
 80013ca:	f04f 0300 	mov.w	r3, #0
 80013ce:	f04f 0200 	mov.w	r2, #0
 80013d2:	484d      	ldr	r0, [pc, #308]	; (8001508 <handleBlueRX+0x328>)
 80013d4:	f001 f8bd 	bl	8002552 <PID_init>
            break;
 80013d8:	e0f7      	b.n	80015ca <handleBlueRX+0x3ea>
        case 'p':
            doPID = 0;
 80013da:	4b4f      	ldr	r3, [pc, #316]	; (8001518 <handleBlueRX+0x338>)
 80013dc:	2200      	movs	r2, #0
 80013de:	701a      	strb	r2, [r3, #0]
            sscanf(rxbuff + 1, "%f", &ftmp);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	3301      	adds	r3, #1
 80013e4:	f107 020c 	add.w	r2, r7, #12
 80013e8:	4956      	ldr	r1, [pc, #344]	; (8001544 <handleBlueRX+0x364>)
 80013ea:	4618      	mov	r0, r3
 80013ec:	f007 fa4e 	bl	800888c <siscanf>
            spinPID.kp = ftmp;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	4a55      	ldr	r2, [pc, #340]	; (8001548 <handleBlueRX+0x368>)
 80013f4:	6013      	str	r3, [r2, #0]
            PID_clear(&speedPIDL);
 80013f6:	4855      	ldr	r0, [pc, #340]	; (800154c <handleBlueRX+0x36c>)
 80013f8:	f001 f8c2 	bl	8002580 <PID_clear>
            PID_clear(&speedPIDR);
 80013fc:	4854      	ldr	r0, [pc, #336]	; (8001550 <handleBlueRX+0x370>)
 80013fe:	f001 f8bf 	bl	8002580 <PID_clear>
            PID_clear(&spinPID);
 8001402:	4851      	ldr	r0, [pc, #324]	; (8001548 <handleBlueRX+0x368>)
 8001404:	f001 f8bc 	bl	8002580 <PID_clear>
            dospinPID = 1;
 8001408:	4b3c      	ldr	r3, [pc, #240]	; (80014fc <handleBlueRX+0x31c>)
 800140a:	2201      	movs	r2, #1
 800140c:	701a      	strb	r2, [r3, #0]
            break;
 800140e:	e0dc      	b.n	80015ca <handleBlueRX+0x3ea>
        case 'a':
            force = 0;
 8001410:	4b44      	ldr	r3, [pc, #272]	; (8001524 <handleBlueRX+0x344>)
 8001412:	2200      	movs	r2, #0
 8001414:	701a      	strb	r2, [r3, #0]
            aimANG = angle.Angle[2];
 8001416:	4b4f      	ldr	r3, [pc, #316]	; (8001554 <handleBlueRX+0x374>)
 8001418:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800141c:	4b4e      	ldr	r3, [pc, #312]	; (8001558 <handleBlueRX+0x378>)
 800141e:	801a      	strh	r2, [r3, #0]
            doangPID = 1;
 8001420:	4b3a      	ldr	r3, [pc, #232]	; (800150c <handleBlueRX+0x32c>)
 8001422:	2201      	movs	r2, #1
 8001424:	701a      	strb	r2, [r3, #0]
            break;
 8001426:	e0d0      	b.n	80015ca <handleBlueRX+0x3ea>
        case 'b': // baseangle
            baseANG = angle.Angle[2];
 8001428:	4b4a      	ldr	r3, [pc, #296]	; (8001554 <handleBlueRX+0x374>)
 800142a:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800142e:	4b4b      	ldr	r3, [pc, #300]	; (800155c <handleBlueRX+0x37c>)
 8001430:	801a      	strh	r2, [r3, #0]

            sprintf(txbuff, "baseangle%d\n", baseANG);
 8001432:	4b4a      	ldr	r3, [pc, #296]	; (800155c <handleBlueRX+0x37c>)
 8001434:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001438:	461a      	mov	r2, r3
 800143a:	4949      	ldr	r1, [pc, #292]	; (8001560 <handleBlueRX+0x380>)
 800143c:	6838      	ldr	r0, [r7, #0]
 800143e:	f007 fa05 	bl	800884c <siprintf>
            BLUESEND
 8001442:	2364      	movs	r3, #100	; 0x64
 8001444:	2214      	movs	r2, #20
 8001446:	6839      	ldr	r1, [r7, #0]
 8001448:	4835      	ldr	r0, [pc, #212]	; (8001520 <handleBlueRX+0x340>)
 800144a:	f005 fca4 	bl	8006d96 <HAL_UART_Transmit>
            break;
 800144e:	e0bc      	b.n	80015ca <handleBlueRX+0x3ea>
        case 'B':
            doPID = 0;
 8001450:	4b31      	ldr	r3, [pc, #196]	; (8001518 <handleBlueRX+0x338>)
 8001452:	2200      	movs	r2, #0
 8001454:	701a      	strb	r2, [r3, #0]
            sscanf(rxbuff + 1, "%hd", &stmp);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	3301      	adds	r3, #1
 800145a:	f107 020a 	add.w	r2, r7, #10
 800145e:	4928      	ldr	r1, [pc, #160]	; (8001500 <handleBlueRX+0x320>)
 8001460:	4618      	mov	r0, r3
 8001462:	f007 fa13 	bl	800888c <siscanf>
            aimANG = baseANG + stmp;
 8001466:	4b3d      	ldr	r3, [pc, #244]	; (800155c <handleBlueRX+0x37c>)
 8001468:	f9b3 3000 	ldrsh.w	r3, [r3]
 800146c:	b29a      	uxth	r2, r3
 800146e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001472:	b29b      	uxth	r3, r3
 8001474:	4413      	add	r3, r2
 8001476:	b29b      	uxth	r3, r3
 8001478:	b21a      	sxth	r2, r3
 800147a:	4b37      	ldr	r3, [pc, #220]	; (8001558 <handleBlueRX+0x378>)
 800147c:	801a      	strh	r2, [r3, #0]
            PID_clear(&speedPIDL);
 800147e:	4833      	ldr	r0, [pc, #204]	; (800154c <handleBlueRX+0x36c>)
 8001480:	f001 f87e 	bl	8002580 <PID_clear>
            PID_clear(&speedPIDR);
 8001484:	4832      	ldr	r0, [pc, #200]	; (8001550 <handleBlueRX+0x370>)
 8001486:	f001 f87b 	bl	8002580 <PID_clear>
            PID_clear(&spinPID);
 800148a:	482f      	ldr	r0, [pc, #188]	; (8001548 <handleBlueRX+0x368>)
 800148c:	f001 f878 	bl	8002580 <PID_clear>
            dospinPID = 1;
 8001490:	4b1a      	ldr	r3, [pc, #104]	; (80014fc <handleBlueRX+0x31c>)
 8001492:	2201      	movs	r2, #1
 8001494:	701a      	strb	r2, [r3, #0]
            break;
 8001496:	e098      	b.n	80015ca <handleBlueRX+0x3ea>
        case 't':
            doPID = 0;
 8001498:	4b1f      	ldr	r3, [pc, #124]	; (8001518 <handleBlueRX+0x338>)
 800149a:	2200      	movs	r2, #0
 800149c:	701a      	strb	r2, [r3, #0]
            sscanf(rxbuff + 1, "%hd", &stmp);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	3301      	adds	r3, #1
 80014a2:	f107 020a 	add.w	r2, r7, #10
 80014a6:	4916      	ldr	r1, [pc, #88]	; (8001500 <handleBlueRX+0x320>)
 80014a8:	4618      	mov	r0, r3
 80014aa:	f007 f9ef 	bl	800888c <siscanf>
            sprintf(txbuff,  "aim%d now%d\n", aimANG, angle.Angle[2]);
 80014ae:	4b2a      	ldr	r3, [pc, #168]	; (8001558 <handleBlueRX+0x378>)
 80014b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014b4:	461a      	mov	r2, r3
 80014b6:	4b27      	ldr	r3, [pc, #156]	; (8001554 <handleBlueRX+0x374>)
 80014b8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80014bc:	4929      	ldr	r1, [pc, #164]	; (8001564 <handleBlueRX+0x384>)
 80014be:	6838      	ldr	r0, [r7, #0]
 80014c0:	f007 f9c4 	bl	800884c <siprintf>
            BLUESEND
 80014c4:	2364      	movs	r3, #100	; 0x64
 80014c6:	2214      	movs	r2, #20
 80014c8:	6839      	ldr	r1, [r7, #0]
 80014ca:	4815      	ldr	r0, [pc, #84]	; (8001520 <handleBlueRX+0x340>)
 80014cc:	f005 fc63 	bl	8006d96 <HAL_UART_Transmit>
            aimANG = angle.Angle[2] + stmp;
 80014d0:	4b20      	ldr	r3, [pc, #128]	; (8001554 <handleBlueRX+0x374>)
 80014d2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80014d6:	b29a      	uxth	r2, r3
 80014d8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80014dc:	b29b      	uxth	r3, r3
 80014de:	4413      	add	r3, r2
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	b21a      	sxth	r2, r3
 80014e4:	4b1c      	ldr	r3, [pc, #112]	; (8001558 <handleBlueRX+0x378>)
 80014e6:	801a      	strh	r2, [r3, #0]
            if(lasforward){
 80014e8:	4b0a      	ldr	r3, [pc, #40]	; (8001514 <handleBlueRX+0x334>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d03b      	beq.n	8001568 <handleBlueRX+0x388>
                doPID = 1;
 80014f0:	4b09      	ldr	r3, [pc, #36]	; (8001518 <handleBlueRX+0x338>)
 80014f2:	2201      	movs	r2, #1
 80014f4:	701a      	strb	r2, [r3, #0]
                PID_clear(&speedPIDL);
                PID_clear(&speedPIDR);
                PID_clear(&spinPID);
                dospinPID = 1;
            }
            break;
 80014f6:	e068      	b.n	80015ca <handleBlueRX+0x3ea>
 80014f8:	20000722 	.word	0x20000722
 80014fc:	2000068f 	.word	0x2000068f
 8001500:	0800cc30 	.word	0x0800cc30
 8001504:	20000530 	.word	0x20000530
 8001508:	20000660 	.word	0x20000660
 800150c:	2000068e 	.word	0x2000068e
 8001510:	20000723 	.word	0x20000723
 8001514:	20000204 	.word	0x20000204
 8001518:	20000604 	.word	0x20000604
 800151c:	0800cc34 	.word	0x0800cc34
 8001520:	20000400 	.word	0x20000400
 8001524:	20000725 	.word	0x20000725
 8001528:	20000606 	.word	0x20000606
 800152c:	0800cc40 	.word	0x0800cc40
 8001530:	20000608 	.word	0x20000608
 8001534:	20000634 	.word	0x20000634
 8001538:	20000544 	.word	0x20000544
 800153c:	2000055c 	.word	0x2000055c
 8001540:	0800cc44 	.word	0x0800cc44
 8001544:	0800cc50 	.word	0x0800cc50
 8001548:	200006f0 	.word	0x200006f0
 800154c:	20000690 	.word	0x20000690
 8001550:	200006bc 	.word	0x200006bc
 8001554:	200005fc 	.word	0x200005fc
 8001558:	2000068c 	.word	0x2000068c
 800155c:	20000206 	.word	0x20000206
 8001560:	0800cc54 	.word	0x0800cc54
 8001564:	0800cc64 	.word	0x0800cc64
                PID_clear(&speedPIDL);
 8001568:	481a      	ldr	r0, [pc, #104]	; (80015d4 <handleBlueRX+0x3f4>)
 800156a:	f001 f809 	bl	8002580 <PID_clear>
                PID_clear(&speedPIDR);
 800156e:	481a      	ldr	r0, [pc, #104]	; (80015d8 <handleBlueRX+0x3f8>)
 8001570:	f001 f806 	bl	8002580 <PID_clear>
                PID_clear(&spinPID);
 8001574:	4819      	ldr	r0, [pc, #100]	; (80015dc <handleBlueRX+0x3fc>)
 8001576:	f001 f803 	bl	8002580 <PID_clear>
                dospinPID = 1;
 800157a:	4b19      	ldr	r3, [pc, #100]	; (80015e0 <handleBlueRX+0x400>)
 800157c:	2201      	movs	r2, #1
 800157e:	701a      	strb	r2, [r3, #0]
            break;
 8001580:	e023      	b.n	80015ca <handleBlueRX+0x3ea>
        case 'r':
            sprintf(txbuff,  "aim%d now%d\n", aimANG, angle.Angle[2]);
 8001582:	4b18      	ldr	r3, [pc, #96]	; (80015e4 <handleBlueRX+0x404>)
 8001584:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001588:	461a      	mov	r2, r3
 800158a:	4b17      	ldr	r3, [pc, #92]	; (80015e8 <handleBlueRX+0x408>)
 800158c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001590:	4916      	ldr	r1, [pc, #88]	; (80015ec <handleBlueRX+0x40c>)
 8001592:	6838      	ldr	r0, [r7, #0]
 8001594:	f007 f95a 	bl	800884c <siprintf>
            BLUESEND
 8001598:	2364      	movs	r3, #100	; 0x64
 800159a:	2214      	movs	r2, #20
 800159c:	6839      	ldr	r1, [r7, #0]
 800159e:	4814      	ldr	r0, [pc, #80]	; (80015f0 <handleBlueRX+0x410>)
 80015a0:	f005 fbf9 	bl	8006d96 <HAL_UART_Transmit>
            break;
 80015a4:	e011      	b.n	80015ca <handleBlueRX+0x3ea>
        case 'P':
            Paw_pick();
 80015a6:	f001 f90f 	bl	80027c8 <Paw_pick>
            break;
 80015aa:	e00e      	b.n	80015ca <handleBlueRX+0x3ea>
        case 'D':
        	sscanf(rxbuff + 1, "%hd", &stmp);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	3301      	adds	r3, #1
 80015b0:	f107 020a 	add.w	r2, r7, #10
 80015b4:	490f      	ldr	r1, [pc, #60]	; (80015f4 <handleBlueRX+0x414>)
 80015b6:	4618      	mov	r0, r3
 80015b8:	f007 f968 	bl	800888c <siscanf>
            Paw_drop(stmp);
 80015bc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80015c0:	b29b      	uxth	r3, r3
 80015c2:	4618      	mov	r0, r3
 80015c4:	f001 f944 	bl	8002850 <Paw_drop>
            break;
 80015c8:	bf00      	nop
    }
}
 80015ca:	bf00      	nop
 80015cc:	3714      	adds	r7, #20
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd90      	pop	{r4, r7, pc}
 80015d2:	bf00      	nop
 80015d4:	20000690 	.word	0x20000690
 80015d8:	200006bc 	.word	0x200006bc
 80015dc:	200006f0 	.word	0x200006f0
 80015e0:	2000068f 	.word	0x2000068f
 80015e4:	2000068c 	.word	0x2000068c
 80015e8:	200005fc 	.word	0x200005fc
 80015ec:	0800cc64 	.word	0x0800cc64
 80015f0:	20000400 	.word	0x20000400
 80015f4:	0800cc30 	.word	0x0800cc30

080015f8 <handleOpenRX>:

void handleOpenRX(char* txbuff){
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
    startmove = 1;
 8001600:	4b81      	ldr	r3, [pc, #516]	; (8001808 <handleOpenRX+0x210>)
 8001602:	2201      	movs	r2, #1
 8001604:	701a      	strb	r2, [r3, #0]
    
    switch(opid){
 8001606:	4b81      	ldr	r3, [pc, #516]	; (800180c <handleOpenRX+0x214>)
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	3b01      	subs	r3, #1
 800160c:	2b06      	cmp	r3, #6
 800160e:	f200 80f6 	bhi.w	80017fe <handleOpenRX+0x206>
 8001612:	a201      	add	r2, pc, #4	; (adr r2, 8001618 <handleOpenRX+0x20>)
 8001614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001618:	08001635 	.word	0x08001635
 800161c:	08001685 	.word	0x08001685
 8001620:	08001721 	.word	0x08001721
 8001624:	08001749 	.word	0x08001749
 8001628:	08001749 	.word	0x08001749
 800162c:	080017cd 	.word	0x080017cd
 8001630:	080017d3 	.word	0x080017d3
        case 1: // forward
            dospinPID = 0;
 8001634:	4b76      	ldr	r3, [pc, #472]	; (8001810 <handleOpenRX+0x218>)
 8001636:	2200      	movs	r2, #0
 8001638:	701a      	strb	r2, [r3, #0]
            if(opnd){
 800163a:	4b76      	ldr	r3, [pc, #472]	; (8001814 <handleOpenRX+0x21c>)
 800163c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d005      	beq.n	8001650 <handleOpenRX+0x58>
                fwdlim = opnd;
 8001644:	4b73      	ldr	r3, [pc, #460]	; (8001814 <handleOpenRX+0x21c>)
 8001646:	f9b3 3000 	ldrsh.w	r3, [r3]
 800164a:	461a      	mov	r2, r3
 800164c:	4b72      	ldr	r3, [pc, #456]	; (8001818 <handleOpenRX+0x220>)
 800164e:	601a      	str	r2, [r3, #0]
            }
            PID_clear(&rotPID);
 8001650:	4872      	ldr	r0, [pc, #456]	; (800181c <handleOpenRX+0x224>)
 8001652:	f000 ff95 	bl	8002580 <PID_clear>
            doangPID = 1;
 8001656:	4b72      	ldr	r3, [pc, #456]	; (8001820 <handleOpenRX+0x228>)
 8001658:	2201      	movs	r2, #1
 800165a:	701a      	strb	r2, [r3, #0]
            tank = 1;
 800165c:	4b71      	ldr	r3, [pc, #452]	; (8001824 <handleOpenRX+0x22c>)
 800165e:	2201      	movs	r2, #1
 8001660:	701a      	strb	r2, [r3, #0]
            lasforward = 1;
 8001662:	4b71      	ldr	r3, [pc, #452]	; (8001828 <handleOpenRX+0x230>)
 8001664:	2201      	movs	r2, #1
 8001666:	701a      	strb	r2, [r3, #0]
            doPID = 1;
 8001668:	4b70      	ldr	r3, [pc, #448]	; (800182c <handleOpenRX+0x234>)
 800166a:	2201      	movs	r2, #1
 800166c:	701a      	strb	r2, [r3, #0]

            sprintf(txbuff, "FORWARD\n");
 800166e:	4970      	ldr	r1, [pc, #448]	; (8001830 <handleOpenRX+0x238>)
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f007 f8eb 	bl	800884c <siprintf>
            BLUESEND
 8001676:	2364      	movs	r3, #100	; 0x64
 8001678:	2214      	movs	r2, #20
 800167a:	6879      	ldr	r1, [r7, #4]
 800167c:	486d      	ldr	r0, [pc, #436]	; (8001834 <handleOpenRX+0x23c>)
 800167e:	f005 fb8a 	bl	8006d96 <HAL_UART_Transmit>
            break;
 8001682:	e0bc      	b.n	80017fe <handleOpenRX+0x206>
        case 2: // step
            if(opnd){
 8001684:	4b63      	ldr	r3, [pc, #396]	; (8001814 <handleOpenRX+0x21c>)
 8001686:	f9b3 3000 	ldrsh.w	r3, [r3]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d022      	beq.n	80016d4 <handleOpenRX+0xdc>
                doPID = 0;
 800168e:	4b67      	ldr	r3, [pc, #412]	; (800182c <handleOpenRX+0x234>)
 8001690:	2200      	movs	r2, #0
 8001692:	701a      	strb	r2, [r3, #0]
                PID_clear(&fwdPIDL);
 8001694:	4868      	ldr	r0, [pc, #416]	; (8001838 <handleOpenRX+0x240>)
 8001696:	f000 ff73 	bl	8002580 <PID_clear>
                PID_clear(&fwdPIDR);
 800169a:	4868      	ldr	r0, [pc, #416]	; (800183c <handleOpenRX+0x244>)
 800169c:	f000 ff70 	bl	8002580 <PID_clear>
                PID_clear(&rotPID);
 80016a0:	485e      	ldr	r0, [pc, #376]	; (800181c <handleOpenRX+0x224>)
 80016a2:	f000 ff6d 	bl	8002580 <PID_clear>
                Encoder_start(wheelL.encoder);
 80016a6:	4b66      	ldr	r3, [pc, #408]	; (8001840 <handleOpenRX+0x248>)
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f000 f8f2 	bl	8001894 <Encoder_start>
                Encoder_start(wheelR.encoder);
 80016b0:	4b64      	ldr	r3, [pc, #400]	; (8001844 <handleOpenRX+0x24c>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f000 f8ed 	bl	8001894 <Encoder_start>
                aimENC = opnd;
 80016ba:	4b56      	ldr	r3, [pc, #344]	; (8001814 <handleOpenRX+0x21c>)
 80016bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016c0:	b29a      	uxth	r2, r3
 80016c2:	4b61      	ldr	r3, [pc, #388]	; (8001848 <handleOpenRX+0x250>)
 80016c4:	801a      	strh	r2, [r3, #0]
                tank = 0;
 80016c6:	4b57      	ldr	r3, [pc, #348]	; (8001824 <handleOpenRX+0x22c>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	701a      	strb	r2, [r3, #0]
                doPID = 1;
 80016cc:	4b57      	ldr	r3, [pc, #348]	; (800182c <handleOpenRX+0x234>)
 80016ce:	2201      	movs	r2, #1
 80016d0:	701a      	strb	r2, [r3, #0]
 80016d2:	e013      	b.n	80016fc <handleOpenRX+0x104>
            }else{
                doPID = 0;
 80016d4:	4b55      	ldr	r3, [pc, #340]	; (800182c <handleOpenRX+0x234>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	701a      	strb	r2, [r3, #0]
                aimANG = angle.Angle[2];
 80016da:	4b5c      	ldr	r3, [pc, #368]	; (800184c <handleOpenRX+0x254>)
 80016dc:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80016e0:	4b5b      	ldr	r3, [pc, #364]	; (8001850 <handleOpenRX+0x258>)
 80016e2:	801a      	strh	r2, [r3, #0]
                PID_clear(&speedPIDL);
 80016e4:	485b      	ldr	r0, [pc, #364]	; (8001854 <handleOpenRX+0x25c>)
 80016e6:	f000 ff4b 	bl	8002580 <PID_clear>
                PID_clear(&speedPIDR);
 80016ea:	485b      	ldr	r0, [pc, #364]	; (8001858 <handleOpenRX+0x260>)
 80016ec:	f000 ff48 	bl	8002580 <PID_clear>
                PID_clear(&spinPID);
 80016f0:	485a      	ldr	r0, [pc, #360]	; (800185c <handleOpenRX+0x264>)
 80016f2:	f000 ff45 	bl	8002580 <PID_clear>
                dospinPID = 1;
 80016f6:	4b46      	ldr	r3, [pc, #280]	; (8001810 <handleOpenRX+0x218>)
 80016f8:	2201      	movs	r2, #1
 80016fa:	701a      	strb	r2, [r3, #0]
            }
            lasforward = 0;
 80016fc:	4b4a      	ldr	r3, [pc, #296]	; (8001828 <handleOpenRX+0x230>)
 80016fe:	2200      	movs	r2, #0
 8001700:	701a      	strb	r2, [r3, #0]

            sprintf(txbuff, "step%d\n", opnd);
 8001702:	4b44      	ldr	r3, [pc, #272]	; (8001814 <handleOpenRX+0x21c>)
 8001704:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001708:	461a      	mov	r2, r3
 800170a:	4955      	ldr	r1, [pc, #340]	; (8001860 <handleOpenRX+0x268>)
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f007 f89d 	bl	800884c <siprintf>
            BLUESEND
 8001712:	2364      	movs	r3, #100	; 0x64
 8001714:	2214      	movs	r2, #20
 8001716:	6879      	ldr	r1, [r7, #4]
 8001718:	4846      	ldr	r0, [pc, #280]	; (8001834 <handleOpenRX+0x23c>)
 800171a:	f005 fb3c 	bl	8006d96 <HAL_UART_Transmit>
            break;
 800171e:	e06e      	b.n	80017fe <handleOpenRX+0x206>
        case 3: // baseangle
            baseANG = angle.Angle[2];
 8001720:	4b4a      	ldr	r3, [pc, #296]	; (800184c <handleOpenRX+0x254>)
 8001722:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8001726:	4b4f      	ldr	r3, [pc, #316]	; (8001864 <handleOpenRX+0x26c>)
 8001728:	801a      	strh	r2, [r3, #0]

            sprintf(txbuff, "baseangle%d\n", baseANG);
 800172a:	4b4e      	ldr	r3, [pc, #312]	; (8001864 <handleOpenRX+0x26c>)
 800172c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001730:	461a      	mov	r2, r3
 8001732:	494d      	ldr	r1, [pc, #308]	; (8001868 <handleOpenRX+0x270>)
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f007 f889 	bl	800884c <siprintf>
            BLUESEND
 800173a:	2364      	movs	r3, #100	; 0x64
 800173c:	2214      	movs	r2, #20
 800173e:	6879      	ldr	r1, [r7, #4]
 8001740:	483c      	ldr	r0, [pc, #240]	; (8001834 <handleOpenRX+0x23c>)
 8001742:	f005 fb28 	bl	8006d96 <HAL_UART_Transmit>
            break;
 8001746:	e05a      	b.n	80017fe <handleOpenRX+0x206>
        case 4: // turn
        case 5: // baseangle turn
            doPID = 0;
 8001748:	4b38      	ldr	r3, [pc, #224]	; (800182c <handleOpenRX+0x234>)
 800174a:	2200      	movs	r2, #0
 800174c:	701a      	strb	r2, [r3, #0]
            aimANG = (opid == 4 ? angle.Angle[2] : baseANG) + opnd;
 800174e:	4b2f      	ldr	r3, [pc, #188]	; (800180c <handleOpenRX+0x214>)
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	2b04      	cmp	r3, #4
 8001754:	d104      	bne.n	8001760 <handleOpenRX+0x168>
 8001756:	4b3d      	ldr	r3, [pc, #244]	; (800184c <handleOpenRX+0x254>)
 8001758:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800175c:	b29b      	uxth	r3, r3
 800175e:	e003      	b.n	8001768 <handleOpenRX+0x170>
 8001760:	4b40      	ldr	r3, [pc, #256]	; (8001864 <handleOpenRX+0x26c>)
 8001762:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001766:	b29b      	uxth	r3, r3
 8001768:	4a2a      	ldr	r2, [pc, #168]	; (8001814 <handleOpenRX+0x21c>)
 800176a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800176e:	b292      	uxth	r2, r2
 8001770:	4413      	add	r3, r2
 8001772:	b29b      	uxth	r3, r3
 8001774:	b21a      	sxth	r2, r3
 8001776:	4b36      	ldr	r3, [pc, #216]	; (8001850 <handleOpenRX+0x258>)
 8001778:	801a      	strh	r2, [r3, #0]
            if(lasforward){
 800177a:	4b2b      	ldr	r3, [pc, #172]	; (8001828 <handleOpenRX+0x230>)
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d003      	beq.n	800178a <handleOpenRX+0x192>
                doPID = 1;
 8001782:	4b2a      	ldr	r3, [pc, #168]	; (800182c <handleOpenRX+0x234>)
 8001784:	2201      	movs	r2, #1
 8001786:	701a      	strb	r2, [r3, #0]
 8001788:	e00b      	b.n	80017a2 <handleOpenRX+0x1aa>
            }else{
                PID_clear(&speedPIDL);
 800178a:	4832      	ldr	r0, [pc, #200]	; (8001854 <handleOpenRX+0x25c>)
 800178c:	f000 fef8 	bl	8002580 <PID_clear>
                PID_clear(&speedPIDR);
 8001790:	4831      	ldr	r0, [pc, #196]	; (8001858 <handleOpenRX+0x260>)
 8001792:	f000 fef5 	bl	8002580 <PID_clear>
                PID_clear(&spinPID);
 8001796:	4831      	ldr	r0, [pc, #196]	; (800185c <handleOpenRX+0x264>)
 8001798:	f000 fef2 	bl	8002580 <PID_clear>
                dospinPID = 1;
 800179c:	4b1c      	ldr	r3, [pc, #112]	; (8001810 <handleOpenRX+0x218>)
 800179e:	2201      	movs	r2, #1
 80017a0:	701a      	strb	r2, [r3, #0]
            }

            sprintf(txbuff, "%s%d\n", (opid == 4 ? "turn" : "baseturn"), opnd);
 80017a2:	4b1a      	ldr	r3, [pc, #104]	; (800180c <handleOpenRX+0x214>)
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	2b04      	cmp	r3, #4
 80017a8:	d101      	bne.n	80017ae <handleOpenRX+0x1b6>
 80017aa:	4a30      	ldr	r2, [pc, #192]	; (800186c <handleOpenRX+0x274>)
 80017ac:	e000      	b.n	80017b0 <handleOpenRX+0x1b8>
 80017ae:	4a30      	ldr	r2, [pc, #192]	; (8001870 <handleOpenRX+0x278>)
 80017b0:	4b18      	ldr	r3, [pc, #96]	; (8001814 <handleOpenRX+0x21c>)
 80017b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017b6:	492f      	ldr	r1, [pc, #188]	; (8001874 <handleOpenRX+0x27c>)
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f007 f847 	bl	800884c <siprintf>
            BLUESEND
 80017be:	2364      	movs	r3, #100	; 0x64
 80017c0:	2214      	movs	r2, #20
 80017c2:	6879      	ldr	r1, [r7, #4]
 80017c4:	481b      	ldr	r0, [pc, #108]	; (8001834 <handleOpenRX+0x23c>)
 80017c6:	f005 fae6 	bl	8006d96 <HAL_UART_Transmit>
            break;
 80017ca:	e018      	b.n	80017fe <handleOpenRX+0x206>
        case 6: // pick
            Paw_pick();
 80017cc:	f000 fffc 	bl	80027c8 <Paw_pick>
            break;
 80017d0:	e015      	b.n	80017fe <handleOpenRX+0x206>
        case 7:
            Paw_drop(opnd);
 80017d2:	4b10      	ldr	r3, [pc, #64]	; (8001814 <handleOpenRX+0x21c>)
 80017d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017d8:	b29b      	uxth	r3, r3
 80017da:	4618      	mov	r0, r3
 80017dc:	f001 f838 	bl	8002850 <Paw_drop>
            sprintf(txbuff, "drop%d\n", opnd);
 80017e0:	4b0c      	ldr	r3, [pc, #48]	; (8001814 <handleOpenRX+0x21c>)
 80017e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017e6:	461a      	mov	r2, r3
 80017e8:	4923      	ldr	r1, [pc, #140]	; (8001878 <handleOpenRX+0x280>)
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f007 f82e 	bl	800884c <siprintf>
            BLUESEND
 80017f0:	2364      	movs	r3, #100	; 0x64
 80017f2:	2214      	movs	r2, #20
 80017f4:	6879      	ldr	r1, [r7, #4]
 80017f6:	480f      	ldr	r0, [pc, #60]	; (8001834 <handleOpenRX+0x23c>)
 80017f8:	f005 facd 	bl	8006d96 <HAL_UART_Transmit>
            break;
 80017fc:	bf00      	nop
    }
}
 80017fe:	bf00      	nop
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	20000722 	.word	0x20000722
 800180c:	2000071e 	.word	0x2000071e
 8001810:	2000068f 	.word	0x2000068f
 8001814:	20000720 	.word	0x20000720
 8001818:	20000530 	.word	0x20000530
 800181c:	20000660 	.word	0x20000660
 8001820:	2000068e 	.word	0x2000068e
 8001824:	20000723 	.word	0x20000723
 8001828:	20000204 	.word	0x20000204
 800182c:	20000604 	.word	0x20000604
 8001830:	0800cc34 	.word	0x0800cc34
 8001834:	20000400 	.word	0x20000400
 8001838:	20000608 	.word	0x20000608
 800183c:	20000634 	.word	0x20000634
 8001840:	20000544 	.word	0x20000544
 8001844:	2000055c 	.word	0x2000055c
 8001848:	20000606 	.word	0x20000606
 800184c:	200005fc 	.word	0x200005fc
 8001850:	2000068c 	.word	0x2000068c
 8001854:	20000690 	.word	0x20000690
 8001858:	200006bc 	.word	0x200006bc
 800185c:	200006f0 	.word	0x200006f0
 8001860:	0800cc74 	.word	0x0800cc74
 8001864:	20000206 	.word	0x20000206
 8001868:	0800cc54 	.word	0x0800cc54
 800186c:	0800cc7c 	.word	0x0800cc7c
 8001870:	0800cc84 	.word	0x0800cc84
 8001874:	0800cc90 	.word	0x0800cc90
 8001878:	0800cc98 	.word	0x0800cc98

0800187c <Encoder_init>:
/* ENCODER */

#include "main.h"
#include "encoder.h"

void Encoder_init(TIM_HandleTypeDef *htim){
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
    HAL_TIM_Encoder_Start(htim, TIM_CHANNEL_ALL);
 8001884:	213c      	movs	r1, #60	; 0x3c
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f004 f9b3 	bl	8005bf2 <HAL_TIM_Encoder_Start>
}
 800188c:	bf00      	nop
 800188e:	3708      	adds	r7, #8
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}

08001894 <Encoder_start>:

void Encoder_start(TIM_HandleTypeDef *htim){
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
    __HAL_TIM_SET_COUNTER(htim, 0);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2200      	movs	r2, #0
 80018a2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80018a4:	bf00      	nop
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bc80      	pop	{r7}
 80018ac:	4770      	bx	lr

080018ae <Encoder_read>:

uint16_t Encoder_read(TIM_HandleTypeDef *htim){
 80018ae:	b480      	push	{r7}
 80018b0:	b083      	sub	sp, #12
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
    return __HAL_TIM_GET_COUNTER(htim);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018bc:	b29b      	uxth	r3, r3
}
 80018be:	4618      	mov	r0, r3
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bc80      	pop	{r7}
 80018c6:	4770      	bx	lr

080018c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018ce:	f002 f95d 	bl	8003b8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018d2:	f000 f93d 	bl	8001b50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018d6:	f000 fce3 	bl	80022a0 <MX_GPIO_Init>
  MX_DMA_Init();
 80018da:	f000 fcc3 	bl	8002264 <MX_DMA_Init>
  MX_TIM3_Init();
 80018de:	f000 fa65 	bl	8001dac <MX_TIM3_Init>
  MX_TIM1_Init();
 80018e2:	f000 f97b 	bl	8001bdc <MX_TIM1_Init>
  MX_TIM2_Init();
 80018e6:	f000 f9d1 	bl	8001c8c <MX_TIM2_Init>
  MX_TIM4_Init();
 80018ea:	f000 fae1 	bl	8001eb0 <MX_TIM4_Init>
  MX_TIM8_Init();
 80018ee:	f000 fbd5 	bl	800209c <MX_TIM8_Init>
  MX_USART1_UART_Init();
 80018f2:	f000 fc2b 	bl	800214c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80018f6:	f000 fc5b 	bl	80021b0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80018fa:	f000 fc89 	bl	8002210 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 80018fe:	f000 fb59 	bl	8001fb4 <MX_TIM6_Init>
  MX_TIM7_Init();
 8001902:	f000 fb8d 	bl	8002020 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  // Servo
  Servo_init(&servoB, &htim3, TIM_CHANNEL_1);	// big
 8001906:	2200      	movs	r2, #0
 8001908:	496a      	ldr	r1, [pc, #424]	; (8001ab4 <main+0x1ec>)
 800190a:	486b      	ldr	r0, [pc, #428]	; (8001ab8 <main+0x1f0>)
 800190c:	f000 ff06 	bl	800271c <Servo_init>
  Servo_init(&servoS, &htim3, TIM_CHANNEL_2);	// small
 8001910:	2204      	movs	r2, #4
 8001912:	4968      	ldr	r1, [pc, #416]	; (8001ab4 <main+0x1ec>)
 8001914:	4869      	ldr	r0, [pc, #420]	; (8001abc <main+0x1f4>)
 8001916:	f000 ff01 	bl	800271c <Servo_init>
  Paw_init();
 800191a:	f000 ff43 	bl	80027a4 <Paw_init>

  // Wheel
  control_init();
 800191e:	f7ff fc2d 	bl	800117c <control_init>

  // Ultrasound
  Ultrasound_init(&ultra1, &htim2, TIM_CHANNEL_1, GPIOB, GPIO_PIN_12);	// front left
 8001922:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001926:	9300      	str	r3, [sp, #0]
 8001928:	4b65      	ldr	r3, [pc, #404]	; (8001ac0 <main+0x1f8>)
 800192a:	2200      	movs	r2, #0
 800192c:	4965      	ldr	r1, [pc, #404]	; (8001ac4 <main+0x1fc>)
 800192e:	4866      	ldr	r0, [pc, #408]	; (8001ac8 <main+0x200>)
 8001930:	f001 fdea 	bl	8003508 <Ultrasound_init>
  Ultrasound_init(&ultra2, &htim2, TIM_CHANNEL_2, GPIOA, GPIO_PIN_5);	// front right
 8001934:	2320      	movs	r3, #32
 8001936:	9300      	str	r3, [sp, #0]
 8001938:	4b64      	ldr	r3, [pc, #400]	; (8001acc <main+0x204>)
 800193a:	2204      	movs	r2, #4
 800193c:	4961      	ldr	r1, [pc, #388]	; (8001ac4 <main+0x1fc>)
 800193e:	4864      	ldr	r0, [pc, #400]	; (8001ad0 <main+0x208>)
 8001940:	f001 fde2 	bl	8003508 <Ultrasound_init>
  ultra2.retreat = ultra1.retreat = retr_front;
 8001944:	4b60      	ldr	r3, [pc, #384]	; (8001ac8 <main+0x200>)
 8001946:	4a63      	ldr	r2, [pc, #396]	; (8001ad4 <main+0x20c>)
 8001948:	615a      	str	r2, [r3, #20]
 800194a:	4b5f      	ldr	r3, [pc, #380]	; (8001ac8 <main+0x200>)
 800194c:	695b      	ldr	r3, [r3, #20]
 800194e:	4a60      	ldr	r2, [pc, #384]	; (8001ad0 <main+0x208>)
 8001950:	6153      	str	r3, [r2, #20]
  Ultrasound_init(&ultra3, &htim2, TIM_CHANNEL_3, GPIOC, GPIO_PIN_12);	// back left
 8001952:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001956:	9300      	str	r3, [sp, #0]
 8001958:	4b5f      	ldr	r3, [pc, #380]	; (8001ad8 <main+0x210>)
 800195a:	2208      	movs	r2, #8
 800195c:	4959      	ldr	r1, [pc, #356]	; (8001ac4 <main+0x1fc>)
 800195e:	485f      	ldr	r0, [pc, #380]	; (8001adc <main+0x214>)
 8001960:	f001 fdd2 	bl	8003508 <Ultrasound_init>
  Ultrasound_init(&ultra4, &htim2, TIM_CHANNEL_4, GPIOC, GPIO_PIN_13);	// back right
 8001964:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001968:	9300      	str	r3, [sp, #0]
 800196a:	4b5b      	ldr	r3, [pc, #364]	; (8001ad8 <main+0x210>)
 800196c:	220c      	movs	r2, #12
 800196e:	4955      	ldr	r1, [pc, #340]	; (8001ac4 <main+0x1fc>)
 8001970:	485b      	ldr	r0, [pc, #364]	; (8001ae0 <main+0x218>)
 8001972:	f001 fdc9 	bl	8003508 <Ultrasound_init>
  __HAL_TIM_CLEAR_IT(&htim7, TIM_IT_UPDATE);	// trig timer init
 8001976:	4b5b      	ldr	r3, [pc, #364]	; (8001ae4 <main+0x21c>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f06f 0201 	mvn.w	r2, #1
 800197e:	611a      	str	r2, [r3, #16]

  // Timer
  TimerIT_init(&htim6);
 8001980:	4859      	ldr	r0, [pc, #356]	; (8001ae8 <main+0x220>)
 8001982:	f001 fc67 	bl	8003254 <TimerIT_init>

  // IMU
  JY901_init(&JY901data, &huart3);
 8001986:	4959      	ldr	r1, [pc, #356]	; (8001aec <main+0x224>)
 8001988:	4859      	ldr	r0, [pc, #356]	; (8001af0 <main+0x228>)
 800198a:	f7ff fb79 	bl	8001080 <JY901_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  openmvflag = 0;
 800198e:	4b59      	ldr	r3, [pc, #356]	; (8001af4 <main+0x22c>)
 8001990:	2200      	movs	r2, #0
 8001992:	701a      	strb	r2, [r3, #0]

  Blueflag = 0;
 8001994:	4b58      	ldr	r3, [pc, #352]	; (8001af8 <main+0x230>)
 8001996:	2200      	movs	r2, #0
 8001998:	701a      	strb	r2, [r3, #0]

  PID_init(&fwdPIDL, 0.2, 0, 0);
 800199a:	f04f 0300 	mov.w	r3, #0
 800199e:	f04f 0200 	mov.w	r2, #0
 80019a2:	4956      	ldr	r1, [pc, #344]	; (8001afc <main+0x234>)
 80019a4:	4856      	ldr	r0, [pc, #344]	; (8001b00 <main+0x238>)
 80019a6:	f000 fdd4 	bl	8002552 <PID_init>
  PID_init(&fwdPIDR, 0.2, 0, 0);
 80019aa:	f04f 0300 	mov.w	r3, #0
 80019ae:	f04f 0200 	mov.w	r2, #0
 80019b2:	4952      	ldr	r1, [pc, #328]	; (8001afc <main+0x234>)
 80019b4:	4853      	ldr	r0, [pc, #332]	; (8001b04 <main+0x23c>)
 80019b6:	f000 fdcc 	bl	8002552 <PID_init>
  PID_init(&rotPID, 0.1, 0, 0);
 80019ba:	f04f 0300 	mov.w	r3, #0
 80019be:	f04f 0200 	mov.w	r2, #0
 80019c2:	4951      	ldr	r1, [pc, #324]	; (8001b08 <main+0x240>)
 80019c4:	4851      	ldr	r0, [pc, #324]	; (8001b0c <main+0x244>)
 80019c6:	f000 fdc4 	bl	8002552 <PID_init>
  PID_init(&speedPIDL, 1000, 100, 0);
 80019ca:	f04f 0300 	mov.w	r3, #0
 80019ce:	4a50      	ldr	r2, [pc, #320]	; (8001b10 <main+0x248>)
 80019d0:	4950      	ldr	r1, [pc, #320]	; (8001b14 <main+0x24c>)
 80019d2:	4851      	ldr	r0, [pc, #324]	; (8001b18 <main+0x250>)
 80019d4:	f000 fdbd 	bl	8002552 <PID_init>
  PID_init(&speedPIDR, 1000, 100, 0);
 80019d8:	f04f 0300 	mov.w	r3, #0
 80019dc:	4a4c      	ldr	r2, [pc, #304]	; (8001b10 <main+0x248>)
 80019de:	494d      	ldr	r1, [pc, #308]	; (8001b14 <main+0x24c>)
 80019e0:	484e      	ldr	r0, [pc, #312]	; (8001b1c <main+0x254>)
 80019e2:	f000 fdb6 	bl	8002552 <PID_init>
  PID_init(&spinPID, 0.0028, 0, 0);
 80019e6:	f04f 0300 	mov.w	r3, #0
 80019ea:	f04f 0200 	mov.w	r2, #0
 80019ee:	494c      	ldr	r1, [pc, #304]	; (8001b20 <main+0x258>)
 80019f0:	484c      	ldr	r0, [pc, #304]	; (8001b24 <main+0x25c>)
 80019f2:	f000 fdae 	bl	8002552 <PID_init>

  speedlim = 6000;
 80019f6:	4b4c      	ldr	r3, [pc, #304]	; (8001b28 <main+0x260>)
 80019f8:	f241 7270 	movw	r2, #6000	; 0x1770
 80019fc:	801a      	strh	r2, [r3, #0]
  fwdlim = 5000;
 80019fe:	4b4b      	ldr	r3, [pc, #300]	; (8001b2c <main+0x264>)
 8001a00:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a04:	601a      	str	r2, [r3, #0]

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001a06:	2201      	movs	r2, #1
 8001a08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a0c:	482c      	ldr	r0, [pc, #176]	; (8001ac0 <main+0x1f8>)
 8001a0e:	f003 f867 	bl	8004ae0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001a12:	2201      	movs	r2, #1
 8001a14:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a18:	4829      	ldr	r0, [pc, #164]	; (8001ac0 <main+0x1f8>)
 8001a1a:	f003 f861 	bl	8004ae0 <HAL_GPIO_WritePin>

  Ultralim = 600;
 8001a1e:	4b44      	ldr	r3, [pc, #272]	; (8001b30 <main+0x268>)
 8001a20:	f44f 7216 	mov.w	r2, #600	; 0x258
 8001a24:	601a      	str	r2, [r3, #0]
  doultra = 1;
 8001a26:	4b43      	ldr	r3, [pc, #268]	; (8001b34 <main+0x26c>)
 8001a28:	2201      	movs	r2, #1
 8001a2a:	701a      	strb	r2, [r3, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(Blueflag){
 8001a2c:	4b32      	ldr	r3, [pc, #200]	; (8001af8 <main+0x230>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d006      	beq.n	8001a42 <main+0x17a>
		  handleBlueRX((char*)BlueRX, (char*)BlueTX);
 8001a34:	4940      	ldr	r1, [pc, #256]	; (8001b38 <main+0x270>)
 8001a36:	4841      	ldr	r0, [pc, #260]	; (8001b3c <main+0x274>)
 8001a38:	f7ff fbd2 	bl	80011e0 <handleBlueRX>
		  Blueflag = 0;
 8001a3c:	4b2e      	ldr	r3, [pc, #184]	; (8001af8 <main+0x230>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	701a      	strb	r2, [r3, #0]
	  }
	  if(openmvflag && !force){
 8001a42:	4b2c      	ldr	r3, [pc, #176]	; (8001af4 <main+0x22c>)
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d009      	beq.n	8001a5e <main+0x196>
 8001a4a:	4b3d      	ldr	r3, [pc, #244]	; (8001b40 <main+0x278>)
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d105      	bne.n	8001a5e <main+0x196>
		  handleOpenRX((char*)BlueTX);
 8001a52:	4839      	ldr	r0, [pc, #228]	; (8001b38 <main+0x270>)
 8001a54:	f7ff fdd0 	bl	80015f8 <handleOpenRX>
		  openmvflag = 0;
 8001a58:	4b26      	ldr	r3, [pc, #152]	; (8001af4 <main+0x22c>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	701a      	strb	r2, [r3, #0]
	  }

	  Ultrasound_trig(&ultra1);
 8001a5e:	481a      	ldr	r0, [pc, #104]	; (8001ac8 <main+0x200>)
 8001a60:	f001 fd89 	bl	8003576 <Ultrasound_trig>
	  Ultrasound_trig(&ultra2);
 8001a64:	481a      	ldr	r0, [pc, #104]	; (8001ad0 <main+0x208>)
 8001a66:	f001 fd86 	bl	8003576 <Ultrasound_trig>
	  __HAL_TIM_SET_COUNTER(&htim7, 0);
 8001a6a:	4b1e      	ldr	r3, [pc, #120]	; (8001ae4 <main+0x21c>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	625a      	str	r2, [r3, #36]	; 0x24
	  HAL_TIM_Base_Start_IT(&htim7);
 8001a72:	481c      	ldr	r0, [pc, #112]	; (8001ae4 <main+0x21c>)
 8001a74:	f003 fcb6 	bl	80053e4 <HAL_TIM_Base_Start_IT>

	  HAL_Delay(100);
 8001a78:	2064      	movs	r0, #100	; 0x64
 8001a7a:	f002 f8e9 	bl	8003c50 <HAL_Delay>

	  if(!ultra1.danger && !ultra2.danger && speedonly){
 8001a7e:	4b12      	ldr	r3, [pc, #72]	; (8001ac8 <main+0x200>)
 8001a80:	7e1b      	ldrb	r3, [r3, #24]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d1d2      	bne.n	8001a2c <main+0x164>
 8001a86:	4b12      	ldr	r3, [pc, #72]	; (8001ad0 <main+0x208>)
 8001a88:	7e1b      	ldrb	r3, [r3, #24]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d1ce      	bne.n	8001a2c <main+0x164>
 8001a8e:	4b2d      	ldr	r3, [pc, #180]	; (8001b44 <main+0x27c>)
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d0ca      	beq.n	8001a2c <main+0x164>
		  doPID = dospinPID = 0;
 8001a96:	4b2c      	ldr	r3, [pc, #176]	; (8001b48 <main+0x280>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	701a      	strb	r2, [r3, #0]
 8001a9c:	4b2a      	ldr	r3, [pc, #168]	; (8001b48 <main+0x280>)
 8001a9e:	781a      	ldrb	r2, [r3, #0]
 8001aa0:	4b2a      	ldr	r3, [pc, #168]	; (8001b4c <main+0x284>)
 8001aa2:	701a      	strb	r2, [r3, #0]
		  force = 0;
 8001aa4:	4b26      	ldr	r3, [pc, #152]	; (8001b40 <main+0x278>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	701a      	strb	r2, [r3, #0]
		  speedonly = 0;
 8001aaa:	4b26      	ldr	r3, [pc, #152]	; (8001b44 <main+0x27c>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	701a      	strb	r2, [r3, #0]
	  if(Blueflag){
 8001ab0:	e7bc      	b.n	8001a2c <main+0x164>
 8001ab2:	bf00      	nop
 8001ab4:	20000298 	.word	0x20000298
 8001ab8:	20000534 	.word	0x20000534
 8001abc:	2000053c 	.word	0x2000053c
 8001ac0:	40010c00 	.word	0x40010c00
 8001ac4:	20000250 	.word	0x20000250
 8001ac8:	20000574 	.word	0x20000574
 8001acc:	40010800 	.word	0x40010800
 8001ad0:	20000590 	.word	0x20000590
 8001ad4:	080038c9 	.word	0x080038c9
 8001ad8:	40011000 	.word	0x40011000
 8001adc:	200005ac 	.word	0x200005ac
 8001ae0:	200005c8 	.word	0x200005c8
 8001ae4:	20000370 	.word	0x20000370
 8001ae8:	20000328 	.word	0x20000328
 8001aec:	20000488 	.word	0x20000488
 8001af0:	200005ec 	.word	0x200005ec
 8001af4:	2000071d 	.word	0x2000071d
 8001af8:	2000052c 	.word	0x2000052c
 8001afc:	3e4ccccd 	.word	0x3e4ccccd
 8001b00:	20000608 	.word	0x20000608
 8001b04:	20000634 	.word	0x20000634
 8001b08:	3dcccccd 	.word	0x3dcccccd
 8001b0c:	20000660 	.word	0x20000660
 8001b10:	42c80000 	.word	0x42c80000
 8001b14:	447a0000 	.word	0x447a0000
 8001b18:	20000690 	.word	0x20000690
 8001b1c:	200006bc 	.word	0x200006bc
 8001b20:	3b378034 	.word	0x3b378034
 8001b24:	200006f0 	.word	0x200006f0
 8001b28:	2000052e 	.word	0x2000052e
 8001b2c:	20000530 	.word	0x20000530
 8001b30:	200005e4 	.word	0x200005e4
 8001b34:	200005e8 	.word	0x200005e8
 8001b38:	20000518 	.word	0x20000518
 8001b3c:	20000510 	.word	0x20000510
 8001b40:	20000725 	.word	0x20000725
 8001b44:	20000724 	.word	0x20000724
 8001b48:	2000068f 	.word	0x2000068f
 8001b4c:	20000604 	.word	0x20000604

08001b50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b090      	sub	sp, #64	; 0x40
 8001b54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b56:	f107 0318 	add.w	r3, r7, #24
 8001b5a:	2228      	movs	r2, #40	; 0x28
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f005 fffa 	bl	8007b58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b64:	1d3b      	adds	r3, r7, #4
 8001b66:	2200      	movs	r2, #0
 8001b68:	601a      	str	r2, [r3, #0]
 8001b6a:	605a      	str	r2, [r3, #4]
 8001b6c:	609a      	str	r2, [r3, #8]
 8001b6e:	60da      	str	r2, [r3, #12]
 8001b70:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b72:	2301      	movs	r3, #1
 8001b74:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b7a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b80:	2301      	movs	r3, #1
 8001b82:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b84:	2302      	movs	r3, #2
 8001b86:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b88:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b8c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001b8e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001b92:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b94:	f107 0318 	add.w	r3, r7, #24
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f002 ffb9 	bl	8004b10 <HAL_RCC_OscConfig>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001ba4:	f000 fcd0 	bl	8002548 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ba8:	230f      	movs	r3, #15
 8001baa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bac:	2302      	movs	r3, #2
 8001bae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001bb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bb8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001bbe:	1d3b      	adds	r3, r7, #4
 8001bc0:	2102      	movs	r1, #2
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f003 fa26 	bl	8005014 <HAL_RCC_ClockConfig>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001bce:	f000 fcbb 	bl	8002548 <Error_Handler>
  }
}
 8001bd2:	bf00      	nop
 8001bd4:	3740      	adds	r7, #64	; 0x40
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
	...

08001bdc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b08c      	sub	sp, #48	; 0x30
 8001be0:	af00      	add	r7, sp, #0

	// Encoder 2

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001be2:	f107 030c 	add.w	r3, r7, #12
 8001be6:	2224      	movs	r2, #36	; 0x24
 8001be8:	2100      	movs	r1, #0
 8001bea:	4618      	mov	r0, r3
 8001bec:	f005 ffb4 	bl	8007b58 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bf0:	1d3b      	adds	r3, r7, #4
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	601a      	str	r2, [r3, #0]
 8001bf6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001bf8:	4b22      	ldr	r3, [pc, #136]	; (8001c84 <MX_TIM1_Init+0xa8>)
 8001bfa:	4a23      	ldr	r2, [pc, #140]	; (8001c88 <MX_TIM1_Init+0xac>)
 8001bfc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001bfe:	4b21      	ldr	r3, [pc, #132]	; (8001c84 <MX_TIM1_Init+0xa8>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c04:	4b1f      	ldr	r3, [pc, #124]	; (8001c84 <MX_TIM1_Init+0xa8>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001c0a:	4b1e      	ldr	r3, [pc, #120]	; (8001c84 <MX_TIM1_Init+0xa8>)
 8001c0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c10:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c12:	4b1c      	ldr	r3, [pc, #112]	; (8001c84 <MX_TIM1_Init+0xa8>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c18:	4b1a      	ldr	r3, [pc, #104]	; (8001c84 <MX_TIM1_Init+0xa8>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c1e:	4b19      	ldr	r3, [pc, #100]	; (8001c84 <MX_TIM1_Init+0xa8>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001c24:	2301      	movs	r3, #1
 8001c26:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c30:	2300      	movs	r3, #0
 8001c32:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001c34:	2300      	movs	r3, #0
 8001c36:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c40:	2300      	movs	r3, #0
 8001c42:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001c44:	2300      	movs	r3, #0
 8001c46:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001c48:	f107 030c 	add.w	r3, r7, #12
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	480d      	ldr	r0, [pc, #52]	; (8001c84 <MX_TIM1_Init+0xa8>)
 8001c50:	f003 ff2d 	bl	8005aae <HAL_TIM_Encoder_Init>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001c5a:	f000 fc75 	bl	8002548 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c62:	2300      	movs	r3, #0
 8001c64:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c66:	1d3b      	adds	r3, r7, #4
 8001c68:	4619      	mov	r1, r3
 8001c6a:	4806      	ldr	r0, [pc, #24]	; (8001c84 <MX_TIM1_Init+0xa8>)
 8001c6c:	f004 ffc8 	bl	8006c00 <HAL_TIMEx_MasterConfigSynchronization>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001c76:	f000 fc67 	bl	8002548 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001c7a:	bf00      	nop
 8001c7c:	3730      	adds	r7, #48	; 0x30
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	20000208 	.word	0x20000208
 8001c88:	40012c00 	.word	0x40012c00

08001c8c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b08a      	sub	sp, #40	; 0x28
 8001c90:	af00      	add	r7, sp, #0

	// Ultrasound ECHO

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c92:	f107 0318 	add.w	r3, r7, #24
 8001c96:	2200      	movs	r2, #0
 8001c98:	601a      	str	r2, [r3, #0]
 8001c9a:	605a      	str	r2, [r3, #4]
 8001c9c:	609a      	str	r2, [r3, #8]
 8001c9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ca0:	f107 0310 	add.w	r3, r7, #16
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]
 8001ca8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001caa:	463b      	mov	r3, r7
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	605a      	str	r2, [r3, #4]
 8001cb2:	609a      	str	r2, [r3, #8]
 8001cb4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001cb6:	4b3c      	ldr	r3, [pc, #240]	; (8001da8 <MX_TIM2_Init+0x11c>)
 8001cb8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001cbc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8001cbe:	4b3a      	ldr	r3, [pc, #232]	; (8001da8 <MX_TIM2_Init+0x11c>)
 8001cc0:	2247      	movs	r2, #71	; 0x47
 8001cc2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cc4:	4b38      	ldr	r3, [pc, #224]	; (8001da8 <MX_TIM2_Init+0x11c>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001cca:	4b37      	ldr	r3, [pc, #220]	; (8001da8 <MX_TIM2_Init+0x11c>)
 8001ccc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cd0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cd2:	4b35      	ldr	r3, [pc, #212]	; (8001da8 <MX_TIM2_Init+0x11c>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cd8:	4b33      	ldr	r3, [pc, #204]	; (8001da8 <MX_TIM2_Init+0x11c>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001cde:	4832      	ldr	r0, [pc, #200]	; (8001da8 <MX_TIM2_Init+0x11c>)
 8001ce0:	f003 fb30 	bl	8005344 <HAL_TIM_Base_Init>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8001cea:	f000 fc2d 	bl	8002548 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cf2:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001cf4:	f107 0318 	add.w	r3, r7, #24
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	482b      	ldr	r0, [pc, #172]	; (8001da8 <MX_TIM2_Init+0x11c>)
 8001cfc:	f004 fa62 	bl	80061c4 <HAL_TIM_ConfigClockSource>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001d06:	f000 fc1f 	bl	8002548 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001d0a:	4827      	ldr	r0, [pc, #156]	; (8001da8 <MX_TIM2_Init+0x11c>)
 8001d0c:	f003 fd0a 	bl	8005724 <HAL_TIM_IC_Init>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001d16:	f000 fc17 	bl	8002548 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d22:	f107 0310 	add.w	r3, r7, #16
 8001d26:	4619      	mov	r1, r3
 8001d28:	481f      	ldr	r0, [pc, #124]	; (8001da8 <MX_TIM2_Init+0x11c>)
 8001d2a:	f004 ff69 	bl	8006c00 <HAL_TIMEx_MasterConfigSynchronization>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8001d34:	f000 fc08 	bl	8002548 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001d40:	2300      	movs	r3, #0
 8001d42:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001d44:	2300      	movs	r3, #0
 8001d46:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001d48:	463b      	mov	r3, r7
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4816      	ldr	r0, [pc, #88]	; (8001da8 <MX_TIM2_Init+0x11c>)
 8001d50:	f004 f8e5 	bl	8005f1e <HAL_TIM_IC_ConfigChannel>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8001d5a:	f000 fbf5 	bl	8002548 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001d5e:	463b      	mov	r3, r7
 8001d60:	2204      	movs	r2, #4
 8001d62:	4619      	mov	r1, r3
 8001d64:	4810      	ldr	r0, [pc, #64]	; (8001da8 <MX_TIM2_Init+0x11c>)
 8001d66:	f004 f8da 	bl	8005f1e <HAL_TIM_IC_ConfigChannel>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8001d70:	f000 fbea 	bl	8002548 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001d74:	463b      	mov	r3, r7
 8001d76:	2208      	movs	r2, #8
 8001d78:	4619      	mov	r1, r3
 8001d7a:	480b      	ldr	r0, [pc, #44]	; (8001da8 <MX_TIM2_Init+0x11c>)
 8001d7c:	f004 f8cf 	bl	8005f1e <HAL_TIM_IC_ConfigChannel>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <MX_TIM2_Init+0xfe>
  {
    Error_Handler();
 8001d86:	f000 fbdf 	bl	8002548 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001d8a:	463b      	mov	r3, r7
 8001d8c:	220c      	movs	r2, #12
 8001d8e:	4619      	mov	r1, r3
 8001d90:	4805      	ldr	r0, [pc, #20]	; (8001da8 <MX_TIM2_Init+0x11c>)
 8001d92:	f004 f8c4 	bl	8005f1e <HAL_TIM_IC_ConfigChannel>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <MX_TIM2_Init+0x114>
  {
    Error_Handler();
 8001d9c:	f000 fbd4 	bl	8002548 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001da0:	bf00      	nop
 8001da2:	3728      	adds	r7, #40	; 0x28
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	20000250 	.word	0x20000250

08001dac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b08e      	sub	sp, #56	; 0x38
 8001db0:	af00      	add	r7, sp, #0

	// Servo PWM

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001db2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001db6:	2200      	movs	r2, #0
 8001db8:	601a      	str	r2, [r3, #0]
 8001dba:	605a      	str	r2, [r3, #4]
 8001dbc:	609a      	str	r2, [r3, #8]
 8001dbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dc0:	f107 0320 	add.w	r3, r7, #32
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]
 8001dc8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dca:	1d3b      	adds	r3, r7, #4
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]
 8001dd0:	605a      	str	r2, [r3, #4]
 8001dd2:	609a      	str	r2, [r3, #8]
 8001dd4:	60da      	str	r2, [r3, #12]
 8001dd6:	611a      	str	r2, [r3, #16]
 8001dd8:	615a      	str	r2, [r3, #20]
 8001dda:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ddc:	4b32      	ldr	r3, [pc, #200]	; (8001ea8 <MX_TIM3_Init+0xfc>)
 8001dde:	4a33      	ldr	r2, [pc, #204]	; (8001eac <MX_TIM3_Init+0x100>)
 8001de0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8001de2:	4b31      	ldr	r3, [pc, #196]	; (8001ea8 <MX_TIM3_Init+0xfc>)
 8001de4:	2247      	movs	r2, #71	; 0x47
 8001de6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001de8:	4b2f      	ldr	r3, [pc, #188]	; (8001ea8 <MX_TIM3_Init+0xfc>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8001dee:	4b2e      	ldr	r3, [pc, #184]	; (8001ea8 <MX_TIM3_Init+0xfc>)
 8001df0:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001df4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001df6:	4b2c      	ldr	r3, [pc, #176]	; (8001ea8 <MX_TIM3_Init+0xfc>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dfc:	4b2a      	ldr	r3, [pc, #168]	; (8001ea8 <MX_TIM3_Init+0xfc>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001e02:	4829      	ldr	r0, [pc, #164]	; (8001ea8 <MX_TIM3_Init+0xfc>)
 8001e04:	f003 fa9e 	bl	8005344 <HAL_TIM_Base_Init>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001e0e:	f000 fb9b 	bl	8002548 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e16:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001e18:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4822      	ldr	r0, [pc, #136]	; (8001ea8 <MX_TIM3_Init+0xfc>)
 8001e20:	f004 f9d0 	bl	80061c4 <HAL_TIM_ConfigClockSource>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001e2a:	f000 fb8d 	bl	8002548 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001e2e:	481e      	ldr	r0, [pc, #120]	; (8001ea8 <MX_TIM3_Init+0xfc>)
 8001e30:	f003 fb66 	bl	8005500 <HAL_TIM_PWM_Init>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001e3a:	f000 fb85 	bl	8002548 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e42:	2300      	movs	r3, #0
 8001e44:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e46:	f107 0320 	add.w	r3, r7, #32
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	4816      	ldr	r0, [pc, #88]	; (8001ea8 <MX_TIM3_Init+0xfc>)
 8001e4e:	f004 fed7 	bl	8006c00 <HAL_TIMEx_MasterConfigSynchronization>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001e58:	f000 fb76 	bl	8002548 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e5c:	2360      	movs	r3, #96	; 0x60
 8001e5e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e60:	2300      	movs	r3, #0
 8001e62:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e64:	2300      	movs	r3, #0
 8001e66:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e6c:	1d3b      	adds	r3, r7, #4
 8001e6e:	2200      	movs	r2, #0
 8001e70:	4619      	mov	r1, r3
 8001e72:	480d      	ldr	r0, [pc, #52]	; (8001ea8 <MX_TIM3_Init+0xfc>)
 8001e74:	f004 f8e8 	bl	8006048 <HAL_TIM_PWM_ConfigChannel>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001e7e:	f000 fb63 	bl	8002548 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e82:	1d3b      	adds	r3, r7, #4
 8001e84:	2204      	movs	r2, #4
 8001e86:	4619      	mov	r1, r3
 8001e88:	4807      	ldr	r0, [pc, #28]	; (8001ea8 <MX_TIM3_Init+0xfc>)
 8001e8a:	f004 f8dd 	bl	8006048 <HAL_TIM_PWM_ConfigChannel>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001e94:	f000 fb58 	bl	8002548 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001e98:	4803      	ldr	r0, [pc, #12]	; (8001ea8 <MX_TIM3_Init+0xfc>)
 8001e9a:	f000 fefb 	bl	8002c94 <HAL_TIM_MspPostInit>

}
 8001e9e:	bf00      	nop
 8001ea0:	3738      	adds	r7, #56	; 0x38
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	20000298 	.word	0x20000298
 8001eac:	40000400 	.word	0x40000400

08001eb0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b08e      	sub	sp, #56	; 0x38
 8001eb4:	af00      	add	r7, sp, #0

	// Motor PWM

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001eb6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001eba:	2200      	movs	r2, #0
 8001ebc:	601a      	str	r2, [r3, #0]
 8001ebe:	605a      	str	r2, [r3, #4]
 8001ec0:	609a      	str	r2, [r3, #8]
 8001ec2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ec4:	f107 0320 	add.w	r3, r7, #32
 8001ec8:	2200      	movs	r2, #0
 8001eca:	601a      	str	r2, [r3, #0]
 8001ecc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ece:	1d3b      	adds	r3, r7, #4
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]
 8001ed4:	605a      	str	r2, [r3, #4]
 8001ed6:	609a      	str	r2, [r3, #8]
 8001ed8:	60da      	str	r2, [r3, #12]
 8001eda:	611a      	str	r2, [r3, #16]
 8001edc:	615a      	str	r2, [r3, #20]
 8001ede:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001ee0:	4b32      	ldr	r3, [pc, #200]	; (8001fac <MX_TIM4_Init+0xfc>)
 8001ee2:	4a33      	ldr	r2, [pc, #204]	; (8001fb0 <MX_TIM4_Init+0x100>)
 8001ee4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001ee6:	4b31      	ldr	r3, [pc, #196]	; (8001fac <MX_TIM4_Init+0xfc>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eec:	4b2f      	ldr	r3, [pc, #188]	; (8001fac <MX_TIM4_Init+0xfc>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 7199;
 8001ef2:	4b2e      	ldr	r3, [pc, #184]	; (8001fac <MX_TIM4_Init+0xfc>)
 8001ef4:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001ef8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001efa:	4b2c      	ldr	r3, [pc, #176]	; (8001fac <MX_TIM4_Init+0xfc>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f00:	4b2a      	ldr	r3, [pc, #168]	; (8001fac <MX_TIM4_Init+0xfc>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001f06:	4829      	ldr	r0, [pc, #164]	; (8001fac <MX_TIM4_Init+0xfc>)
 8001f08:	f003 fa1c 	bl	8005344 <HAL_TIM_Base_Init>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001f12:	f000 fb19 	bl	8002548 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f1a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001f1c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f20:	4619      	mov	r1, r3
 8001f22:	4822      	ldr	r0, [pc, #136]	; (8001fac <MX_TIM4_Init+0xfc>)
 8001f24:	f004 f94e 	bl	80061c4 <HAL_TIM_ConfigClockSource>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001f2e:	f000 fb0b 	bl	8002548 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001f32:	481e      	ldr	r0, [pc, #120]	; (8001fac <MX_TIM4_Init+0xfc>)
 8001f34:	f003 fae4 	bl	8005500 <HAL_TIM_PWM_Init>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001f3e:	f000 fb03 	bl	8002548 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f42:	2300      	movs	r3, #0
 8001f44:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f46:	2300      	movs	r3, #0
 8001f48:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001f4a:	f107 0320 	add.w	r3, r7, #32
 8001f4e:	4619      	mov	r1, r3
 8001f50:	4816      	ldr	r0, [pc, #88]	; (8001fac <MX_TIM4_Init+0xfc>)
 8001f52:	f004 fe55 	bl	8006c00 <HAL_TIMEx_MasterConfigSynchronization>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d001      	beq.n	8001f60 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001f5c:	f000 faf4 	bl	8002548 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f60:	2360      	movs	r3, #96	; 0x60
 8001f62:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f64:	2300      	movs	r3, #0
 8001f66:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f70:	1d3b      	adds	r3, r7, #4
 8001f72:	2200      	movs	r2, #0
 8001f74:	4619      	mov	r1, r3
 8001f76:	480d      	ldr	r0, [pc, #52]	; (8001fac <MX_TIM4_Init+0xfc>)
 8001f78:	f004 f866 	bl	8006048 <HAL_TIM_PWM_ConfigChannel>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001f82:	f000 fae1 	bl	8002548 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f86:	1d3b      	adds	r3, r7, #4
 8001f88:	2204      	movs	r2, #4
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	4807      	ldr	r0, [pc, #28]	; (8001fac <MX_TIM4_Init+0xfc>)
 8001f8e:	f004 f85b 	bl	8006048 <HAL_TIM_PWM_ConfigChannel>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8001f98:	f000 fad6 	bl	8002548 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001f9c:	4803      	ldr	r0, [pc, #12]	; (8001fac <MX_TIM4_Init+0xfc>)
 8001f9e:	f000 fe79 	bl	8002c94 <HAL_TIM_MspPostInit>

}
 8001fa2:	bf00      	nop
 8001fa4:	3738      	adds	r7, #56	; 0x38
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	200002e0 	.word	0x200002e0
 8001fb0:	40000800 	.word	0x40000800

08001fb4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0

	// Timer interrupt

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fba:	463b      	mov	r3, r7
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001fc2:	4b15      	ldr	r3, [pc, #84]	; (8002018 <MX_TIM6_Init+0x64>)
 8001fc4:	4a15      	ldr	r2, [pc, #84]	; (800201c <MX_TIM6_Init+0x68>)
 8001fc6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7199;
 8001fc8:	4b13      	ldr	r3, [pc, #76]	; (8002018 <MX_TIM6_Init+0x64>)
 8001fca:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001fce:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fd0:	4b11      	ldr	r3, [pc, #68]	; (8002018 <MX_TIM6_Init+0x64>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 199;
 8001fd6:	4b10      	ldr	r3, [pc, #64]	; (8002018 <MX_TIM6_Init+0x64>)
 8001fd8:	22c7      	movs	r2, #199	; 0xc7
 8001fda:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fdc:	4b0e      	ldr	r3, [pc, #56]	; (8002018 <MX_TIM6_Init+0x64>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001fe2:	480d      	ldr	r0, [pc, #52]	; (8002018 <MX_TIM6_Init+0x64>)
 8001fe4:	f003 f9ae 	bl	8005344 <HAL_TIM_Base_Init>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001fee:	f000 faab 	bl	8002548 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001ffa:	463b      	mov	r3, r7
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	4806      	ldr	r0, [pc, #24]	; (8002018 <MX_TIM6_Init+0x64>)
 8002000:	f004 fdfe 	bl	8006c00 <HAL_TIMEx_MasterConfigSynchronization>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800200a:	f000 fa9d 	bl	8002548 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800200e:	bf00      	nop
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	20000328 	.word	0x20000328
 800201c:	40001000 	.word	0x40001000

08002020 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002026:	463b      	mov	r3, r7
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]
 800202c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800202e:	4b19      	ldr	r3, [pc, #100]	; (8002094 <MX_TIM7_Init+0x74>)
 8002030:	4a19      	ldr	r2, [pc, #100]	; (8002098 <MX_TIM7_Init+0x78>)
 8002032:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 71;
 8002034:	4b17      	ldr	r3, [pc, #92]	; (8002094 <MX_TIM7_Init+0x74>)
 8002036:	2247      	movs	r2, #71	; 0x47
 8002038:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800203a:	4b16      	ldr	r3, [pc, #88]	; (8002094 <MX_TIM7_Init+0x74>)
 800203c:	2200      	movs	r2, #0
 800203e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 39;
 8002040:	4b14      	ldr	r3, [pc, #80]	; (8002094 <MX_TIM7_Init+0x74>)
 8002042:	2227      	movs	r2, #39	; 0x27
 8002044:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002046:	4b13      	ldr	r3, [pc, #76]	; (8002094 <MX_TIM7_Init+0x74>)
 8002048:	2200      	movs	r2, #0
 800204a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800204c:	4811      	ldr	r0, [pc, #68]	; (8002094 <MX_TIM7_Init+0x74>)
 800204e:	f003 f979 	bl	8005344 <HAL_TIM_Base_Init>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d001      	beq.n	800205c <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8002058:	f000 fa76 	bl	8002548 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim7, TIM_OPMODE_SINGLE) != HAL_OK)
 800205c:	2108      	movs	r1, #8
 800205e:	480d      	ldr	r0, [pc, #52]	; (8002094 <MX_TIM7_Init+0x74>)
 8002060:	f003 fccc 	bl	80059fc <HAL_TIM_OnePulse_Init>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <MX_TIM7_Init+0x4e>
  {
    Error_Handler();
 800206a:	f000 fa6d 	bl	8002548 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800206e:	2300      	movs	r3, #0
 8002070:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002072:	2300      	movs	r3, #0
 8002074:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002076:	463b      	mov	r3, r7
 8002078:	4619      	mov	r1, r3
 800207a:	4806      	ldr	r0, [pc, #24]	; (8002094 <MX_TIM7_Init+0x74>)
 800207c:	f004 fdc0 	bl	8006c00 <HAL_TIMEx_MasterConfigSynchronization>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <MX_TIM7_Init+0x6a>
  {
    Error_Handler();
 8002086:	f000 fa5f 	bl	8002548 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800208a:	bf00      	nop
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	20000370 	.word	0x20000370
 8002098:	40001400 	.word	0x40001400

0800209c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b08c      	sub	sp, #48	; 0x30
 80020a0:	af00      	add	r7, sp, #0

	// Encoder 1

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80020a2:	f107 030c 	add.w	r3, r7, #12
 80020a6:	2224      	movs	r2, #36	; 0x24
 80020a8:	2100      	movs	r1, #0
 80020aa:	4618      	mov	r0, r3
 80020ac:	f005 fd54 	bl	8007b58 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020b0:	1d3b      	adds	r3, r7, #4
 80020b2:	2200      	movs	r2, #0
 80020b4:	601a      	str	r2, [r3, #0]
 80020b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80020b8:	4b22      	ldr	r3, [pc, #136]	; (8002144 <MX_TIM8_Init+0xa8>)
 80020ba:	4a23      	ldr	r2, [pc, #140]	; (8002148 <MX_TIM8_Init+0xac>)
 80020bc:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80020be:	4b21      	ldr	r3, [pc, #132]	; (8002144 <MX_TIM8_Init+0xa8>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020c4:	4b1f      	ldr	r3, [pc, #124]	; (8002144 <MX_TIM8_Init+0xa8>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80020ca:	4b1e      	ldr	r3, [pc, #120]	; (8002144 <MX_TIM8_Init+0xa8>)
 80020cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020d0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020d2:	4b1c      	ldr	r3, [pc, #112]	; (8002144 <MX_TIM8_Init+0xa8>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80020d8:	4b1a      	ldr	r3, [pc, #104]	; (8002144 <MX_TIM8_Init+0xa8>)
 80020da:	2200      	movs	r2, #0
 80020dc:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020de:	4b19      	ldr	r3, [pc, #100]	; (8002144 <MX_TIM8_Init+0xa8>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80020e4:	2301      	movs	r3, #1
 80020e6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80020e8:	2300      	movs	r3, #0
 80020ea:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80020ec:	2301      	movs	r3, #1
 80020ee:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80020f0:	2300      	movs	r3, #0
 80020f2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80020f4:	2300      	movs	r3, #0
 80020f6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80020f8:	2300      	movs	r3, #0
 80020fa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80020fc:	2301      	movs	r3, #1
 80020fe:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002100:	2300      	movs	r3, #0
 8002102:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002104:	2300      	movs	r3, #0
 8002106:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8002108:	f107 030c 	add.w	r3, r7, #12
 800210c:	4619      	mov	r1, r3
 800210e:	480d      	ldr	r0, [pc, #52]	; (8002144 <MX_TIM8_Init+0xa8>)
 8002110:	f003 fccd 	bl	8005aae <HAL_TIM_Encoder_Init>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 800211a:	f000 fa15 	bl	8002548 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800211e:	2300      	movs	r3, #0
 8002120:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002122:	2300      	movs	r3, #0
 8002124:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002126:	1d3b      	adds	r3, r7, #4
 8002128:	4619      	mov	r1, r3
 800212a:	4806      	ldr	r0, [pc, #24]	; (8002144 <MX_TIM8_Init+0xa8>)
 800212c:	f004 fd68 	bl	8006c00 <HAL_TIMEx_MasterConfigSynchronization>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8002136:	f000 fa07 	bl	8002548 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800213a:	bf00      	nop
 800213c:	3730      	adds	r7, #48	; 0x30
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	200003b8 	.word	0x200003b8
 8002148:	40013400 	.word	0x40013400

0800214c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002150:	4b14      	ldr	r3, [pc, #80]	; (80021a4 <MX_USART1_UART_Init+0x58>)
 8002152:	4a15      	ldr	r2, [pc, #84]	; (80021a8 <MX_USART1_UART_Init+0x5c>)
 8002154:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002156:	4b13      	ldr	r3, [pc, #76]	; (80021a4 <MX_USART1_UART_Init+0x58>)
 8002158:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800215c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800215e:	4b11      	ldr	r3, [pc, #68]	; (80021a4 <MX_USART1_UART_Init+0x58>)
 8002160:	2200      	movs	r2, #0
 8002162:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002164:	4b0f      	ldr	r3, [pc, #60]	; (80021a4 <MX_USART1_UART_Init+0x58>)
 8002166:	2200      	movs	r2, #0
 8002168:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800216a:	4b0e      	ldr	r3, [pc, #56]	; (80021a4 <MX_USART1_UART_Init+0x58>)
 800216c:	2200      	movs	r2, #0
 800216e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002170:	4b0c      	ldr	r3, [pc, #48]	; (80021a4 <MX_USART1_UART_Init+0x58>)
 8002172:	220c      	movs	r2, #12
 8002174:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002176:	4b0b      	ldr	r3, [pc, #44]	; (80021a4 <MX_USART1_UART_Init+0x58>)
 8002178:	2200      	movs	r2, #0
 800217a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800217c:	4b09      	ldr	r3, [pc, #36]	; (80021a4 <MX_USART1_UART_Init+0x58>)
 800217e:	2200      	movs	r2, #0
 8002180:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002182:	4808      	ldr	r0, [pc, #32]	; (80021a4 <MX_USART1_UART_Init+0x58>)
 8002184:	f004 fdba 	bl	8006cfc <HAL_UART_Init>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d002      	beq.n	8002194 <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 800218e:	f000 f9db 	bl	8002548 <Error_Handler>
	  HAL_UART_Receive_IT(&huart1, BlueRX, BLUERXLEN);
  }

  /* USER CODE END USART1_Init 2 */

}
 8002192:	e004      	b.n	800219e <MX_USART1_UART_Init+0x52>
	  HAL_UART_Receive_IT(&huart1, BlueRX, BLUERXLEN);
 8002194:	2207      	movs	r2, #7
 8002196:	4905      	ldr	r1, [pc, #20]	; (80021ac <MX_USART1_UART_Init+0x60>)
 8002198:	4802      	ldr	r0, [pc, #8]	; (80021a4 <MX_USART1_UART_Init+0x58>)
 800219a:	f004 fe8e 	bl	8006eba <HAL_UART_Receive_IT>
}
 800219e:	bf00      	nop
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	20000400 	.word	0x20000400
 80021a8:	40013800 	.word	0x40013800
 80021ac:	20000510 	.word	0x20000510

080021b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80021b4:	4b13      	ldr	r3, [pc, #76]	; (8002204 <MX_USART2_UART_Init+0x54>)
 80021b6:	4a14      	ldr	r2, [pc, #80]	; (8002208 <MX_USART2_UART_Init+0x58>)
 80021b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80021ba:	4b12      	ldr	r3, [pc, #72]	; (8002204 <MX_USART2_UART_Init+0x54>)
 80021bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80021c2:	4b10      	ldr	r3, [pc, #64]	; (8002204 <MX_USART2_UART_Init+0x54>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80021c8:	4b0e      	ldr	r3, [pc, #56]	; (8002204 <MX_USART2_UART_Init+0x54>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80021ce:	4b0d      	ldr	r3, [pc, #52]	; (8002204 <MX_USART2_UART_Init+0x54>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80021d4:	4b0b      	ldr	r3, [pc, #44]	; (8002204 <MX_USART2_UART_Init+0x54>)
 80021d6:	220c      	movs	r2, #12
 80021d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021da:	4b0a      	ldr	r3, [pc, #40]	; (8002204 <MX_USART2_UART_Init+0x54>)
 80021dc:	2200      	movs	r2, #0
 80021de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80021e0:	4b08      	ldr	r3, [pc, #32]	; (8002204 <MX_USART2_UART_Init+0x54>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80021e6:	4807      	ldr	r0, [pc, #28]	; (8002204 <MX_USART2_UART_Init+0x54>)
 80021e8:	f004 fd88 	bl	8006cfc <HAL_UART_Init>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80021f2:	f000 f9a9 	bl	8002548 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

	HAL_UART_Receive_IT(&huart2, &OpenRX, 1);
 80021f6:	2201      	movs	r2, #1
 80021f8:	4904      	ldr	r1, [pc, #16]	; (800220c <MX_USART2_UART_Init+0x5c>)
 80021fa:	4802      	ldr	r0, [pc, #8]	; (8002204 <MX_USART2_UART_Init+0x54>)
 80021fc:	f004 fe5d 	bl	8006eba <HAL_UART_Receive_IT>

  /* USER CODE END USART2_Init 2 */

}
 8002200:	bf00      	nop
 8002202:	bd80      	pop	{r7, pc}
 8002204:	20000444 	.word	0x20000444
 8002208:	40004400 	.word	0x40004400
 800220c:	2000071c 	.word	0x2000071c

08002210 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002214:	4b11      	ldr	r3, [pc, #68]	; (800225c <MX_USART3_UART_Init+0x4c>)
 8002216:	4a12      	ldr	r2, [pc, #72]	; (8002260 <MX_USART3_UART_Init+0x50>)
 8002218:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800221a:	4b10      	ldr	r3, [pc, #64]	; (800225c <MX_USART3_UART_Init+0x4c>)
 800221c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002220:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002222:	4b0e      	ldr	r3, [pc, #56]	; (800225c <MX_USART3_UART_Init+0x4c>)
 8002224:	2200      	movs	r2, #0
 8002226:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002228:	4b0c      	ldr	r3, [pc, #48]	; (800225c <MX_USART3_UART_Init+0x4c>)
 800222a:	2200      	movs	r2, #0
 800222c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800222e:	4b0b      	ldr	r3, [pc, #44]	; (800225c <MX_USART3_UART_Init+0x4c>)
 8002230:	2200      	movs	r2, #0
 8002232:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002234:	4b09      	ldr	r3, [pc, #36]	; (800225c <MX_USART3_UART_Init+0x4c>)
 8002236:	220c      	movs	r2, #12
 8002238:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800223a:	4b08      	ldr	r3, [pc, #32]	; (800225c <MX_USART3_UART_Init+0x4c>)
 800223c:	2200      	movs	r2, #0
 800223e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002240:	4b06      	ldr	r3, [pc, #24]	; (800225c <MX_USART3_UART_Init+0x4c>)
 8002242:	2200      	movs	r2, #0
 8002244:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002246:	4805      	ldr	r0, [pc, #20]	; (800225c <MX_USART3_UART_Init+0x4c>)
 8002248:	f004 fd58 	bl	8006cfc <HAL_UART_Init>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002252:	f000 f979 	bl	8002548 <Error_Handler>

//  HAL_UART_Receive_IT(&huart3, IMURX, sizeof(IMURX));

  /* USER CODE END USART3_Init 2 */

}
 8002256:	bf00      	nop
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	20000488 	.word	0x20000488
 8002260:	40004800 	.word	0x40004800

08002264 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800226a:	4b0c      	ldr	r3, [pc, #48]	; (800229c <MX_DMA_Init+0x38>)
 800226c:	695b      	ldr	r3, [r3, #20]
 800226e:	4a0b      	ldr	r2, [pc, #44]	; (800229c <MX_DMA_Init+0x38>)
 8002270:	f043 0301 	orr.w	r3, r3, #1
 8002274:	6153      	str	r3, [r2, #20]
 8002276:	4b09      	ldr	r3, [pc, #36]	; (800229c <MX_DMA_Init+0x38>)
 8002278:	695b      	ldr	r3, [r3, #20]
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	607b      	str	r3, [r7, #4]
 8002280:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8002282:	2200      	movs	r2, #0
 8002284:	2100      	movs	r1, #0
 8002286:	200d      	movs	r0, #13
 8002288:	f001 fddd 	bl	8003e46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800228c:	200d      	movs	r0, #13
 800228e:	f001 fdf6 	bl	8003e7e <HAL_NVIC_EnableIRQ>

}
 8002292:	bf00      	nop
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	40021000 	.word	0x40021000

080022a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b08a      	sub	sp, #40	; 0x28
 80022a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a6:	f107 0318 	add.w	r3, r7, #24
 80022aa:	2200      	movs	r2, #0
 80022ac:	601a      	str	r2, [r3, #0]
 80022ae:	605a      	str	r2, [r3, #4]
 80022b0:	609a      	str	r2, [r3, #8]
 80022b2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022b4:	4b47      	ldr	r3, [pc, #284]	; (80023d4 <MX_GPIO_Init+0x134>)
 80022b6:	699b      	ldr	r3, [r3, #24]
 80022b8:	4a46      	ldr	r2, [pc, #280]	; (80023d4 <MX_GPIO_Init+0x134>)
 80022ba:	f043 0310 	orr.w	r3, r3, #16
 80022be:	6193      	str	r3, [r2, #24]
 80022c0:	4b44      	ldr	r3, [pc, #272]	; (80023d4 <MX_GPIO_Init+0x134>)
 80022c2:	699b      	ldr	r3, [r3, #24]
 80022c4:	f003 0310 	and.w	r3, r3, #16
 80022c8:	617b      	str	r3, [r7, #20]
 80022ca:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022cc:	4b41      	ldr	r3, [pc, #260]	; (80023d4 <MX_GPIO_Init+0x134>)
 80022ce:	699b      	ldr	r3, [r3, #24]
 80022d0:	4a40      	ldr	r2, [pc, #256]	; (80023d4 <MX_GPIO_Init+0x134>)
 80022d2:	f043 0304 	orr.w	r3, r3, #4
 80022d6:	6193      	str	r3, [r2, #24]
 80022d8:	4b3e      	ldr	r3, [pc, #248]	; (80023d4 <MX_GPIO_Init+0x134>)
 80022da:	699b      	ldr	r3, [r3, #24]
 80022dc:	f003 0304 	and.w	r3, r3, #4
 80022e0:	613b      	str	r3, [r7, #16]
 80022e2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80022e4:	4b3b      	ldr	r3, [pc, #236]	; (80023d4 <MX_GPIO_Init+0x134>)
 80022e6:	699b      	ldr	r3, [r3, #24]
 80022e8:	4a3a      	ldr	r2, [pc, #232]	; (80023d4 <MX_GPIO_Init+0x134>)
 80022ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022ee:	6193      	str	r3, [r2, #24]
 80022f0:	4b38      	ldr	r3, [pc, #224]	; (80023d4 <MX_GPIO_Init+0x134>)
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022f8:	60fb      	str	r3, [r7, #12]
 80022fa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022fc:	4b35      	ldr	r3, [pc, #212]	; (80023d4 <MX_GPIO_Init+0x134>)
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	4a34      	ldr	r2, [pc, #208]	; (80023d4 <MX_GPIO_Init+0x134>)
 8002302:	f043 0308 	orr.w	r3, r3, #8
 8002306:	6193      	str	r3, [r2, #24]
 8002308:	4b32      	ldr	r3, [pc, #200]	; (80023d4 <MX_GPIO_Init+0x134>)
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	f003 0308 	and.w	r3, r3, #8
 8002310:	60bb      	str	r3, [r7, #8]
 8002312:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002314:	4b2f      	ldr	r3, [pc, #188]	; (80023d4 <MX_GPIO_Init+0x134>)
 8002316:	699b      	ldr	r3, [r3, #24]
 8002318:	4a2e      	ldr	r2, [pc, #184]	; (80023d4 <MX_GPIO_Init+0x134>)
 800231a:	f043 0320 	orr.w	r3, r3, #32
 800231e:	6193      	str	r3, [r2, #24]
 8002320:	4b2c      	ldr	r3, [pc, #176]	; (80023d4 <MX_GPIO_Init+0x134>)
 8002322:	699b      	ldr	r3, [r3, #24]
 8002324:	f003 0320 	and.w	r3, r3, #32
 8002328:	607b      	str	r3, [r7, #4]
 800232a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Trig4_Pin|Trig3_Pin, GPIO_PIN_RESET);
 800232c:	2200      	movs	r2, #0
 800232e:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8002332:	4829      	ldr	r0, [pc, #164]	; (80023d8 <MX_GPIO_Init+0x138>)
 8002334:	f002 fbd4 	bl	8004ae0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Trig2_GPIO_Port, Trig2_Pin, GPIO_PIN_RESET);
 8002338:	2200      	movs	r2, #0
 800233a:	2120      	movs	r1, #32
 800233c:	4827      	ldr	r0, [pc, #156]	; (80023dc <MX_GPIO_Init+0x13c>)
 800233e:	f002 fbcf 	bl	8004ae0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Trig1_Pin|LED1_Pin|LED2_Pin|Motor2a_Pin
 8002342:	2200      	movs	r2, #0
 8002344:	f44f 41e6 	mov.w	r1, #29440	; 0x7300
 8002348:	4825      	ldr	r0, [pc, #148]	; (80023e0 <MX_GPIO_Init+0x140>)
 800234a:	f002 fbc9 	bl	8004ae0 <HAL_GPIO_WritePin>
                          |Motor2b_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Motor1a_Pin|Motor1b_Pin, GPIO_PIN_RESET);
 800234e:	2200      	movs	r2, #0
 8002350:	2103      	movs	r1, #3
 8002352:	4824      	ldr	r0, [pc, #144]	; (80023e4 <MX_GPIO_Init+0x144>)
 8002354:	f002 fbc4 	bl	8004ae0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Trig4_Pin Trig3_Pin */
  GPIO_InitStruct.Pin = Trig4_Pin|Trig3_Pin;
 8002358:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800235c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800235e:	2301      	movs	r3, #1
 8002360:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002362:	2300      	movs	r3, #0
 8002364:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002366:	2302      	movs	r3, #2
 8002368:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800236a:	f107 0318 	add.w	r3, r7, #24
 800236e:	4619      	mov	r1, r3
 8002370:	4819      	ldr	r0, [pc, #100]	; (80023d8 <MX_GPIO_Init+0x138>)
 8002372:	f002 fa21 	bl	80047b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Trig2_Pin */
  GPIO_InitStruct.Pin = Trig2_Pin;
 8002376:	2320      	movs	r3, #32
 8002378:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800237a:	2301      	movs	r3, #1
 800237c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237e:	2300      	movs	r3, #0
 8002380:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002382:	2302      	movs	r3, #2
 8002384:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Trig2_GPIO_Port, &GPIO_InitStruct);
 8002386:	f107 0318 	add.w	r3, r7, #24
 800238a:	4619      	mov	r1, r3
 800238c:	4813      	ldr	r0, [pc, #76]	; (80023dc <MX_GPIO_Init+0x13c>)
 800238e:	f002 fa13 	bl	80047b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Trig1_Pin LED1_Pin LED2_Pin Motor2a_Pin
                           Motor2b_Pin */
  GPIO_InitStruct.Pin = Trig1_Pin|LED1_Pin|LED2_Pin|Motor2a_Pin
 8002392:	f44f 43e6 	mov.w	r3, #29440	; 0x7300
 8002396:	61bb      	str	r3, [r7, #24]
                          |Motor2b_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002398:	2301      	movs	r3, #1
 800239a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239c:	2300      	movs	r3, #0
 800239e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023a0:	2302      	movs	r3, #2
 80023a2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023a4:	f107 0318 	add.w	r3, r7, #24
 80023a8:	4619      	mov	r1, r3
 80023aa:	480d      	ldr	r0, [pc, #52]	; (80023e0 <MX_GPIO_Init+0x140>)
 80023ac:	f002 fa04 	bl	80047b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Motor1a_Pin Motor1b_Pin */
  GPIO_InitStruct.Pin = Motor1a_Pin|Motor1b_Pin;
 80023b0:	2303      	movs	r3, #3
 80023b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023b4:	2301      	movs	r3, #1
 80023b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b8:	2300      	movs	r3, #0
 80023ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023bc:	2302      	movs	r3, #2
 80023be:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023c0:	f107 0318 	add.w	r3, r7, #24
 80023c4:	4619      	mov	r1, r3
 80023c6:	4807      	ldr	r0, [pc, #28]	; (80023e4 <MX_GPIO_Init+0x144>)
 80023c8:	f002 f9f6 	bl	80047b8 <HAL_GPIO_Init>

}
 80023cc:	bf00      	nop
 80023ce:	3728      	adds	r7, #40	; 0x28
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	40021000 	.word	0x40021000
 80023d8:	40011000 	.word	0x40011000
 80023dc:	40010800 	.word	0x40010800
 80023e0:	40010c00 	.word	0x40010c00
 80023e4:	40011400 	.word	0x40011400

080023e8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

// UART interrupt callback
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
	// Bluetooth
	if(huart == &huart1){
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	4a10      	ldr	r2, [pc, #64]	; (8002434 <HAL_UART_RxCpltCallback+0x4c>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d107      	bne.n	8002408 <HAL_UART_RxCpltCallback+0x20>
		Blueflag = 1;
 80023f8:	4b0f      	ldr	r3, [pc, #60]	; (8002438 <HAL_UART_RxCpltCallback+0x50>)
 80023fa:	2201      	movs	r2, #1
 80023fc:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(huart, BlueRX, BLUERXLEN);
 80023fe:	2207      	movs	r2, #7
 8002400:	490e      	ldr	r1, [pc, #56]	; (800243c <HAL_UART_RxCpltCallback+0x54>)
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f004 fd59 	bl	8006eba <HAL_UART_Receive_IT>
	}

	// OpenMV
	if(huart == &huart2){
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	4a0d      	ldr	r2, [pc, #52]	; (8002440 <HAL_UART_RxCpltCallback+0x58>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d10d      	bne.n	800242c <HAL_UART_RxCpltCallback+0x44>
		openmvflag = buffer_push(OpenRX);
 8002410:	4b0c      	ldr	r3, [pc, #48]	; (8002444 <HAL_UART_RxCpltCallback+0x5c>)
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	4618      	mov	r0, r3
 8002416:	f7fe fe69 	bl	80010ec <buffer_push>
 800241a:	4603      	mov	r3, r0
 800241c:	461a      	mov	r2, r3
 800241e:	4b0a      	ldr	r3, [pc, #40]	; (8002448 <HAL_UART_RxCpltCallback+0x60>)
 8002420:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(huart, &OpenRX, 1);
 8002422:	2201      	movs	r2, #1
 8002424:	4907      	ldr	r1, [pc, #28]	; (8002444 <HAL_UART_RxCpltCallback+0x5c>)
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f004 fd47 	bl	8006eba <HAL_UART_Receive_IT>
	}
}
 800242c:	bf00      	nop
 800242e:	3708      	adds	r7, #8
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	20000400 	.word	0x20000400
 8002438:	2000052c 	.word	0x2000052c
 800243c:	20000510 	.word	0x20000510
 8002440:	20000444 	.word	0x20000444
 8002444:	2000071c 	.word	0x2000071c
 8002448:	2000071d 	.word	0x2000071d

0800244c <HAL_TIM_IC_CaptureCallback>:

// ECHO callback
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
	if(htim == &htim2){
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	4a11      	ldr	r2, [pc, #68]	; (800249c <HAL_TIM_IC_CaptureCallback+0x50>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d11b      	bne.n	8002494 <HAL_TIM_IC_CaptureCallback+0x48>
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	7f1b      	ldrb	r3, [r3, #28]
 8002460:	2b01      	cmp	r3, #1
 8002462:	d102      	bne.n	800246a <HAL_TIM_IC_CaptureCallback+0x1e>
			Ultrasound_capturecallback(&ultra1);
 8002464:	480e      	ldr	r0, [pc, #56]	; (80024a0 <HAL_TIM_IC_CaptureCallback+0x54>)
 8002466:	f001 f8c9 	bl	80035fc <Ultrasound_capturecallback>
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	7f1b      	ldrb	r3, [r3, #28]
 800246e:	2b02      	cmp	r3, #2
 8002470:	d102      	bne.n	8002478 <HAL_TIM_IC_CaptureCallback+0x2c>
			Ultrasound_capturecallback(&ultra2);
 8002472:	480c      	ldr	r0, [pc, #48]	; (80024a4 <HAL_TIM_IC_CaptureCallback+0x58>)
 8002474:	f001 f8c2 	bl	80035fc <Ultrasound_capturecallback>
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	7f1b      	ldrb	r3, [r3, #28]
 800247c:	2b04      	cmp	r3, #4
 800247e:	d102      	bne.n	8002486 <HAL_TIM_IC_CaptureCallback+0x3a>
			Ultrasound_capturecallback(&ultra3);
 8002480:	4809      	ldr	r0, [pc, #36]	; (80024a8 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8002482:	f001 f8bb 	bl	80035fc <Ultrasound_capturecallback>
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	7f1b      	ldrb	r3, [r3, #28]
 800248a:	2b08      	cmp	r3, #8
 800248c:	d102      	bne.n	8002494 <HAL_TIM_IC_CaptureCallback+0x48>
			Ultrasound_capturecallback(&ultra4);
 800248e:	4807      	ldr	r0, [pc, #28]	; (80024ac <HAL_TIM_IC_CaptureCallback+0x60>)
 8002490:	f001 f8b4 	bl	80035fc <Ultrasound_capturecallback>
	}
}
 8002494:	bf00      	nop
 8002496:	3708      	adds	r7, #8
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	20000250 	.word	0x20000250
 80024a0:	20000574 	.word	0x20000574
 80024a4:	20000590 	.word	0x20000590
 80024a8:	200005ac 	.word	0x200005ac
 80024ac:	200005c8 	.word	0x200005c8

080024b0 <HAL_TIM_PeriodElapsedCallback>:

// TIM interrupt callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
	// Ultrasound
	if(htim == &htim2){
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	4a1c      	ldr	r2, [pc, #112]	; (800252c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d11b      	bne.n	80024f8 <HAL_TIM_PeriodElapsedCallback+0x48>
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	7f1b      	ldrb	r3, [r3, #28]
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d102      	bne.n	80024ce <HAL_TIM_PeriodElapsedCallback+0x1e>
			Ultrasound_periodcallback(&ultra1);
 80024c8:	4819      	ldr	r0, [pc, #100]	; (8002530 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80024ca:	f001 f874 	bl	80035b6 <Ultrasound_periodcallback>
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	7f1b      	ldrb	r3, [r3, #28]
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d102      	bne.n	80024dc <HAL_TIM_PeriodElapsedCallback+0x2c>
			Ultrasound_periodcallback(&ultra2);
 80024d6:	4817      	ldr	r0, [pc, #92]	; (8002534 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80024d8:	f001 f86d 	bl	80035b6 <Ultrasound_periodcallback>
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	7f1b      	ldrb	r3, [r3, #28]
 80024e0:	2b04      	cmp	r3, #4
 80024e2:	d102      	bne.n	80024ea <HAL_TIM_PeriodElapsedCallback+0x3a>
			Ultrasound_periodcallback(&ultra3);
 80024e4:	4814      	ldr	r0, [pc, #80]	; (8002538 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80024e6:	f001 f866 	bl	80035b6 <Ultrasound_periodcallback>
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	7f1b      	ldrb	r3, [r3, #28]
 80024ee:	2b08      	cmp	r3, #8
 80024f0:	d102      	bne.n	80024f8 <HAL_TIM_PeriodElapsedCallback+0x48>
			Ultrasound_periodcallback(&ultra4);
 80024f2:	4812      	ldr	r0, [pc, #72]	; (800253c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80024f4:	f001 f85f 	bl	80035b6 <Ultrasound_periodcallback>
	}

	// Timer
	if(htim == &htim6){
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	4a11      	ldr	r2, [pc, #68]	; (8002540 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d104      	bne.n	800250a <HAL_TIM_PeriodElapsedCallback+0x5a>
		TimerIT_callback();
 8002500:	f000 febc 	bl	800327c <TimerIT_callback>
		HAL_TIM_Base_Start_IT(htim);
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f002 ff6d 	bl	80053e4 <HAL_TIM_Base_Start_IT>
	}

	// Ultrasound trig
	if(htim == &htim7){
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a0d      	ldr	r2, [pc, #52]	; (8002544 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d108      	bne.n	8002524 <HAL_TIM_PeriodElapsedCallback+0x74>
		HAL_TIM_Base_Stop_IT(&htim7);
 8002512:	480c      	ldr	r0, [pc, #48]	; (8002544 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002514:	f002 ffc6 	bl	80054a4 <HAL_TIM_Base_Stop_IT>
		Ultrasound_detrig(&ultra1);
 8002518:	4805      	ldr	r0, [pc, #20]	; (8002530 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800251a:	f001 f83c 	bl	8003596 <Ultrasound_detrig>
		Ultrasound_detrig(&ultra2);
 800251e:	4805      	ldr	r0, [pc, #20]	; (8002534 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002520:	f001 f839 	bl	8003596 <Ultrasound_detrig>
	}
}
 8002524:	bf00      	nop
 8002526:	3708      	adds	r7, #8
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	20000250 	.word	0x20000250
 8002530:	20000574 	.word	0x20000574
 8002534:	20000590 	.word	0x20000590
 8002538:	200005ac 	.word	0x200005ac
 800253c:	200005c8 	.word	0x200005c8
 8002540:	20000328 	.word	0x20000328
 8002544:	20000370 	.word	0x20000370

08002548 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800254c:	b672      	cpsid	i
}
 800254e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002550:	e7fe      	b.n	8002550 <Error_Handler+0x8>

08002552 <PID_init>:
/* PID */

#include "pid.h"

void PID_init(struct PID *pid, float kp, float ki, float kd){
 8002552:	b580      	push	{r7, lr}
 8002554:	b084      	sub	sp, #16
 8002556:	af00      	add	r7, sp, #0
 8002558:	60f8      	str	r0, [r7, #12]
 800255a:	60b9      	str	r1, [r7, #8]
 800255c:	607a      	str	r2, [r7, #4]
 800255e:	603b      	str	r3, [r7, #0]
    pid->kp = kp;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	68ba      	ldr	r2, [r7, #8]
 8002564:	601a      	str	r2, [r3, #0]
    pid->ki = ki;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	605a      	str	r2, [r3, #4]
    pid->kd = kd;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	683a      	ldr	r2, [r7, #0]
 8002570:	609a      	str	r2, [r3, #8]
    PID_clear(pid);
 8002572:	68f8      	ldr	r0, [r7, #12]
 8002574:	f000 f804 	bl	8002580 <PID_clear>
}
 8002578:	bf00      	nop
 800257a:	3710      	adds	r7, #16
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <PID_clear>:

void PID_clear(struct PID *pid){
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
    pid->las_d = 0;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f04f 0200 	mov.w	r2, #0
 800258e:	60da      	str	r2, [r3, #12]
    pid->sum_d = 0;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f04f 0200 	mov.w	r2, #0
 8002596:	611a      	str	r2, [r3, #16]
    pid->qlen = 0;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	851a      	strh	r2, [r3, #40]	; 0x28
}
 800259e:	bf00      	nop
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bc80      	pop	{r7}
 80025a6:	4770      	bx	lr

080025a8 <PID_pushd>:

void PID_pushd(struct PID *pid, short d){
 80025a8:	b590      	push	{r4, r7, lr}
 80025aa:	b085      	sub	sp, #20
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	460b      	mov	r3, r1
 80025b2:	807b      	strh	r3, [r7, #2]
    #ifdef queue_integral
    if(pid->qlen < PID_QLEN){
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 80025ba:	2b09      	cmp	r3, #9
 80025bc:	dc10      	bgt.n	80025e0 <PID_pushd+0x38>
        pid->q[pid->qlen++] = d;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 80025c4:	b293      	uxth	r3, r2
 80025c6:	3301      	adds	r3, #1
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	b219      	sxth	r1, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	8519      	strh	r1, [r3, #40]	; 0x28
 80025d0:	4613      	mov	r3, r2
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	3308      	adds	r3, #8
 80025d6:	005b      	lsls	r3, r3, #1
 80025d8:	4413      	add	r3, r2
 80025da:	887a      	ldrh	r2, [r7, #2]
 80025dc:	809a      	strh	r2, [r3, #4]
 80025de:	e032      	b.n	8002646 <PID_pushd+0x9e>
    }else{
        pid->sum_d -= pid->q[0];
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	691c      	ldr	r4, [r3, #16]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7fe fc96 	bl	8000f1c <__aeabi_i2f>
 80025f0:	4603      	mov	r3, r0
 80025f2:	4619      	mov	r1, r3
 80025f4:	4620      	mov	r0, r4
 80025f6:	f7fe fbdb 	bl	8000db0 <__aeabi_fsub>
 80025fa:	4603      	mov	r3, r0
 80025fc:	461a      	mov	r2, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	611a      	str	r2, [r3, #16]
        for(short i = 1; i < PID_QLEN; i++){
 8002602:	2301      	movs	r3, #1
 8002604:	81fb      	strh	r3, [r7, #14]
 8002606:	e017      	b.n	8002638 <PID_pushd+0x90>
            pid->q[i - 1] = pid->q[i];
 8002608:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800260c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002610:	1e51      	subs	r1, r2, #1
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	3308      	adds	r3, #8
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	4413      	add	r3, r2
 800261a:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	f101 0308 	add.w	r3, r1, #8
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	4413      	add	r3, r2
 8002628:	4602      	mov	r2, r0
 800262a:	809a      	strh	r2, [r3, #4]
        for(short i = 1; i < PID_QLEN; i++){
 800262c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002630:	b29b      	uxth	r3, r3
 8002632:	3301      	adds	r3, #1
 8002634:	b29b      	uxth	r3, r3
 8002636:	81fb      	strh	r3, [r7, #14]
 8002638:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800263c:	2b09      	cmp	r3, #9
 800263e:	dde3      	ble.n	8002608 <PID_pushd+0x60>
        }
        pid->q[PID_QLEN - 1] = d;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	887a      	ldrh	r2, [r7, #2]
 8002644:	84da      	strh	r2, [r3, #38]	; 0x26
    }
    #endif
    pid->sum_d += d;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	691c      	ldr	r4, [r3, #16]
 800264a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800264e:	4618      	mov	r0, r3
 8002650:	f7fe fc64 	bl	8000f1c <__aeabi_i2f>
 8002654:	4603      	mov	r3, r0
 8002656:	4619      	mov	r1, r3
 8002658:	4620      	mov	r0, r4
 800265a:	f7fe fbab 	bl	8000db4 <__addsf3>
 800265e:	4603      	mov	r3, r0
 8002660:	461a      	mov	r2, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	611a      	str	r2, [r3, #16]
}
 8002666:	bf00      	nop
 8002668:	3714      	adds	r7, #20
 800266a:	46bd      	mov	sp, r7
 800266c:	bd90      	pop	{r4, r7, pc}

0800266e <PID_calc>:

float PID_calc(struct PID *pid, short now, short target){
 800266e:	b5b0      	push	{r4, r5, r7, lr}
 8002670:	b084      	sub	sp, #16
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
 8002676:	460b      	mov	r3, r1
 8002678:	807b      	strh	r3, [r7, #2]
 800267a:	4613      	mov	r3, r2
 800267c:	803b      	strh	r3, [r7, #0]
    short d = target - now;
 800267e:	883a      	ldrh	r2, [r7, #0]
 8002680:	887b      	ldrh	r3, [r7, #2]
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	b29b      	uxth	r3, r3
 8002686:	81fb      	strh	r3, [r7, #14]
    PID_pushd(pid, d);
 8002688:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800268c:	4619      	mov	r1, r3
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f7ff ff8a 	bl	80025a8 <PID_pushd>
    float res =
        pid->kp * d +
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681c      	ldr	r4, [r3, #0]
 8002698:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800269c:	4618      	mov	r0, r3
 800269e:	f7fe fc3d 	bl	8000f1c <__aeabi_i2f>
 80026a2:	4603      	mov	r3, r0
 80026a4:	4619      	mov	r1, r3
 80026a6:	4620      	mov	r0, r4
 80026a8:	f7fd fdc6 	bl	8000238 <__aeabi_fmul>
 80026ac:	4603      	mov	r3, r0
 80026ae:	461c      	mov	r4, r3
        pid->ki * pid->sum_d +
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685a      	ldr	r2, [r3, #4]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	691b      	ldr	r3, [r3, #16]
 80026b8:	4619      	mov	r1, r3
 80026ba:	4610      	mov	r0, r2
 80026bc:	f7fd fdbc 	bl	8000238 <__aeabi_fmul>
 80026c0:	4603      	mov	r3, r0
        pid->kp * d +
 80026c2:	4619      	mov	r1, r3
 80026c4:	4620      	mov	r0, r4
 80026c6:	f7fe fb75 	bl	8000db4 <__addsf3>
 80026ca:	4603      	mov	r3, r0
 80026cc:	461d      	mov	r5, r3
        pid->kd * (d - pid->las_d);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	689c      	ldr	r4, [r3, #8]
 80026d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7fe fc20 	bl	8000f1c <__aeabi_i2f>
 80026dc:	4602      	mov	r2, r0
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	4619      	mov	r1, r3
 80026e4:	4610      	mov	r0, r2
 80026e6:	f7fe fb63 	bl	8000db0 <__aeabi_fsub>
 80026ea:	4603      	mov	r3, r0
 80026ec:	4619      	mov	r1, r3
 80026ee:	4620      	mov	r0, r4
 80026f0:	f7fd fda2 	bl	8000238 <__aeabi_fmul>
 80026f4:	4603      	mov	r3, r0
    float res =
 80026f6:	4619      	mov	r1, r3
 80026f8:	4628      	mov	r0, r5
 80026fa:	f7fe fb5b 	bl	8000db4 <__addsf3>
 80026fe:	4603      	mov	r3, r0
 8002700:	60bb      	str	r3, [r7, #8]
    pid->las_d = d;
 8002702:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002706:	4618      	mov	r0, r3
 8002708:	f7fe fc08 	bl	8000f1c <__aeabi_i2f>
 800270c:	4602      	mov	r2, r0
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	60da      	str	r2, [r3, #12]
    return res;
 8002712:	68bb      	ldr	r3, [r7, #8]
}
 8002714:	4618      	mov	r0, r3
 8002716:	3710      	adds	r7, #16
 8002718:	46bd      	mov	sp, r7
 800271a:	bdb0      	pop	{r4, r5, r7, pc}

0800271c <Servo_init>:
#include "control.h"
#include "utils.h"

void Servo_init(
	struct Servo *s,
	TIM_HandleTypeDef *htim, uint16_t channel){
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	60b9      	str	r1, [r7, #8]
 8002726:	4613      	mov	r3, r2
 8002728:	80fb      	strh	r3, [r7, #6]
	/*
		TIM:
			prescaler = 71
			period = 19999
	*/
	s->htim = htim;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	68ba      	ldr	r2, [r7, #8]
 800272e:	601a      	str	r2, [r3, #0]
	s->channel = channel;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	88fa      	ldrh	r2, [r7, #6]
 8002734:	809a      	strh	r2, [r3, #4]
	HAL_TIM_PWM_Start(htim, channel);
 8002736:	88fb      	ldrh	r3, [r7, #6]
 8002738:	4619      	mov	r1, r3
 800273a:	68b8      	ldr	r0, [r7, #8]
 800273c:	f002 ff38 	bl	80055b0 <HAL_TIM_PWM_Start>
}
 8002740:	bf00      	nop
 8002742:	3710      	adds	r7, #16
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <Servo_set>:

void Servo_set(struct Servo *s, uint16_t level){
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	460b      	mov	r3, r1
 8002752:	807b      	strh	r3, [r7, #2]
	// level: 500-2500
	__HAL_TIM_SetCompare(s->htim, s->channel, level);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	889b      	ldrh	r3, [r3, #4]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d105      	bne.n	8002768 <Servo_set+0x20>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	887a      	ldrh	r2, [r7, #2]
 8002764:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002766:	e018      	b.n	800279a <Servo_set+0x52>
	__HAL_TIM_SetCompare(s->htim, s->channel, level);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	889b      	ldrh	r3, [r3, #4]
 800276c:	2b04      	cmp	r3, #4
 800276e:	d105      	bne.n	800277c <Servo_set+0x34>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	887b      	ldrh	r3, [r7, #2]
 8002778:	6393      	str	r3, [r2, #56]	; 0x38
}
 800277a:	e00e      	b.n	800279a <Servo_set+0x52>
	__HAL_TIM_SetCompare(s->htim, s->channel, level);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	889b      	ldrh	r3, [r3, #4]
 8002780:	2b08      	cmp	r3, #8
 8002782:	d105      	bne.n	8002790 <Servo_set+0x48>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	887b      	ldrh	r3, [r7, #2]
 800278c:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800278e:	e004      	b.n	800279a <Servo_set+0x52>
	__HAL_TIM_SetCompare(s->htim, s->channel, level);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	887b      	ldrh	r3, [r7, #2]
 8002798:	6413      	str	r3, [r2, #64]	; 0x40
}
 800279a:	bf00      	nop
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	bc80      	pop	{r7}
 80027a2:	4770      	bx	lr

080027a4 <Paw_init>:

extern struct Servo servoB, servoS;

void Paw_init(){
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
	Servo_set(&servoB, PWM_DOWN);
 80027a8:	f44f 61b0 	mov.w	r1, #1408	; 0x580
 80027ac:	4804      	ldr	r0, [pc, #16]	; (80027c0 <Paw_init+0x1c>)
 80027ae:	f7ff ffcb 	bl	8002748 <Servo_set>
	Servo_set(&servoS, PWM_OPEN);
 80027b2:	f44f 61ae 	mov.w	r1, #1392	; 0x570
 80027b6:	4803      	ldr	r0, [pc, #12]	; (80027c4 <Paw_init+0x20>)
 80027b8:	f7ff ffc6 	bl	8002748 <Servo_set>
}
 80027bc:	bf00      	nop
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	20000534 	.word	0x20000534
 80027c4:	2000053c 	.word	0x2000053c

080027c8 <Paw_pick>:
extern struct PID speedPIDL, speedPIDR, spinPID;
extern uint16_t aimENC;
extern uint8_t speedonly;
extern short aimspeedL, aimspeedR;

void Paw_pick(){
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
	force = 1;
 80027cc:	4b17      	ldr	r3, [pc, #92]	; (800282c <Paw_pick+0x64>)
 80027ce:	2201      	movs	r2, #1
 80027d0:	701a      	strb	r2, [r3, #0]
    doPID = 0;
 80027d2:	4b17      	ldr	r3, [pc, #92]	; (8002830 <Paw_pick+0x68>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	701a      	strb	r2, [r3, #0]
    PID_clear(&speedPIDL);
 80027d8:	4816      	ldr	r0, [pc, #88]	; (8002834 <Paw_pick+0x6c>)
 80027da:	f7ff fed1 	bl	8002580 <PID_clear>
    PID_clear(&speedPIDR);
 80027de:	4816      	ldr	r0, [pc, #88]	; (8002838 <Paw_pick+0x70>)
 80027e0:	f7ff fece 	bl	8002580 <PID_clear>
	speedonly = 1;
 80027e4:	4b15      	ldr	r3, [pc, #84]	; (800283c <Paw_pick+0x74>)
 80027e6:	2201      	movs	r2, #1
 80027e8:	701a      	strb	r2, [r3, #0]
	aimspeedL = aimspeedR = -4;
 80027ea:	4b15      	ldr	r3, [pc, #84]	; (8002840 <Paw_pick+0x78>)
 80027ec:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 80027f0:	801a      	strh	r2, [r3, #0]
 80027f2:	4b13      	ldr	r3, [pc, #76]	; (8002840 <Paw_pick+0x78>)
 80027f4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80027f8:	4b12      	ldr	r3, [pc, #72]	; (8002844 <Paw_pick+0x7c>)
 80027fa:	801a      	strh	r2, [r3, #0]
	Servo_set(&servoS, PWM_CLOSE);
 80027fc:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8002800:	4811      	ldr	r0, [pc, #68]	; (8002848 <Paw_pick+0x80>)
 8002802:	f7ff ffa1 	bl	8002748 <Servo_set>
	dospinPID = 1;
 8002806:	4b11      	ldr	r3, [pc, #68]	; (800284c <Paw_pick+0x84>)
 8002808:	2201      	movs	r2, #1
 800280a:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1000);
 800280c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002810:	f001 fa1e 	bl	8003c50 <HAL_Delay>
	dospinPID = 0;
 8002814:	4b0d      	ldr	r3, [pc, #52]	; (800284c <Paw_pick+0x84>)
 8002816:	2200      	movs	r2, #0
 8002818:	701a      	strb	r2, [r3, #0]
	speedonly = 0;
 800281a:	4b08      	ldr	r3, [pc, #32]	; (800283c <Paw_pick+0x74>)
 800281c:	2200      	movs	r2, #0
 800281e:	701a      	strb	r2, [r3, #0]
	force = 0;
 8002820:	4b02      	ldr	r3, [pc, #8]	; (800282c <Paw_pick+0x64>)
 8002822:	2200      	movs	r2, #0
 8002824:	701a      	strb	r2, [r3, #0]
}
 8002826:	bf00      	nop
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	20000725 	.word	0x20000725
 8002830:	20000604 	.word	0x20000604
 8002834:	20000690 	.word	0x20000690
 8002838:	200006bc 	.word	0x200006bc
 800283c:	20000724 	.word	0x20000724
 8002840:	200006ee 	.word	0x200006ee
 8002844:	200006ec 	.word	0x200006ec
 8002848:	2000053c 	.word	0x2000053c
 800284c:	2000068f 	.word	0x2000068f

08002850 <Paw_drop>:

void Paw_drop(uint16_t step){
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	4603      	mov	r3, r0
 8002858:	80fb      	strh	r3, [r7, #6]
	doultra = 0;
 800285a:	4b38      	ldr	r3, [pc, #224]	; (800293c <Paw_drop+0xec>)
 800285c:	2200      	movs	r2, #0
 800285e:	701a      	strb	r2, [r3, #0]
	force = 1;
 8002860:	4b37      	ldr	r3, [pc, #220]	; (8002940 <Paw_drop+0xf0>)
 8002862:	2201      	movs	r2, #1
 8002864:	701a      	strb	r2, [r3, #0]

	dospinPID = 0;
 8002866:	4b37      	ldr	r3, [pc, #220]	; (8002944 <Paw_drop+0xf4>)
 8002868:	2200      	movs	r2, #0
 800286a:	701a      	strb	r2, [r3, #0]
	doPID = 0;
 800286c:	4b36      	ldr	r3, [pc, #216]	; (8002948 <Paw_drop+0xf8>)
 800286e:	2200      	movs	r2, #0
 8002870:	701a      	strb	r2, [r3, #0]
	Servo_set(&servoB, PWM_UP);
 8002872:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8002876:	4835      	ldr	r0, [pc, #212]	; (800294c <Paw_drop+0xfc>)
 8002878:	f7ff ff66 	bl	8002748 <Servo_set>
	aimENC = step;
 800287c:	4a34      	ldr	r2, [pc, #208]	; (8002950 <Paw_drop+0x100>)
 800287e:	88fb      	ldrh	r3, [r7, #6]
 8002880:	8013      	strh	r3, [r2, #0]
    PID_clear(&fwdPIDL);
 8002882:	4834      	ldr	r0, [pc, #208]	; (8002954 <Paw_drop+0x104>)
 8002884:	f7ff fe7c 	bl	8002580 <PID_clear>
    PID_clear(&fwdPIDR);
 8002888:	4833      	ldr	r0, [pc, #204]	; (8002958 <Paw_drop+0x108>)
 800288a:	f7ff fe79 	bl	8002580 <PID_clear>
    PID_clear(&rotPID);
 800288e:	4833      	ldr	r0, [pc, #204]	; (800295c <Paw_drop+0x10c>)
 8002890:	f7ff fe76 	bl	8002580 <PID_clear>
    Encoder_start(wheelL.encoder);
 8002894:	4b32      	ldr	r3, [pc, #200]	; (8002960 <Paw_drop+0x110>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	4618      	mov	r0, r3
 800289a:	f7fe fffb 	bl	8001894 <Encoder_start>
    Encoder_start(wheelR.encoder);
 800289e:	4b31      	ldr	r3, [pc, #196]	; (8002964 <Paw_drop+0x114>)
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7fe fff6 	bl	8001894 <Encoder_start>
    tank = 0;
 80028a8:	4b2f      	ldr	r3, [pc, #188]	; (8002968 <Paw_drop+0x118>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	701a      	strb	r2, [r3, #0]
    doPID = 1;
 80028ae:	4b26      	ldr	r3, [pc, #152]	; (8002948 <Paw_drop+0xf8>)
 80028b0:	2201      	movs	r2, #1
 80028b2:	701a      	strb	r2, [r3, #0]

	HAL_Delay(max(2 * step, 1000));
 80028b4:	88fb      	ldrh	r3, [r7, #6]
 80028b6:	005b      	lsls	r3, r3, #1
 80028b8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80028bc:	4618      	mov	r0, r3
 80028be:	f001 f858 	bl	8003972 <max>
 80028c2:	4603      	mov	r3, r0
 80028c4:	4618      	mov	r0, r3
 80028c6:	f001 f9c3 	bl	8003c50 <HAL_Delay>

	dospinPID = 0;
 80028ca:	4b1e      	ldr	r3, [pc, #120]	; (8002944 <Paw_drop+0xf4>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	701a      	strb	r2, [r3, #0]
	doPID = 0;
 80028d0:	4b1d      	ldr	r3, [pc, #116]	; (8002948 <Paw_drop+0xf8>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	701a      	strb	r2, [r3, #0]
	Servo_set(&servoS, PWM_OPEN);
 80028d6:	f44f 61ae 	mov.w	r1, #1392	; 0x570
 80028da:	4824      	ldr	r0, [pc, #144]	; (800296c <Paw_drop+0x11c>)
 80028dc:	f7ff ff34 	bl	8002748 <Servo_set>
    PID_clear(&speedPIDL);
 80028e0:	4823      	ldr	r0, [pc, #140]	; (8002970 <Paw_drop+0x120>)
 80028e2:	f7ff fe4d 	bl	8002580 <PID_clear>
    PID_clear(&speedPIDR);
 80028e6:	4823      	ldr	r0, [pc, #140]	; (8002974 <Paw_drop+0x124>)
 80028e8:	f7ff fe4a 	bl	8002580 <PID_clear>
	speedonly = 1;
 80028ec:	4b22      	ldr	r3, [pc, #136]	; (8002978 <Paw_drop+0x128>)
 80028ee:	2201      	movs	r2, #1
 80028f0:	701a      	strb	r2, [r3, #0]
	aimspeedL = aimspeedR = -10;
 80028f2:	4b22      	ldr	r3, [pc, #136]	; (800297c <Paw_drop+0x12c>)
 80028f4:	f64f 72f6 	movw	r2, #65526	; 0xfff6
 80028f8:	801a      	strh	r2, [r3, #0]
 80028fa:	4b20      	ldr	r3, [pc, #128]	; (800297c <Paw_drop+0x12c>)
 80028fc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002900:	4b1f      	ldr	r3, [pc, #124]	; (8002980 <Paw_drop+0x130>)
 8002902:	801a      	strh	r2, [r3, #0]
	dospinPID = 1;
 8002904:	4b0f      	ldr	r3, [pc, #60]	; (8002944 <Paw_drop+0xf4>)
 8002906:	2201      	movs	r2, #1
 8002908:	701a      	strb	r2, [r3, #0]

	HAL_Delay(1000);
 800290a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800290e:	f001 f99f 	bl	8003c50 <HAL_Delay>

	Servo_set(&servoB, PWM_DOWN);
 8002912:	f44f 61b0 	mov.w	r1, #1408	; 0x580
 8002916:	480d      	ldr	r0, [pc, #52]	; (800294c <Paw_drop+0xfc>)
 8002918:	f7ff ff16 	bl	8002748 <Servo_set>
	dospinPID = 0;
 800291c:	4b09      	ldr	r3, [pc, #36]	; (8002944 <Paw_drop+0xf4>)
 800291e:	2200      	movs	r2, #0
 8002920:	701a      	strb	r2, [r3, #0]
	speedonly = 0;
 8002922:	4b15      	ldr	r3, [pc, #84]	; (8002978 <Paw_drop+0x128>)
 8002924:	2200      	movs	r2, #0
 8002926:	701a      	strb	r2, [r3, #0]
	force = 0;
 8002928:	4b05      	ldr	r3, [pc, #20]	; (8002940 <Paw_drop+0xf0>)
 800292a:	2200      	movs	r2, #0
 800292c:	701a      	strb	r2, [r3, #0]
	doultra = 1;
 800292e:	4b03      	ldr	r3, [pc, #12]	; (800293c <Paw_drop+0xec>)
 8002930:	2201      	movs	r2, #1
 8002932:	701a      	strb	r2, [r3, #0]
}
 8002934:	bf00      	nop
 8002936:	3708      	adds	r7, #8
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	200005e8 	.word	0x200005e8
 8002940:	20000725 	.word	0x20000725
 8002944:	2000068f 	.word	0x2000068f
 8002948:	20000604 	.word	0x20000604
 800294c:	20000534 	.word	0x20000534
 8002950:	20000606 	.word	0x20000606
 8002954:	20000608 	.word	0x20000608
 8002958:	20000634 	.word	0x20000634
 800295c:	20000660 	.word	0x20000660
 8002960:	20000544 	.word	0x20000544
 8002964:	2000055c 	.word	0x2000055c
 8002968:	20000723 	.word	0x20000723
 800296c:	2000053c 	.word	0x2000053c
 8002970:	20000690 	.word	0x20000690
 8002974:	200006bc 	.word	0x200006bc
 8002978:	20000724 	.word	0x20000724
 800297c:	200006ee 	.word	0x200006ee
 8002980:	200006ec 	.word	0x200006ec

08002984 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002984:	b480      	push	{r7}
 8002986:	b085      	sub	sp, #20
 8002988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800298a:	4b15      	ldr	r3, [pc, #84]	; (80029e0 <HAL_MspInit+0x5c>)
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	4a14      	ldr	r2, [pc, #80]	; (80029e0 <HAL_MspInit+0x5c>)
 8002990:	f043 0301 	orr.w	r3, r3, #1
 8002994:	6193      	str	r3, [r2, #24]
 8002996:	4b12      	ldr	r3, [pc, #72]	; (80029e0 <HAL_MspInit+0x5c>)
 8002998:	699b      	ldr	r3, [r3, #24]
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	60bb      	str	r3, [r7, #8]
 80029a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029a2:	4b0f      	ldr	r3, [pc, #60]	; (80029e0 <HAL_MspInit+0x5c>)
 80029a4:	69db      	ldr	r3, [r3, #28]
 80029a6:	4a0e      	ldr	r2, [pc, #56]	; (80029e0 <HAL_MspInit+0x5c>)
 80029a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029ac:	61d3      	str	r3, [r2, #28]
 80029ae:	4b0c      	ldr	r3, [pc, #48]	; (80029e0 <HAL_MspInit+0x5c>)
 80029b0:	69db      	ldr	r3, [r3, #28]
 80029b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029b6:	607b      	str	r3, [r7, #4]
 80029b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80029ba:	4b0a      	ldr	r3, [pc, #40]	; (80029e4 <HAL_MspInit+0x60>)
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	60fb      	str	r3, [r7, #12]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80029c6:	60fb      	str	r3, [r7, #12]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80029ce:	60fb      	str	r3, [r7, #12]
 80029d0:	4a04      	ldr	r2, [pc, #16]	; (80029e4 <HAL_MspInit+0x60>)
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029d6:	bf00      	nop
 80029d8:	3714      	adds	r7, #20
 80029da:	46bd      	mov	sp, r7
 80029dc:	bc80      	pop	{r7}
 80029de:	4770      	bx	lr
 80029e0:	40021000 	.word	0x40021000
 80029e4:	40010000 	.word	0x40010000

080029e8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b08c      	sub	sp, #48	; 0x30
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029f0:	f107 031c 	add.w	r3, r7, #28
 80029f4:	2200      	movs	r2, #0
 80029f6:	601a      	str	r2, [r3, #0]
 80029f8:	605a      	str	r2, [r3, #4]
 80029fa:	609a      	str	r2, [r3, #8]
 80029fc:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM1)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a34      	ldr	r2, [pc, #208]	; (8002ad4 <HAL_TIM_Encoder_MspInit+0xec>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d137      	bne.n	8002a78 <HAL_TIM_Encoder_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a08:	4b33      	ldr	r3, [pc, #204]	; (8002ad8 <HAL_TIM_Encoder_MspInit+0xf0>)
 8002a0a:	699b      	ldr	r3, [r3, #24]
 8002a0c:	4a32      	ldr	r2, [pc, #200]	; (8002ad8 <HAL_TIM_Encoder_MspInit+0xf0>)
 8002a0e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a12:	6193      	str	r3, [r2, #24]
 8002a14:	4b30      	ldr	r3, [pc, #192]	; (8002ad8 <HAL_TIM_Encoder_MspInit+0xf0>)
 8002a16:	699b      	ldr	r3, [r3, #24]
 8002a18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a1c:	61bb      	str	r3, [r7, #24]
 8002a1e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a20:	4b2d      	ldr	r3, [pc, #180]	; (8002ad8 <HAL_TIM_Encoder_MspInit+0xf0>)
 8002a22:	699b      	ldr	r3, [r3, #24]
 8002a24:	4a2c      	ldr	r2, [pc, #176]	; (8002ad8 <HAL_TIM_Encoder_MspInit+0xf0>)
 8002a26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a2a:	6193      	str	r3, [r2, #24]
 8002a2c:	4b2a      	ldr	r3, [pc, #168]	; (8002ad8 <HAL_TIM_Encoder_MspInit+0xf0>)
 8002a2e:	699b      	ldr	r3, [r3, #24]
 8002a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a34:	617b      	str	r3, [r7, #20]
 8002a36:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Encoder2a_Pin|Encoder2b_Pin;
 8002a38:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002a3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a42:	2300      	movs	r3, #0
 8002a44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a46:	f107 031c 	add.w	r3, r7, #28
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	4823      	ldr	r0, [pc, #140]	; (8002adc <HAL_TIM_Encoder_MspInit+0xf4>)
 8002a4e:	f001 feb3 	bl	80047b8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM1_ENABLE();
 8002a52:	4b23      	ldr	r3, [pc, #140]	; (8002ae0 <HAL_TIM_Encoder_MspInit+0xf8>)
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a5a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a62:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002a66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a6a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a70:	4a1b      	ldr	r2, [pc, #108]	; (8002ae0 <HAL_TIM_Encoder_MspInit+0xf8>)
 8002a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a74:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002a76:	e028      	b.n	8002aca <HAL_TIM_Encoder_MspInit+0xe2>
  else if(htim_encoder->Instance==TIM8)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a19      	ldr	r2, [pc, #100]	; (8002ae4 <HAL_TIM_Encoder_MspInit+0xfc>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d123      	bne.n	8002aca <HAL_TIM_Encoder_MspInit+0xe2>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002a82:	4b15      	ldr	r3, [pc, #84]	; (8002ad8 <HAL_TIM_Encoder_MspInit+0xf0>)
 8002a84:	699b      	ldr	r3, [r3, #24]
 8002a86:	4a14      	ldr	r2, [pc, #80]	; (8002ad8 <HAL_TIM_Encoder_MspInit+0xf0>)
 8002a88:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002a8c:	6193      	str	r3, [r2, #24]
 8002a8e:	4b12      	ldr	r3, [pc, #72]	; (8002ad8 <HAL_TIM_Encoder_MspInit+0xf0>)
 8002a90:	699b      	ldr	r3, [r3, #24]
 8002a92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a96:	613b      	str	r3, [r7, #16]
 8002a98:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a9a:	4b0f      	ldr	r3, [pc, #60]	; (8002ad8 <HAL_TIM_Encoder_MspInit+0xf0>)
 8002a9c:	699b      	ldr	r3, [r3, #24]
 8002a9e:	4a0e      	ldr	r2, [pc, #56]	; (8002ad8 <HAL_TIM_Encoder_MspInit+0xf0>)
 8002aa0:	f043 0310 	orr.w	r3, r3, #16
 8002aa4:	6193      	str	r3, [r2, #24]
 8002aa6:	4b0c      	ldr	r3, [pc, #48]	; (8002ad8 <HAL_TIM_Encoder_MspInit+0xf0>)
 8002aa8:	699b      	ldr	r3, [r3, #24]
 8002aaa:	f003 0310 	and.w	r3, r3, #16
 8002aae:	60fb      	str	r3, [r7, #12]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Encoder1a_Pin|Encoder1b_Pin;
 8002ab2:	23c0      	movs	r3, #192	; 0xc0
 8002ab4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aba:	2300      	movs	r3, #0
 8002abc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002abe:	f107 031c 	add.w	r3, r7, #28
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	4808      	ldr	r0, [pc, #32]	; (8002ae8 <HAL_TIM_Encoder_MspInit+0x100>)
 8002ac6:	f001 fe77 	bl	80047b8 <HAL_GPIO_Init>
}
 8002aca:	bf00      	nop
 8002acc:	3730      	adds	r7, #48	; 0x30
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	40012c00 	.word	0x40012c00
 8002ad8:	40021000 	.word	0x40021000
 8002adc:	40011800 	.word	0x40011800
 8002ae0:	40010000 	.word	0x40010000
 8002ae4:	40013400 	.word	0x40013400
 8002ae8:	40011000 	.word	0x40011000

08002aec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b08e      	sub	sp, #56	; 0x38
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002af4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002af8:	2200      	movs	r2, #0
 8002afa:	601a      	str	r2, [r3, #0]
 8002afc:	605a      	str	r2, [r3, #4]
 8002afe:	609a      	str	r2, [r3, #8]
 8002b00:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM2)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b0a:	d157      	bne.n	8002bbc <HAL_TIM_Base_MspInit+0xd0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b0c:	4b59      	ldr	r3, [pc, #356]	; (8002c74 <HAL_TIM_Base_MspInit+0x188>)
 8002b0e:	69db      	ldr	r3, [r3, #28]
 8002b10:	4a58      	ldr	r2, [pc, #352]	; (8002c74 <HAL_TIM_Base_MspInit+0x188>)
 8002b12:	f043 0301 	orr.w	r3, r3, #1
 8002b16:	61d3      	str	r3, [r2, #28]
 8002b18:	4b56      	ldr	r3, [pc, #344]	; (8002c74 <HAL_TIM_Base_MspInit+0x188>)
 8002b1a:	69db      	ldr	r3, [r3, #28]
 8002b1c:	f003 0301 	and.w	r3, r3, #1
 8002b20:	623b      	str	r3, [r7, #32]
 8002b22:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b24:	4b53      	ldr	r3, [pc, #332]	; (8002c74 <HAL_TIM_Base_MspInit+0x188>)
 8002b26:	699b      	ldr	r3, [r3, #24]
 8002b28:	4a52      	ldr	r2, [pc, #328]	; (8002c74 <HAL_TIM_Base_MspInit+0x188>)
 8002b2a:	f043 0304 	orr.w	r3, r3, #4
 8002b2e:	6193      	str	r3, [r2, #24]
 8002b30:	4b50      	ldr	r3, [pc, #320]	; (8002c74 <HAL_TIM_Base_MspInit+0x188>)
 8002b32:	699b      	ldr	r3, [r3, #24]
 8002b34:	f003 0304 	and.w	r3, r3, #4
 8002b38:	61fb      	str	r3, [r7, #28]
 8002b3a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b3c:	4b4d      	ldr	r3, [pc, #308]	; (8002c74 <HAL_TIM_Base_MspInit+0x188>)
 8002b3e:	699b      	ldr	r3, [r3, #24]
 8002b40:	4a4c      	ldr	r2, [pc, #304]	; (8002c74 <HAL_TIM_Base_MspInit+0x188>)
 8002b42:	f043 0308 	orr.w	r3, r3, #8
 8002b46:	6193      	str	r3, [r2, #24]
 8002b48:	4b4a      	ldr	r3, [pc, #296]	; (8002c74 <HAL_TIM_Base_MspInit+0x188>)
 8002b4a:	699b      	ldr	r3, [r3, #24]
 8002b4c:	f003 0308 	and.w	r3, r3, #8
 8002b50:	61bb      	str	r3, [r7, #24]
 8002b52:	69bb      	ldr	r3, [r7, #24]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = Echo1_Pin|Echo2_Pin;
 8002b54:	2303      	movs	r3, #3
 8002b56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b64:	4619      	mov	r1, r3
 8002b66:	4844      	ldr	r0, [pc, #272]	; (8002c78 <HAL_TIM_Base_MspInit+0x18c>)
 8002b68:	f001 fe26 	bl	80047b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Echo3_Pin|Echo4_Pin;
 8002b6c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002b70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b72:	2300      	movs	r3, #0
 8002b74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b76:	2300      	movs	r3, #0
 8002b78:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b7e:	4619      	mov	r1, r3
 8002b80:	483e      	ldr	r0, [pc, #248]	; (8002c7c <HAL_TIM_Base_MspInit+0x190>)
 8002b82:	f001 fe19 	bl	80047b8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 8002b86:	4b3e      	ldr	r3, [pc, #248]	; (8002c80 <HAL_TIM_Base_MspInit+0x194>)
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	637b      	str	r3, [r7, #52]	; 0x34
 8002b8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b92:	637b      	str	r3, [r7, #52]	; 0x34
 8002b94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b96:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002b9a:	637b      	str	r3, [r7, #52]	; 0x34
 8002b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ba2:	637b      	str	r3, [r7, #52]	; 0x34
 8002ba4:	4a36      	ldr	r2, [pc, #216]	; (8002c80 <HAL_TIM_Base_MspInit+0x194>)
 8002ba6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ba8:	6053      	str	r3, [r2, #4]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
 8002baa:	2200      	movs	r2, #0
 8002bac:	2106      	movs	r1, #6
 8002bae:	201c      	movs	r0, #28
 8002bb0:	f001 f949 	bl	8003e46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002bb4:	201c      	movs	r0, #28
 8002bb6:	f001 f962 	bl	8003e7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002bba:	e056      	b.n	8002c6a <HAL_TIM_Base_MspInit+0x17e>
  else if(htim_base->Instance==TIM3)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a30      	ldr	r2, [pc, #192]	; (8002c84 <HAL_TIM_Base_MspInit+0x198>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d10c      	bne.n	8002be0 <HAL_TIM_Base_MspInit+0xf4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002bc6:	4b2b      	ldr	r3, [pc, #172]	; (8002c74 <HAL_TIM_Base_MspInit+0x188>)
 8002bc8:	69db      	ldr	r3, [r3, #28]
 8002bca:	4a2a      	ldr	r2, [pc, #168]	; (8002c74 <HAL_TIM_Base_MspInit+0x188>)
 8002bcc:	f043 0302 	orr.w	r3, r3, #2
 8002bd0:	61d3      	str	r3, [r2, #28]
 8002bd2:	4b28      	ldr	r3, [pc, #160]	; (8002c74 <HAL_TIM_Base_MspInit+0x188>)
 8002bd4:	69db      	ldr	r3, [r3, #28]
 8002bd6:	f003 0302 	and.w	r3, r3, #2
 8002bda:	617b      	str	r3, [r7, #20]
 8002bdc:	697b      	ldr	r3, [r7, #20]
}
 8002bde:	e044      	b.n	8002c6a <HAL_TIM_Base_MspInit+0x17e>
  else if(htim_base->Instance==TIM4)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a28      	ldr	r2, [pc, #160]	; (8002c88 <HAL_TIM_Base_MspInit+0x19c>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d10c      	bne.n	8002c04 <HAL_TIM_Base_MspInit+0x118>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002bea:	4b22      	ldr	r3, [pc, #136]	; (8002c74 <HAL_TIM_Base_MspInit+0x188>)
 8002bec:	69db      	ldr	r3, [r3, #28]
 8002bee:	4a21      	ldr	r2, [pc, #132]	; (8002c74 <HAL_TIM_Base_MspInit+0x188>)
 8002bf0:	f043 0304 	orr.w	r3, r3, #4
 8002bf4:	61d3      	str	r3, [r2, #28]
 8002bf6:	4b1f      	ldr	r3, [pc, #124]	; (8002c74 <HAL_TIM_Base_MspInit+0x188>)
 8002bf8:	69db      	ldr	r3, [r3, #28]
 8002bfa:	f003 0304 	and.w	r3, r3, #4
 8002bfe:	613b      	str	r3, [r7, #16]
 8002c00:	693b      	ldr	r3, [r7, #16]
}
 8002c02:	e032      	b.n	8002c6a <HAL_TIM_Base_MspInit+0x17e>
  else if(htim_base->Instance==TIM6)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a20      	ldr	r2, [pc, #128]	; (8002c8c <HAL_TIM_Base_MspInit+0x1a0>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d114      	bne.n	8002c38 <HAL_TIM_Base_MspInit+0x14c>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002c0e:	4b19      	ldr	r3, [pc, #100]	; (8002c74 <HAL_TIM_Base_MspInit+0x188>)
 8002c10:	69db      	ldr	r3, [r3, #28]
 8002c12:	4a18      	ldr	r2, [pc, #96]	; (8002c74 <HAL_TIM_Base_MspInit+0x188>)
 8002c14:	f043 0310 	orr.w	r3, r3, #16
 8002c18:	61d3      	str	r3, [r2, #28]
 8002c1a:	4b16      	ldr	r3, [pc, #88]	; (8002c74 <HAL_TIM_Base_MspInit+0x188>)
 8002c1c:	69db      	ldr	r3, [r3, #28]
 8002c1e:	f003 0310 	and.w	r3, r3, #16
 8002c22:	60fb      	str	r3, [r7, #12]
 8002c24:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_IRQn, 2, 0);
 8002c26:	2200      	movs	r2, #0
 8002c28:	2102      	movs	r1, #2
 8002c2a:	2036      	movs	r0, #54	; 0x36
 8002c2c:	f001 f90b 	bl	8003e46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8002c30:	2036      	movs	r0, #54	; 0x36
 8002c32:	f001 f924 	bl	8003e7e <HAL_NVIC_EnableIRQ>
}
 8002c36:	e018      	b.n	8002c6a <HAL_TIM_Base_MspInit+0x17e>
  else if(htim_base->Instance==TIM7)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a14      	ldr	r2, [pc, #80]	; (8002c90 <HAL_TIM_Base_MspInit+0x1a4>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d113      	bne.n	8002c6a <HAL_TIM_Base_MspInit+0x17e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002c42:	4b0c      	ldr	r3, [pc, #48]	; (8002c74 <HAL_TIM_Base_MspInit+0x188>)
 8002c44:	69db      	ldr	r3, [r3, #28]
 8002c46:	4a0b      	ldr	r2, [pc, #44]	; (8002c74 <HAL_TIM_Base_MspInit+0x188>)
 8002c48:	f043 0320 	orr.w	r3, r3, #32
 8002c4c:	61d3      	str	r3, [r2, #28]
 8002c4e:	4b09      	ldr	r3, [pc, #36]	; (8002c74 <HAL_TIM_Base_MspInit+0x188>)
 8002c50:	69db      	ldr	r3, [r3, #28]
 8002c52:	f003 0320 	and.w	r3, r3, #32
 8002c56:	60bb      	str	r3, [r7, #8]
 8002c58:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 4, 0);
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	2104      	movs	r1, #4
 8002c5e:	2037      	movs	r0, #55	; 0x37
 8002c60:	f001 f8f1 	bl	8003e46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002c64:	2037      	movs	r0, #55	; 0x37
 8002c66:	f001 f90a 	bl	8003e7e <HAL_NVIC_EnableIRQ>
}
 8002c6a:	bf00      	nop
 8002c6c:	3738      	adds	r7, #56	; 0x38
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	40021000 	.word	0x40021000
 8002c78:	40010800 	.word	0x40010800
 8002c7c:	40010c00 	.word	0x40010c00
 8002c80:	40010000 	.word	0x40010000
 8002c84:	40000400 	.word	0x40000400
 8002c88:	40000800 	.word	0x40000800
 8002c8c:	40001000 	.word	0x40001000
 8002c90:	40001400 	.word	0x40001400

08002c94 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b08a      	sub	sp, #40	; 0x28
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c9c:	f107 0314 	add.w	r3, r7, #20
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	601a      	str	r2, [r3, #0]
 8002ca4:	605a      	str	r2, [r3, #4]
 8002ca6:	609a      	str	r2, [r3, #8]
 8002ca8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a26      	ldr	r2, [pc, #152]	; (8002d48 <HAL_TIM_MspPostInit+0xb4>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d118      	bne.n	8002ce6 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cb4:	4b25      	ldr	r3, [pc, #148]	; (8002d4c <HAL_TIM_MspPostInit+0xb8>)
 8002cb6:	699b      	ldr	r3, [r3, #24]
 8002cb8:	4a24      	ldr	r2, [pc, #144]	; (8002d4c <HAL_TIM_MspPostInit+0xb8>)
 8002cba:	f043 0304 	orr.w	r3, r3, #4
 8002cbe:	6193      	str	r3, [r2, #24]
 8002cc0:	4b22      	ldr	r3, [pc, #136]	; (8002d4c <HAL_TIM_MspPostInit+0xb8>)
 8002cc2:	699b      	ldr	r3, [r3, #24]
 8002cc4:	f003 0304 	and.w	r3, r3, #4
 8002cc8:	613b      	str	r3, [r7, #16]
 8002cca:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Servo1_Pin|Servo2_Pin;
 8002ccc:	23c0      	movs	r3, #192	; 0xc0
 8002cce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cd0:	2302      	movs	r3, #2
 8002cd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cd4:	2302      	movs	r3, #2
 8002cd6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cd8:	f107 0314 	add.w	r3, r7, #20
 8002cdc:	4619      	mov	r1, r3
 8002cde:	481c      	ldr	r0, [pc, #112]	; (8002d50 <HAL_TIM_MspPostInit+0xbc>)
 8002ce0:	f001 fd6a 	bl	80047b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002ce4:	e02b      	b.n	8002d3e <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM4)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a1a      	ldr	r2, [pc, #104]	; (8002d54 <HAL_TIM_MspPostInit+0xc0>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d126      	bne.n	8002d3e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002cf0:	4b16      	ldr	r3, [pc, #88]	; (8002d4c <HAL_TIM_MspPostInit+0xb8>)
 8002cf2:	699b      	ldr	r3, [r3, #24]
 8002cf4:	4a15      	ldr	r2, [pc, #84]	; (8002d4c <HAL_TIM_MspPostInit+0xb8>)
 8002cf6:	f043 0320 	orr.w	r3, r3, #32
 8002cfa:	6193      	str	r3, [r2, #24]
 8002cfc:	4b13      	ldr	r3, [pc, #76]	; (8002d4c <HAL_TIM_MspPostInit+0xb8>)
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	f003 0320 	and.w	r3, r3, #32
 8002d04:	60fb      	str	r3, [r7, #12]
 8002d06:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Motor1_Pin|Motor2_Pin;
 8002d08:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002d0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d0e:	2302      	movs	r3, #2
 8002d10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d12:	2302      	movs	r3, #2
 8002d14:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d16:	f107 0314 	add.w	r3, r7, #20
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	480e      	ldr	r0, [pc, #56]	; (8002d58 <HAL_TIM_MspPostInit+0xc4>)
 8002d1e:	f001 fd4b 	bl	80047b8 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM4_ENABLE();
 8002d22:	4b0e      	ldr	r3, [pc, #56]	; (8002d5c <HAL_TIM_MspPostInit+0xc8>)
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	627b      	str	r3, [r7, #36]	; 0x24
 8002d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002d2e:	627b      	str	r3, [r7, #36]	; 0x24
 8002d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d32:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d36:	627b      	str	r3, [r7, #36]	; 0x24
 8002d38:	4a08      	ldr	r2, [pc, #32]	; (8002d5c <HAL_TIM_MspPostInit+0xc8>)
 8002d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3c:	6053      	str	r3, [r2, #4]
}
 8002d3e:	bf00      	nop
 8002d40:	3728      	adds	r7, #40	; 0x28
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	40000400 	.word	0x40000400
 8002d4c:	40021000 	.word	0x40021000
 8002d50:	40010800 	.word	0x40010800
 8002d54:	40000800 	.word	0x40000800
 8002d58:	40011400 	.word	0x40011400
 8002d5c:	40010000 	.word	0x40010000

08002d60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b08e      	sub	sp, #56	; 0x38
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	601a      	str	r2, [r3, #0]
 8002d70:	605a      	str	r2, [r3, #4]
 8002d72:	609a      	str	r2, [r3, #8]
 8002d74:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a7b      	ldr	r2, [pc, #492]	; (8002f68 <HAL_UART_MspInit+0x208>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d13a      	bne.n	8002df6 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d80:	4b7a      	ldr	r3, [pc, #488]	; (8002f6c <HAL_UART_MspInit+0x20c>)
 8002d82:	699b      	ldr	r3, [r3, #24]
 8002d84:	4a79      	ldr	r2, [pc, #484]	; (8002f6c <HAL_UART_MspInit+0x20c>)
 8002d86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d8a:	6193      	str	r3, [r2, #24]
 8002d8c:	4b77      	ldr	r3, [pc, #476]	; (8002f6c <HAL_UART_MspInit+0x20c>)
 8002d8e:	699b      	ldr	r3, [r3, #24]
 8002d90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d94:	623b      	str	r3, [r7, #32]
 8002d96:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d98:	4b74      	ldr	r3, [pc, #464]	; (8002f6c <HAL_UART_MspInit+0x20c>)
 8002d9a:	699b      	ldr	r3, [r3, #24]
 8002d9c:	4a73      	ldr	r2, [pc, #460]	; (8002f6c <HAL_UART_MspInit+0x20c>)
 8002d9e:	f043 0304 	orr.w	r3, r3, #4
 8002da2:	6193      	str	r3, [r2, #24]
 8002da4:	4b71      	ldr	r3, [pc, #452]	; (8002f6c <HAL_UART_MspInit+0x20c>)
 8002da6:	699b      	ldr	r3, [r3, #24]
 8002da8:	f003 0304 	and.w	r3, r3, #4
 8002dac:	61fb      	str	r3, [r7, #28]
 8002dae:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = BlueTX_Pin;
 8002db0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002db4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002db6:	2302      	movs	r3, #2
 8002db8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(BlueTX_GPIO_Port, &GPIO_InitStruct);
 8002dbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	486a      	ldr	r0, [pc, #424]	; (8002f70 <HAL_UART_MspInit+0x210>)
 8002dc6:	f001 fcf7 	bl	80047b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BlueRX_Pin;
 8002dca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002dce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(BlueRX_GPIO_Port, &GPIO_InitStruct);
 8002dd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ddc:	4619      	mov	r1, r3
 8002dde:	4864      	ldr	r0, [pc, #400]	; (8002f70 <HAL_UART_MspInit+0x210>)
 8002de0:	f001 fcea 	bl	80047b8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002de4:	2200      	movs	r2, #0
 8002de6:	2105      	movs	r1, #5
 8002de8:	2025      	movs	r0, #37	; 0x25
 8002dea:	f001 f82c 	bl	8003e46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002dee:	2025      	movs	r0, #37	; 0x25
 8002df0:	f001 f845 	bl	8003e7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002df4:	e0b4      	b.n	8002f60 <HAL_UART_MspInit+0x200>
  else if(huart->Instance==USART2)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a5e      	ldr	r2, [pc, #376]	; (8002f74 <HAL_UART_MspInit+0x214>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d138      	bne.n	8002e72 <HAL_UART_MspInit+0x112>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e00:	4b5a      	ldr	r3, [pc, #360]	; (8002f6c <HAL_UART_MspInit+0x20c>)
 8002e02:	69db      	ldr	r3, [r3, #28]
 8002e04:	4a59      	ldr	r2, [pc, #356]	; (8002f6c <HAL_UART_MspInit+0x20c>)
 8002e06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e0a:	61d3      	str	r3, [r2, #28]
 8002e0c:	4b57      	ldr	r3, [pc, #348]	; (8002f6c <HAL_UART_MspInit+0x20c>)
 8002e0e:	69db      	ldr	r3, [r3, #28]
 8002e10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e14:	61bb      	str	r3, [r7, #24]
 8002e16:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e18:	4b54      	ldr	r3, [pc, #336]	; (8002f6c <HAL_UART_MspInit+0x20c>)
 8002e1a:	699b      	ldr	r3, [r3, #24]
 8002e1c:	4a53      	ldr	r2, [pc, #332]	; (8002f6c <HAL_UART_MspInit+0x20c>)
 8002e1e:	f043 0304 	orr.w	r3, r3, #4
 8002e22:	6193      	str	r3, [r2, #24]
 8002e24:	4b51      	ldr	r3, [pc, #324]	; (8002f6c <HAL_UART_MspInit+0x20c>)
 8002e26:	699b      	ldr	r3, [r3, #24]
 8002e28:	f003 0304 	and.w	r3, r3, #4
 8002e2c:	617b      	str	r3, [r7, #20]
 8002e2e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = OpenMVTX_Pin;
 8002e30:	2304      	movs	r3, #4
 8002e32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e34:	2302      	movs	r3, #2
 8002e36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(OpenMVTX_GPIO_Port, &GPIO_InitStruct);
 8002e3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e40:	4619      	mov	r1, r3
 8002e42:	484b      	ldr	r0, [pc, #300]	; (8002f70 <HAL_UART_MspInit+0x210>)
 8002e44:	f001 fcb8 	bl	80047b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = OpenMVRX_Pin;
 8002e48:	2308      	movs	r3, #8
 8002e4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e50:	2300      	movs	r3, #0
 8002e52:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(OpenMVRX_GPIO_Port, &GPIO_InitStruct);
 8002e54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e58:	4619      	mov	r1, r3
 8002e5a:	4845      	ldr	r0, [pc, #276]	; (8002f70 <HAL_UART_MspInit+0x210>)
 8002e5c:	f001 fcac 	bl	80047b8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002e60:	2200      	movs	r2, #0
 8002e62:	2105      	movs	r1, #5
 8002e64:	2026      	movs	r0, #38	; 0x26
 8002e66:	f000 ffee 	bl	8003e46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002e6a:	2026      	movs	r0, #38	; 0x26
 8002e6c:	f001 f807 	bl	8003e7e <HAL_NVIC_EnableIRQ>
}
 8002e70:	e076      	b.n	8002f60 <HAL_UART_MspInit+0x200>
  else if(huart->Instance==USART3)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a40      	ldr	r2, [pc, #256]	; (8002f78 <HAL_UART_MspInit+0x218>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d171      	bne.n	8002f60 <HAL_UART_MspInit+0x200>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002e7c:	4b3b      	ldr	r3, [pc, #236]	; (8002f6c <HAL_UART_MspInit+0x20c>)
 8002e7e:	69db      	ldr	r3, [r3, #28]
 8002e80:	4a3a      	ldr	r2, [pc, #232]	; (8002f6c <HAL_UART_MspInit+0x20c>)
 8002e82:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e86:	61d3      	str	r3, [r2, #28]
 8002e88:	4b38      	ldr	r3, [pc, #224]	; (8002f6c <HAL_UART_MspInit+0x20c>)
 8002e8a:	69db      	ldr	r3, [r3, #28]
 8002e8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e90:	613b      	str	r3, [r7, #16]
 8002e92:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e94:	4b35      	ldr	r3, [pc, #212]	; (8002f6c <HAL_UART_MspInit+0x20c>)
 8002e96:	699b      	ldr	r3, [r3, #24]
 8002e98:	4a34      	ldr	r2, [pc, #208]	; (8002f6c <HAL_UART_MspInit+0x20c>)
 8002e9a:	f043 0320 	orr.w	r3, r3, #32
 8002e9e:	6193      	str	r3, [r2, #24]
 8002ea0:	4b32      	ldr	r3, [pc, #200]	; (8002f6c <HAL_UART_MspInit+0x20c>)
 8002ea2:	699b      	ldr	r3, [r3, #24]
 8002ea4:	f003 0320 	and.w	r3, r3, #32
 8002ea8:	60fb      	str	r3, [r7, #12]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = IMUTX_Pin;
 8002eac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002eb0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(IMUTX_GPIO_Port, &GPIO_InitStruct);
 8002eba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	482e      	ldr	r0, [pc, #184]	; (8002f7c <HAL_UART_MspInit+0x21c>)
 8002ec2:	f001 fc79 	bl	80047b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = IMURX_Pin;
 8002ec6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002eca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(IMURX_GPIO_Port, &GPIO_InitStruct);
 8002ed4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ed8:	4619      	mov	r1, r3
 8002eda:	4828      	ldr	r0, [pc, #160]	; (8002f7c <HAL_UART_MspInit+0x21c>)
 8002edc:	f001 fc6c 	bl	80047b8 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART3_ENABLE();
 8002ee0:	4b27      	ldr	r3, [pc, #156]	; (8002f80 <HAL_UART_MspInit+0x220>)
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	637b      	str	r3, [r7, #52]	; 0x34
 8002ee6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ee8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002eec:	637b      	str	r3, [r7, #52]	; 0x34
 8002eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ef0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002ef4:	637b      	str	r3, [r7, #52]	; 0x34
 8002ef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ef8:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002efc:	637b      	str	r3, [r7, #52]	; 0x34
 8002efe:	4a20      	ldr	r2, [pc, #128]	; (8002f80 <HAL_UART_MspInit+0x220>)
 8002f00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f02:	6053      	str	r3, [r2, #4]
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8002f04:	4b1f      	ldr	r3, [pc, #124]	; (8002f84 <HAL_UART_MspInit+0x224>)
 8002f06:	4a20      	ldr	r2, [pc, #128]	; (8002f88 <HAL_UART_MspInit+0x228>)
 8002f08:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f0a:	4b1e      	ldr	r3, [pc, #120]	; (8002f84 <HAL_UART_MspInit+0x224>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f10:	4b1c      	ldr	r3, [pc, #112]	; (8002f84 <HAL_UART_MspInit+0x224>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002f16:	4b1b      	ldr	r3, [pc, #108]	; (8002f84 <HAL_UART_MspInit+0x224>)
 8002f18:	2280      	movs	r2, #128	; 0x80
 8002f1a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f1c:	4b19      	ldr	r3, [pc, #100]	; (8002f84 <HAL_UART_MspInit+0x224>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f22:	4b18      	ldr	r3, [pc, #96]	; (8002f84 <HAL_UART_MspInit+0x224>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002f28:	4b16      	ldr	r3, [pc, #88]	; (8002f84 <HAL_UART_MspInit+0x224>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002f2e:	4b15      	ldr	r3, [pc, #84]	; (8002f84 <HAL_UART_MspInit+0x224>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002f34:	4813      	ldr	r0, [pc, #76]	; (8002f84 <HAL_UART_MspInit+0x224>)
 8002f36:	f000 ffbd 	bl	8003eb4 <HAL_DMA_Init>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d001      	beq.n	8002f44 <HAL_UART_MspInit+0x1e4>
      Error_Handler();
 8002f40:	f7ff fb02 	bl	8002548 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	4a0f      	ldr	r2, [pc, #60]	; (8002f84 <HAL_UART_MspInit+0x224>)
 8002f48:	639a      	str	r2, [r3, #56]	; 0x38
 8002f4a:	4a0e      	ldr	r2, [pc, #56]	; (8002f84 <HAL_UART_MspInit+0x224>)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002f50:	2200      	movs	r2, #0
 8002f52:	2105      	movs	r1, #5
 8002f54:	2027      	movs	r0, #39	; 0x27
 8002f56:	f000 ff76 	bl	8003e46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002f5a:	2027      	movs	r0, #39	; 0x27
 8002f5c:	f000 ff8f 	bl	8003e7e <HAL_NVIC_EnableIRQ>
}
 8002f60:	bf00      	nop
 8002f62:	3738      	adds	r7, #56	; 0x38
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	40013800 	.word	0x40013800
 8002f6c:	40021000 	.word	0x40021000
 8002f70:	40010800 	.word	0x40010800
 8002f74:	40004400 	.word	0x40004400
 8002f78:	40004800 	.word	0x40004800
 8002f7c:	40011400 	.word	0x40011400
 8002f80:	40010000 	.word	0x40010000
 8002f84:	200004cc 	.word	0x200004cc
 8002f88:	40020030 	.word	0x40020030

08002f8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f90:	e7fe      	b.n	8002f90 <NMI_Handler+0x4>

08002f92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f92:	b480      	push	{r7}
 8002f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f96:	e7fe      	b.n	8002f96 <HardFault_Handler+0x4>

08002f98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f9c:	e7fe      	b.n	8002f9c <MemManage_Handler+0x4>

08002f9e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f9e:	b480      	push	{r7}
 8002fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002fa2:	e7fe      	b.n	8002fa2 <BusFault_Handler+0x4>

08002fa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002fa8:	e7fe      	b.n	8002fa8 <UsageFault_Handler+0x4>

08002faa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002faa:	b480      	push	{r7}
 8002fac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002fae:	bf00      	nop
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bc80      	pop	{r7}
 8002fb4:	4770      	bx	lr

08002fb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002fb6:	b480      	push	{r7}
 8002fb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002fba:	bf00      	nop
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bc80      	pop	{r7}
 8002fc0:	4770      	bx	lr

08002fc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002fc2:	b480      	push	{r7}
 8002fc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002fc6:	bf00      	nop
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bc80      	pop	{r7}
 8002fcc:	4770      	bx	lr

08002fce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fd2:	f000 fe21 	bl	8003c18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fd6:	bf00      	nop
 8002fd8:	bd80      	pop	{r7, pc}
	...

08002fdc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002fe0:	4802      	ldr	r0, [pc, #8]	; (8002fec <DMA1_Channel3_IRQHandler+0x10>)
 8002fe2:	f001 f97f 	bl	80042e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002fe6:	bf00      	nop
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	200004cc 	.word	0x200004cc

08002ff0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002ff4:	4802      	ldr	r0, [pc, #8]	; (8003000 <TIM2_IRQHandler+0x10>)
 8002ff6:	f002 fe8a 	bl	8005d0e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002ffa:	bf00      	nop
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	20000250 	.word	0x20000250

08003004 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  // Bluetooth

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003008:	4802      	ldr	r0, [pc, #8]	; (8003014 <USART1_IRQHandler+0x10>)
 800300a:	f004 f811 	bl	8007030 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800300e:	bf00      	nop
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	20000400 	.word	0x20000400

08003018 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  // OpenMV

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800301c:	4802      	ldr	r0, [pc, #8]	; (8003028 <USART2_IRQHandler+0x10>)
 800301e:	f004 f807 	bl	8007030 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003022:	bf00      	nop
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	20000444 	.word	0x20000444

0800302c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  // IMU
  
  if(__HAL_UART_GET_FLAG(&huart3, UART_FLAG_IDLE) != RESET){
 8003032:	4b17      	ldr	r3, [pc, #92]	; (8003090 <USART3_IRQHandler+0x64>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0310 	and.w	r3, r3, #16
 800303c:	2b10      	cmp	r3, #16
 800303e:	d11a      	bne.n	8003076 <USART3_IRQHandler+0x4a>
    __HAL_UART_CLEAR_IDLEFLAG(&huart3);
 8003040:	2300      	movs	r3, #0
 8003042:	607b      	str	r3, [r7, #4]
 8003044:	4b12      	ldr	r3, [pc, #72]	; (8003090 <USART3_IRQHandler+0x64>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	607b      	str	r3, [r7, #4]
 800304c:	4b10      	ldr	r3, [pc, #64]	; (8003090 <USART3_IRQHandler+0x64>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	607b      	str	r3, [r7, #4]
 8003054:	687b      	ldr	r3, [r7, #4]
    HAL_UART_DMAStop(&huart3);
 8003056:	480e      	ldr	r0, [pc, #56]	; (8003090 <USART3_IRQHandler+0x64>)
 8003058:	f003 ff8f 	bl	8006f7a <HAL_UART_DMAStop>
    JY901data.RXlen = JY901_BUFFERLEN - hdma_usart3_rx.Instance->CNDTR;
 800305c:	4b0d      	ldr	r3, [pc, #52]	; (8003094 <USART3_IRQHandler+0x68>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	b29b      	uxth	r3, r3
 8003064:	f1c3 030b 	rsb	r3, r3, #11
 8003068:	b29a      	uxth	r2, r3
 800306a:	4b0b      	ldr	r3, [pc, #44]	; (8003098 <USART3_IRQHandler+0x6c>)
 800306c:	819a      	strh	r2, [r3, #12]
    JY901_getdata(&JY901data, &angle);
 800306e:	490b      	ldr	r1, [pc, #44]	; (800309c <USART3_IRQHandler+0x70>)
 8003070:	4809      	ldr	r0, [pc, #36]	; (8003098 <USART3_IRQHandler+0x6c>)
 8003072:	f7fe f81c 	bl	80010ae <JY901_getdata>
  }
  HAL_UART_Receive_DMA(&huart3, JY901data.buffer, JY901_BUFFERLEN);
 8003076:	220b      	movs	r2, #11
 8003078:	4907      	ldr	r1, [pc, #28]	; (8003098 <USART3_IRQHandler+0x6c>)
 800307a:	4805      	ldr	r0, [pc, #20]	; (8003090 <USART3_IRQHandler+0x64>)
 800307c:	f003 ff4d 	bl	8006f1a <HAL_UART_Receive_DMA>
  
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003080:	4803      	ldr	r0, [pc, #12]	; (8003090 <USART3_IRQHandler+0x64>)
 8003082:	f003 ffd5 	bl	8007030 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003086:	bf00      	nop
 8003088:	3708      	adds	r7, #8
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	20000488 	.word	0x20000488
 8003094:	200004cc 	.word	0x200004cc
 8003098:	200005ec 	.word	0x200005ec
 800309c:	200005fc 	.word	0x200005fc

080030a0 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80030a4:	4802      	ldr	r0, [pc, #8]	; (80030b0 <TIM6_IRQHandler+0x10>)
 80030a6:	f002 fe32 	bl	8005d0e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80030aa:	bf00      	nop
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	20000328 	.word	0x20000328

080030b4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80030b8:	4802      	ldr	r0, [pc, #8]	; (80030c4 <TIM7_IRQHandler+0x10>)
 80030ba:	f002 fe28 	bl	8005d0e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80030be:	bf00      	nop
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	20000370 	.word	0x20000370

080030c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80030c8:	b480      	push	{r7}
 80030ca:	af00      	add	r7, sp, #0
	return 1;
 80030cc:	2301      	movs	r3, #1
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bc80      	pop	{r7}
 80030d4:	4770      	bx	lr

080030d6 <_kill>:

int _kill(int pid, int sig)
{
 80030d6:	b580      	push	{r7, lr}
 80030d8:	b082      	sub	sp, #8
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
 80030de:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80030e0:	f004 fd02 	bl	8007ae8 <__errno>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2216      	movs	r2, #22
 80030e8:	601a      	str	r2, [r3, #0]
	return -1;
 80030ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3708      	adds	r7, #8
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}

080030f6 <_exit>:

void _exit (int status)
{
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b082      	sub	sp, #8
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80030fe:	f04f 31ff 	mov.w	r1, #4294967295
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f7ff ffe7 	bl	80030d6 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003108:	e7fe      	b.n	8003108 <_exit+0x12>

0800310a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800310a:	b580      	push	{r7, lr}
 800310c:	b086      	sub	sp, #24
 800310e:	af00      	add	r7, sp, #0
 8003110:	60f8      	str	r0, [r7, #12]
 8003112:	60b9      	str	r1, [r7, #8]
 8003114:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003116:	2300      	movs	r3, #0
 8003118:	617b      	str	r3, [r7, #20]
 800311a:	e00a      	b.n	8003132 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800311c:	f3af 8000 	nop.w
 8003120:	4601      	mov	r1, r0
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	1c5a      	adds	r2, r3, #1
 8003126:	60ba      	str	r2, [r7, #8]
 8003128:	b2ca      	uxtb	r2, r1
 800312a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	3301      	adds	r3, #1
 8003130:	617b      	str	r3, [r7, #20]
 8003132:	697a      	ldr	r2, [r7, #20]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	429a      	cmp	r2, r3
 8003138:	dbf0      	blt.n	800311c <_read+0x12>
	}

return len;
 800313a:	687b      	ldr	r3, [r7, #4]
}
 800313c:	4618      	mov	r0, r3
 800313e:	3718      	adds	r7, #24
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}

08003144 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b086      	sub	sp, #24
 8003148:	af00      	add	r7, sp, #0
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	60b9      	str	r1, [r7, #8]
 800314e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003150:	2300      	movs	r3, #0
 8003152:	617b      	str	r3, [r7, #20]
 8003154:	e009      	b.n	800316a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	1c5a      	adds	r2, r3, #1
 800315a:	60ba      	str	r2, [r7, #8]
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	4618      	mov	r0, r3
 8003160:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	3301      	adds	r3, #1
 8003168:	617b      	str	r3, [r7, #20]
 800316a:	697a      	ldr	r2, [r7, #20]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	429a      	cmp	r2, r3
 8003170:	dbf1      	blt.n	8003156 <_write+0x12>
	}
	return len;
 8003172:	687b      	ldr	r3, [r7, #4]
}
 8003174:	4618      	mov	r0, r3
 8003176:	3718      	adds	r7, #24
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}

0800317c <_close>:

int _close(int file)
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
	return -1;
 8003184:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003188:	4618      	mov	r0, r3
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	bc80      	pop	{r7}
 8003190:	4770      	bx	lr

08003192 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003192:	b480      	push	{r7}
 8003194:	b083      	sub	sp, #12
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
 800319a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80031a2:	605a      	str	r2, [r3, #4]
	return 0;
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bc80      	pop	{r7}
 80031ae:	4770      	bx	lr

080031b0 <_isatty>:

int _isatty(int file)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
	return 1;
 80031b8:	2301      	movs	r3, #1
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	370c      	adds	r7, #12
 80031be:	46bd      	mov	sp, r7
 80031c0:	bc80      	pop	{r7}
 80031c2:	4770      	bx	lr

080031c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b085      	sub	sp, #20
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	60b9      	str	r1, [r7, #8]
 80031ce:	607a      	str	r2, [r7, #4]
	return 0;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3714      	adds	r7, #20
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bc80      	pop	{r7}
 80031da:	4770      	bx	lr

080031dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b086      	sub	sp, #24
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80031e4:	4a14      	ldr	r2, [pc, #80]	; (8003238 <_sbrk+0x5c>)
 80031e6:	4b15      	ldr	r3, [pc, #84]	; (800323c <_sbrk+0x60>)
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80031f0:	4b13      	ldr	r3, [pc, #76]	; (8003240 <_sbrk+0x64>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d102      	bne.n	80031fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80031f8:	4b11      	ldr	r3, [pc, #68]	; (8003240 <_sbrk+0x64>)
 80031fa:	4a12      	ldr	r2, [pc, #72]	; (8003244 <_sbrk+0x68>)
 80031fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80031fe:	4b10      	ldr	r3, [pc, #64]	; (8003240 <_sbrk+0x64>)
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4413      	add	r3, r2
 8003206:	693a      	ldr	r2, [r7, #16]
 8003208:	429a      	cmp	r2, r3
 800320a:	d207      	bcs.n	800321c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800320c:	f004 fc6c 	bl	8007ae8 <__errno>
 8003210:	4603      	mov	r3, r0
 8003212:	220c      	movs	r2, #12
 8003214:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003216:	f04f 33ff 	mov.w	r3, #4294967295
 800321a:	e009      	b.n	8003230 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800321c:	4b08      	ldr	r3, [pc, #32]	; (8003240 <_sbrk+0x64>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003222:	4b07      	ldr	r3, [pc, #28]	; (8003240 <_sbrk+0x64>)
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4413      	add	r3, r2
 800322a:	4a05      	ldr	r2, [pc, #20]	; (8003240 <_sbrk+0x64>)
 800322c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800322e:	68fb      	ldr	r3, [r7, #12]
}
 8003230:	4618      	mov	r0, r3
 8003232:	3718      	adds	r7, #24
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}
 8003238:	20010000 	.word	0x20010000
 800323c:	00000400 	.word	0x00000400
 8003240:	20000728 	.word	0x20000728
 8003244:	20000740 	.word	0x20000740

08003248 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003248:	b480      	push	{r7}
 800324a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800324c:	bf00      	nop
 800324e:	46bd      	mov	sp, r7
 8003250:	bc80      	pop	{r7}
 8003252:	4770      	bx	lr

08003254 <TimerIT_init>:
#include "timer.h"
#include "control.h"
#include "JY901.h"
#include "pid.h"

void TimerIT_init(TIM_HandleTypeDef *htim){
 8003254:	b580      	push	{r7, lr}
 8003256:	b082      	sub	sp, #8
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
    __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f06f 0201 	mvn.w	r2, #1
 8003264:	611a      	str	r2, [r3, #16]
    __HAL_TIM_SET_COUNTER(htim, 0);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2200      	movs	r2, #0
 800326c:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_TIM_Base_Start_IT(htim);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f002 f8b8 	bl	80053e4 <HAL_TIM_Base_Start_IT>
}
 8003274:	bf00      	nop
 8003276:	3708      	adds	r7, #8
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}

0800327c <TimerIT_callback>:
extern int fwdlim;
int finallim = 4500;

extern uint8_t startmove;

void TimerIT_callback(){
 800327c:	b580      	push	{r7, lr}
 800327e:	b086      	sub	sp, #24
 8003280:	af00      	add	r7, sp, #0
    if(!startmove){
 8003282:	4b8a      	ldr	r3, [pc, #552]	; (80034ac <TimerIT_callback+0x230>)
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	2b00      	cmp	r3, #0
 8003288:	f000 810b 	beq.w	80034a2 <TimerIT_callback+0x226>
        return;
    }

    speedL = Wheel_getspeed(&wheelL);
 800328c:	4888      	ldr	r0, [pc, #544]	; (80034b0 <TimerIT_callback+0x234>)
 800328e:	f000 fc3f 	bl	8003b10 <Wheel_getspeed>
 8003292:	4603      	mov	r3, r0
 8003294:	b21a      	sxth	r2, r3
 8003296:	4b87      	ldr	r3, [pc, #540]	; (80034b4 <TimerIT_callback+0x238>)
 8003298:	801a      	strh	r2, [r3, #0]
    speedR = Wheel_getspeed(&wheelR);
 800329a:	4887      	ldr	r0, [pc, #540]	; (80034b8 <TimerIT_callback+0x23c>)
 800329c:	f000 fc38 	bl	8003b10 <Wheel_getspeed>
 80032a0:	4603      	mov	r3, r0
 80032a2:	b21a      	sxth	r2, r3
 80032a4:	4b85      	ldr	r3, [pc, #532]	; (80034bc <TimerIT_callback+0x240>)
 80032a6:	801a      	strh	r2, [r3, #0]
    if(doPID){
 80032a8:	4b85      	ldr	r3, [pc, #532]	; (80034c0 <TimerIT_callback+0x244>)
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	f000 8088 	beq.w	80033c2 <TimerIT_callback+0x146>
        int dt = doangPID ? PID_calc(&rotPID, angle.Angle[2], aimANG) : 0;
 80032b2:	4b84      	ldr	r3, [pc, #528]	; (80034c4 <TimerIT_callback+0x248>)
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d00f      	beq.n	80032da <TimerIT_callback+0x5e>
 80032ba:	4b83      	ldr	r3, [pc, #524]	; (80034c8 <TimerIT_callback+0x24c>)
 80032bc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80032c0:	4a82      	ldr	r2, [pc, #520]	; (80034cc <TimerIT_callback+0x250>)
 80032c2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80032c6:	4619      	mov	r1, r3
 80032c8:	4881      	ldr	r0, [pc, #516]	; (80034d0 <TimerIT_callback+0x254>)
 80032ca:	f7ff f9d0 	bl	800266e <PID_calc>
 80032ce:	4603      	mov	r3, r0
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7fd fe77 	bl	8000fc4 <__aeabi_f2iz>
 80032d6:	4603      	mov	r3, r0
 80032d8:	e000      	b.n	80032dc <TimerIT_callback+0x60>
 80032da:	2300      	movs	r3, #0
 80032dc:	60fb      	str	r3, [r7, #12]
        int base = fwdlim;
 80032de:	4b7d      	ldr	r3, [pc, #500]	; (80034d4 <TimerIT_callback+0x258>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	617b      	str	r3, [r7, #20]
        if(!tank){
 80032e4:	4b7c      	ldr	r3, [pc, #496]	; (80034d8 <TimerIT_callback+0x25c>)
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d15b      	bne.n	80033a4 <TimerIT_callback+0x128>
            aimspeedL = PID_calc(&fwdPIDL, Encoder_read(wheelL.encoder), aimENC);
 80032ec:	4b70      	ldr	r3, [pc, #448]	; (80034b0 <TimerIT_callback+0x234>)
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	4618      	mov	r0, r3
 80032f2:	f7fe fadc 	bl	80018ae <Encoder_read>
 80032f6:	4603      	mov	r3, r0
 80032f8:	b21b      	sxth	r3, r3
 80032fa:	4a78      	ldr	r2, [pc, #480]	; (80034dc <TimerIT_callback+0x260>)
 80032fc:	8812      	ldrh	r2, [r2, #0]
 80032fe:	b212      	sxth	r2, r2
 8003300:	4619      	mov	r1, r3
 8003302:	4877      	ldr	r0, [pc, #476]	; (80034e0 <TimerIT_callback+0x264>)
 8003304:	f7ff f9b3 	bl	800266e <PID_calc>
 8003308:	4603      	mov	r3, r0
 800330a:	4618      	mov	r0, r3
 800330c:	f7fd fe5a 	bl	8000fc4 <__aeabi_f2iz>
 8003310:	4603      	mov	r3, r0
 8003312:	b21a      	sxth	r2, r3
 8003314:	4b73      	ldr	r3, [pc, #460]	; (80034e4 <TimerIT_callback+0x268>)
 8003316:	801a      	strh	r2, [r3, #0]
            aimspeedR = PID_calc(&fwdPIDR, Encoder_read(wheelR.encoder), aimENC);
 8003318:	4b67      	ldr	r3, [pc, #412]	; (80034b8 <TimerIT_callback+0x23c>)
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	4618      	mov	r0, r3
 800331e:	f7fe fac6 	bl	80018ae <Encoder_read>
 8003322:	4603      	mov	r3, r0
 8003324:	b21b      	sxth	r3, r3
 8003326:	4a6d      	ldr	r2, [pc, #436]	; (80034dc <TimerIT_callback+0x260>)
 8003328:	8812      	ldrh	r2, [r2, #0]
 800332a:	b212      	sxth	r2, r2
 800332c:	4619      	mov	r1, r3
 800332e:	486e      	ldr	r0, [pc, #440]	; (80034e8 <TimerIT_callback+0x26c>)
 8003330:	f7ff f99d 	bl	800266e <PID_calc>
 8003334:	4603      	mov	r3, r0
 8003336:	4618      	mov	r0, r3
 8003338:	f7fd fe44 	bl	8000fc4 <__aeabi_f2iz>
 800333c:	4603      	mov	r3, r0
 800333e:	b21a      	sxth	r2, r3
 8003340:	4b6a      	ldr	r3, [pc, #424]	; (80034ec <TimerIT_callback+0x270>)
 8003342:	801a      	strh	r2, [r3, #0]
            int tl = PID_calc(&speedPIDL, speedL, aimspeedL);
 8003344:	4b5b      	ldr	r3, [pc, #364]	; (80034b4 <TimerIT_callback+0x238>)
 8003346:	f9b3 3000 	ldrsh.w	r3, [r3]
 800334a:	4a66      	ldr	r2, [pc, #408]	; (80034e4 <TimerIT_callback+0x268>)
 800334c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8003350:	4619      	mov	r1, r3
 8003352:	4867      	ldr	r0, [pc, #412]	; (80034f0 <TimerIT_callback+0x274>)
 8003354:	f7ff f98b 	bl	800266e <PID_calc>
 8003358:	4603      	mov	r3, r0
 800335a:	4618      	mov	r0, r3
 800335c:	f7fd fe32 	bl	8000fc4 <__aeabi_f2iz>
 8003360:	4603      	mov	r3, r0
 8003362:	60bb      	str	r3, [r7, #8]
            int tr = PID_calc(&speedPIDR, speedR, aimspeedR);
 8003364:	4b55      	ldr	r3, [pc, #340]	; (80034bc <TimerIT_callback+0x240>)
 8003366:	f9b3 3000 	ldrsh.w	r3, [r3]
 800336a:	4a60      	ldr	r2, [pc, #384]	; (80034ec <TimerIT_callback+0x270>)
 800336c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8003370:	4619      	mov	r1, r3
 8003372:	4860      	ldr	r0, [pc, #384]	; (80034f4 <TimerIT_callback+0x278>)
 8003374:	f7ff f97b 	bl	800266e <PID_calc>
 8003378:	4603      	mov	r3, r0
 800337a:	4618      	mov	r0, r3
 800337c:	f7fd fe22 	bl	8000fc4 <__aeabi_f2iz>
 8003380:	4603      	mov	r3, r0
 8003382:	607b      	str	r3, [r7, #4]
            base = clip((tl + tr) / 2, -finallim, finallim);
 8003384:	68ba      	ldr	r2, [r7, #8]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4413      	add	r3, r2
 800338a:	0fda      	lsrs	r2, r3, #31
 800338c:	4413      	add	r3, r2
 800338e:	105b      	asrs	r3, r3, #1
 8003390:	4618      	mov	r0, r3
 8003392:	4b59      	ldr	r3, [pc, #356]	; (80034f8 <TimerIT_callback+0x27c>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	425b      	negs	r3, r3
 8003398:	4a57      	ldr	r2, [pc, #348]	; (80034f8 <TimerIT_callback+0x27c>)
 800339a:	6812      	ldr	r2, [r2, #0]
 800339c:	4619      	mov	r1, r3
 800339e:	f000 faf7 	bl	8003990 <clip>
 80033a2:	6178      	str	r0, [r7, #20]
        }
        Wheel_set(&wheelL, base + dt);
 80033a4:	697a      	ldr	r2, [r7, #20]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	4413      	add	r3, r2
 80033aa:	4619      	mov	r1, r3
 80033ac:	4840      	ldr	r0, [pc, #256]	; (80034b0 <TimerIT_callback+0x234>)
 80033ae:	f000 fb3b 	bl	8003a28 <Wheel_set>
    	Wheel_set(&wheelR, base - dt);
 80033b2:	697a      	ldr	r2, [r7, #20]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	4619      	mov	r1, r3
 80033ba:	483f      	ldr	r0, [pc, #252]	; (80034b8 <TimerIT_callback+0x23c>)
 80033bc:	f000 fb34 	bl	8003a28 <Wheel_set>
 80033c0:	e070      	b.n	80034a4 <TimerIT_callback+0x228>
    }else if(dospinPID){
 80033c2:	4b4e      	ldr	r3, [pc, #312]	; (80034fc <TimerIT_callback+0x280>)
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d062      	beq.n	8003490 <TimerIT_callback+0x214>
        if(speedonly){
 80033ca:	4b4d      	ldr	r3, [pc, #308]	; (8003500 <TimerIT_callback+0x284>)
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d026      	beq.n	8003420 <TimerIT_callback+0x1a4>
            Wheel_set(&wheelL, PID_calc(&speedPIDL, speedL, aimspeedL));
 80033d2:	4b38      	ldr	r3, [pc, #224]	; (80034b4 <TimerIT_callback+0x238>)
 80033d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033d8:	4a42      	ldr	r2, [pc, #264]	; (80034e4 <TimerIT_callback+0x268>)
 80033da:	f9b2 2000 	ldrsh.w	r2, [r2]
 80033de:	4619      	mov	r1, r3
 80033e0:	4843      	ldr	r0, [pc, #268]	; (80034f0 <TimerIT_callback+0x274>)
 80033e2:	f7ff f944 	bl	800266e <PID_calc>
 80033e6:	4603      	mov	r3, r0
 80033e8:	4618      	mov	r0, r3
 80033ea:	f7fd fdeb 	bl	8000fc4 <__aeabi_f2iz>
 80033ee:	4603      	mov	r3, r0
 80033f0:	4619      	mov	r1, r3
 80033f2:	482f      	ldr	r0, [pc, #188]	; (80034b0 <TimerIT_callback+0x234>)
 80033f4:	f000 fb18 	bl	8003a28 <Wheel_set>
            Wheel_set(&wheelR, PID_calc(&speedPIDR, speedR, aimspeedR));
 80033f8:	4b30      	ldr	r3, [pc, #192]	; (80034bc <TimerIT_callback+0x240>)
 80033fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033fe:	4a3b      	ldr	r2, [pc, #236]	; (80034ec <TimerIT_callback+0x270>)
 8003400:	f9b2 2000 	ldrsh.w	r2, [r2]
 8003404:	4619      	mov	r1, r3
 8003406:	483b      	ldr	r0, [pc, #236]	; (80034f4 <TimerIT_callback+0x278>)
 8003408:	f7ff f931 	bl	800266e <PID_calc>
 800340c:	4603      	mov	r3, r0
 800340e:	4618      	mov	r0, r3
 8003410:	f7fd fdd8 	bl	8000fc4 <__aeabi_f2iz>
 8003414:	4603      	mov	r3, r0
 8003416:	4619      	mov	r1, r3
 8003418:	4827      	ldr	r0, [pc, #156]	; (80034b8 <TimerIT_callback+0x23c>)
 800341a:	f000 fb05 	bl	8003a28 <Wheel_set>
 800341e:	e041      	b.n	80034a4 <TimerIT_callback+0x228>
        }else{
            int base = PID_calc(&spinPID, angle.Angle[2], aimANG);
 8003420:	4b29      	ldr	r3, [pc, #164]	; (80034c8 <TimerIT_callback+0x24c>)
 8003422:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003426:	4a29      	ldr	r2, [pc, #164]	; (80034cc <TimerIT_callback+0x250>)
 8003428:	f9b2 2000 	ldrsh.w	r2, [r2]
 800342c:	4619      	mov	r1, r3
 800342e:	4835      	ldr	r0, [pc, #212]	; (8003504 <TimerIT_callback+0x288>)
 8003430:	f7ff f91d 	bl	800266e <PID_calc>
 8003434:	4603      	mov	r3, r0
 8003436:	4618      	mov	r0, r3
 8003438:	f7fd fdc4 	bl	8000fc4 <__aeabi_f2iz>
 800343c:	4603      	mov	r3, r0
 800343e:	613b      	str	r3, [r7, #16]
            Wheel_set(&wheelL, PID_calc(&speedPIDL, speedL, base));
 8003440:	4b1c      	ldr	r3, [pc, #112]	; (80034b4 <TimerIT_callback+0x238>)
 8003442:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003446:	693a      	ldr	r2, [r7, #16]
 8003448:	b212      	sxth	r2, r2
 800344a:	4619      	mov	r1, r3
 800344c:	4828      	ldr	r0, [pc, #160]	; (80034f0 <TimerIT_callback+0x274>)
 800344e:	f7ff f90e 	bl	800266e <PID_calc>
 8003452:	4603      	mov	r3, r0
 8003454:	4618      	mov	r0, r3
 8003456:	f7fd fdb5 	bl	8000fc4 <__aeabi_f2iz>
 800345a:	4603      	mov	r3, r0
 800345c:	4619      	mov	r1, r3
 800345e:	4814      	ldr	r0, [pc, #80]	; (80034b0 <TimerIT_callback+0x234>)
 8003460:	f000 fae2 	bl	8003a28 <Wheel_set>
            Wheel_set(&wheelR, PID_calc(&speedPIDR, speedR, -base));
 8003464:	4b15      	ldr	r3, [pc, #84]	; (80034bc <TimerIT_callback+0x240>)
 8003466:	f9b3 3000 	ldrsh.w	r3, [r3]
 800346a:	693a      	ldr	r2, [r7, #16]
 800346c:	b292      	uxth	r2, r2
 800346e:	4252      	negs	r2, r2
 8003470:	b292      	uxth	r2, r2
 8003472:	b212      	sxth	r2, r2
 8003474:	4619      	mov	r1, r3
 8003476:	481f      	ldr	r0, [pc, #124]	; (80034f4 <TimerIT_callback+0x278>)
 8003478:	f7ff f8f9 	bl	800266e <PID_calc>
 800347c:	4603      	mov	r3, r0
 800347e:	4618      	mov	r0, r3
 8003480:	f7fd fda0 	bl	8000fc4 <__aeabi_f2iz>
 8003484:	4603      	mov	r3, r0
 8003486:	4619      	mov	r1, r3
 8003488:	480b      	ldr	r0, [pc, #44]	; (80034b8 <TimerIT_callback+0x23c>)
 800348a:	f000 facd 	bl	8003a28 <Wheel_set>
 800348e:	e009      	b.n	80034a4 <TimerIT_callback+0x228>
        }
    }else{
        Wheel_set(&wheelL, 0);
 8003490:	2100      	movs	r1, #0
 8003492:	4807      	ldr	r0, [pc, #28]	; (80034b0 <TimerIT_callback+0x234>)
 8003494:	f000 fac8 	bl	8003a28 <Wheel_set>
        Wheel_set(&wheelR, 0);
 8003498:	2100      	movs	r1, #0
 800349a:	4807      	ldr	r0, [pc, #28]	; (80034b8 <TimerIT_callback+0x23c>)
 800349c:	f000 fac4 	bl	8003a28 <Wheel_set>
 80034a0:	e000      	b.n	80034a4 <TimerIT_callback+0x228>
        return;
 80034a2:	bf00      	nop
    }
}
 80034a4:	3718      	adds	r7, #24
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	20000722 	.word	0x20000722
 80034b0:	20000544 	.word	0x20000544
 80034b4:	200006e8 	.word	0x200006e8
 80034b8:	2000055c 	.word	0x2000055c
 80034bc:	200006ea 	.word	0x200006ea
 80034c0:	20000604 	.word	0x20000604
 80034c4:	2000068e 	.word	0x2000068e
 80034c8:	200005fc 	.word	0x200005fc
 80034cc:	2000068c 	.word	0x2000068c
 80034d0:	20000660 	.word	0x20000660
 80034d4:	20000530 	.word	0x20000530
 80034d8:	20000723 	.word	0x20000723
 80034dc:	20000606 	.word	0x20000606
 80034e0:	20000608 	.word	0x20000608
 80034e4:	200006ec 	.word	0x200006ec
 80034e8:	20000634 	.word	0x20000634
 80034ec:	200006ee 	.word	0x200006ee
 80034f0:	20000690 	.word	0x20000690
 80034f4:	200006bc 	.word	0x200006bc
 80034f8:	20000004 	.word	0x20000004
 80034fc:	2000068f 	.word	0x2000068f
 8003500:	20000724 	.word	0x20000724
 8003504:	200006f0 	.word	0x200006f0

08003508 <Ultrasound_init>:
extern uint32_t Ultralim;

void Ultrasound_init(
    struct Ultrasound *ultra,
    TIM_HandleTypeDef *echo_htim, uint16_t echo_channel,
    GPIO_TypeDef *trig_group, uint16_t trig_pin){
 8003508:	b580      	push	{r7, lr}
 800350a:	b084      	sub	sp, #16
 800350c:	af00      	add	r7, sp, #0
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	603b      	str	r3, [r7, #0]
 8003514:	4613      	mov	r3, r2
 8003516:	80fb      	strh	r3, [r7, #6]
    /*
        TIM:
            prescaler = 71
            period = 65535
    */
    ultra->echo_htim = echo_htim;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	68ba      	ldr	r2, [r7, #8]
 800351c:	601a      	str	r2, [r3, #0]
    ultra->echo_channel = echo_channel;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	88fa      	ldrh	r2, [r7, #6]
 8003522:	811a      	strh	r2, [r3, #8]
    ultra->trig_group = trig_group;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	683a      	ldr	r2, [r7, #0]
 8003528:	605a      	str	r2, [r3, #4]
    ultra->trig_pin = trig_pin;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	8b3a      	ldrh	r2, [r7, #24]
 800352e:	815a      	strh	r2, [r3, #10]
    HAL_TIM_IC_Start_IT(echo_htim, echo_channel);
 8003530:	88fb      	ldrh	r3, [r7, #6]
 8003532:	4619      	mov	r1, r3
 8003534:	68b8      	ldr	r0, [r7, #8]
 8003536:	f002 f94d 	bl	80057d4 <HAL_TIM_IC_Start_IT>
    __HAL_TIM_ENABLE_IT(echo_htim, TIM_IT_UPDATE);
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	68da      	ldr	r2, [r3, #12]
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f042 0201 	orr.w	r2, r2, #1
 8003548:	60da      	str	r2, [r3, #12]
    HAL_GPIO_WritePin(trig_group, trig_pin, GPIO_PIN_RESET);
 800354a:	8b3b      	ldrh	r3, [r7, #24]
 800354c:	2200      	movs	r2, #0
 800354e:	4619      	mov	r1, r3
 8003550:	6838      	ldr	r0, [r7, #0]
 8003552:	f001 fac5 	bl	8004ae0 <HAL_GPIO_WritePin>
    ultra->captured = 0;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2200      	movs	r2, #0
 800355a:	731a      	strb	r2, [r3, #12]
    ultra->up = 0;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2200      	movs	r2, #0
 8003560:	735a      	strb	r2, [r3, #13]
    ultra->overflow = 0;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2200      	movs	r2, #0
 8003566:	81da      	strh	r2, [r3, #14]
    ultra->val = 0;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2200      	movs	r2, #0
 800356c:	821a      	strh	r2, [r3, #16]
}
 800356e:	bf00      	nop
 8003570:	3710      	adds	r7, #16
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}

08003576 <Ultrasound_trig>:

void Ultrasound_trig(struct Ultrasound *ultra){
 8003576:	b580      	push	{r7, lr}
 8003578:	b082      	sub	sp, #8
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(ultra->trig_group, ultra->trig_pin, GPIO_PIN_SET);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6858      	ldr	r0, [r3, #4]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	895b      	ldrh	r3, [r3, #10]
 8003586:	2201      	movs	r2, #1
 8003588:	4619      	mov	r1, r3
 800358a:	f001 faa9 	bl	8004ae0 <HAL_GPIO_WritePin>
}
 800358e:	bf00      	nop
 8003590:	3708      	adds	r7, #8
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}

08003596 <Ultrasound_detrig>:

void Ultrasound_detrig(struct Ultrasound *ultra){
 8003596:	b580      	push	{r7, lr}
 8003598:	b082      	sub	sp, #8
 800359a:	af00      	add	r7, sp, #0
 800359c:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(ultra->trig_group, ultra->trig_pin, GPIO_PIN_RESET);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6858      	ldr	r0, [r3, #4]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	895b      	ldrh	r3, [r3, #10]
 80035a6:	2200      	movs	r2, #0
 80035a8:	4619      	mov	r1, r3
 80035aa:	f001 fa99 	bl	8004ae0 <HAL_GPIO_WritePin>
}
 80035ae:	bf00      	nop
 80035b0:	3708      	adds	r7, #8
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}

080035b6 <Ultrasound_periodcallback>:

void Ultrasound_periodcallback(struct Ultrasound *ultra){
 80035b6:	b480      	push	{r7}
 80035b8:	b083      	sub	sp, #12
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
    if(ultra->captured == 0 && ultra->up){
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	7b1b      	ldrb	r3, [r3, #12]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d115      	bne.n	80035f2 <Ultrasound_periodcallback+0x3c>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	7b5b      	ldrb	r3, [r3, #13]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d011      	beq.n	80035f2 <Ultrasound_periodcallback+0x3c>
        if(ultra->overflow == 0x3F){
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	89db      	ldrh	r3, [r3, #14]
 80035d2:	2b3f      	cmp	r3, #63	; 0x3f
 80035d4:	d107      	bne.n	80035e6 <Ultrasound_periodcallback+0x30>
            ultra->captured = 1;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2201      	movs	r2, #1
 80035da:	731a      	strb	r2, [r3, #12]
            ultra->val = 0xFFFF;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80035e2:	821a      	strh	r2, [r3, #16]
        }else{
            ultra->overflow++;
        }
    }
}
 80035e4:	e005      	b.n	80035f2 <Ultrasound_periodcallback+0x3c>
            ultra->overflow++;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	89db      	ldrh	r3, [r3, #14]
 80035ea:	3301      	adds	r3, #1
 80035ec:	b29a      	uxth	r2, r3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	81da      	strh	r2, [r3, #14]
}
 80035f2:	bf00      	nop
 80035f4:	370c      	adds	r7, #12
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bc80      	pop	{r7}
 80035fa:	4770      	bx	lr

080035fc <Ultrasound_capturecallback>:

void Ultrasound_capturecallback(struct Ultrasound *ultra){
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
    if(ultra->captured == 0){
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	7b1b      	ldrb	r3, [r3, #12]
 8003608:	2b00      	cmp	r3, #0
 800360a:	f040 8130 	bne.w	800386e <Ultrasound_capturecallback+0x272>
        if(ultra->up){
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	7b5b      	ldrb	r3, [r3, #13]
 8003612:	2b00      	cmp	r3, #0
 8003614:	f000 808c 	beq.w	8003730 <Ultrasound_capturecallback+0x134>
            ultra->captured = 1;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	731a      	strb	r2, [r3, #12]
            ultra->val = HAL_TIM_ReadCapturedValue(ultra->echo_htim, ultra->echo_channel);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	891b      	ldrh	r3, [r3, #8]
 8003626:	4619      	mov	r1, r3
 8003628:	4610      	mov	r0, r2
 800362a:	f002 fe8f 	bl	800634c <HAL_TIM_ReadCapturedValue>
 800362e:	4603      	mov	r3, r0
 8003630:	b29a      	uxth	r2, r3
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	821a      	strh	r2, [r3, #16]
            TIM_RESET_CAPTUREPOLARITY(ultra->echo_htim, ultra->echo_channel);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	891b      	ldrh	r3, [r3, #8]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d10a      	bne.n	8003654 <Ultrasound_capturecallback+0x58>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	6a1a      	ldr	r2, [r3, #32]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f022 020a 	bic.w	r2, r2, #10
 8003650:	621a      	str	r2, [r3, #32]
 8003652:	e027      	b.n	80036a4 <Ultrasound_capturecallback+0xa8>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	891b      	ldrh	r3, [r3, #8]
 8003658:	2b04      	cmp	r3, #4
 800365a:	d10a      	bne.n	8003672 <Ultrasound_capturecallback+0x76>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	6a1b      	ldr	r3, [r3, #32]
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	6812      	ldr	r2, [r2, #0]
 8003668:	6812      	ldr	r2, [r2, #0]
 800366a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800366e:	6213      	str	r3, [r2, #32]
 8003670:	e018      	b.n	80036a4 <Ultrasound_capturecallback+0xa8>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	891b      	ldrh	r3, [r3, #8]
 8003676:	2b08      	cmp	r3, #8
 8003678:	d10a      	bne.n	8003690 <Ultrasound_capturecallback+0x94>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	6a1b      	ldr	r3, [r3, #32]
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	6812      	ldr	r2, [r2, #0]
 8003686:	6812      	ldr	r2, [r2, #0]
 8003688:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800368c:	6213      	str	r3, [r2, #32]
 800368e:	e009      	b.n	80036a4 <Ultrasound_capturecallback+0xa8>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	6a1b      	ldr	r3, [r3, #32]
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	6812      	ldr	r2, [r2, #0]
 800369c:	6812      	ldr	r2, [r2, #0]
 800369e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80036a2:	6213      	str	r3, [r2, #32]
            TIM_SET_CAPTUREPOLARITY(ultra->echo_htim, ultra->echo_channel, TIM_ICPOLARITY_RISING);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	891b      	ldrh	r3, [r3, #8]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d108      	bne.n	80036be <Ultrasound_capturecallback+0xc2>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	6a12      	ldr	r2, [r2, #32]
 80036ba:	621a      	str	r2, [r3, #32]
 80036bc:	e021      	b.n	8003702 <Ultrasound_capturecallback+0x106>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	891b      	ldrh	r3, [r3, #8]
 80036c2:	2b04      	cmp	r3, #4
 80036c4:	d108      	bne.n	80036d8 <Ultrasound_capturecallback+0xdc>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	6812      	ldr	r2, [r2, #0]
 80036d0:	6812      	ldr	r2, [r2, #0]
 80036d2:	6a1b      	ldr	r3, [r3, #32]
 80036d4:	6213      	str	r3, [r2, #32]
 80036d6:	e014      	b.n	8003702 <Ultrasound_capturecallback+0x106>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	891b      	ldrh	r3, [r3, #8]
 80036dc:	2b08      	cmp	r3, #8
 80036de:	d108      	bne.n	80036f2 <Ultrasound_capturecallback+0xf6>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	6812      	ldr	r2, [r2, #0]
 80036ea:	6812      	ldr	r2, [r2, #0]
 80036ec:	6a1b      	ldr	r3, [r3, #32]
 80036ee:	6213      	str	r3, [r2, #32]
 80036f0:	e007      	b.n	8003702 <Ultrasound_capturecallback+0x106>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	6812      	ldr	r2, [r2, #0]
 80036fc:	6812      	ldr	r2, [r2, #0]
 80036fe:	6a1b      	ldr	r3, [r3, #32]
 8003700:	6213      	str	r3, [r2, #32]
            uint32_t res;
            if(Ultrasound_getval(ultra, &res) && res < Ultralim){
 8003702:	f107 030c 	add.w	r3, r7, #12
 8003706:	4619      	mov	r1, r3
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f000 f8b7 	bl	800387c <Ultrasound_getval>
 800370e:	4603      	mov	r3, r0
 8003710:	2b00      	cmp	r3, #0
 8003712:	d009      	beq.n	8003728 <Ultrasound_capturecallback+0x12c>
 8003714:	68fa      	ldr	r2, [r7, #12]
 8003716:	4b58      	ldr	r3, [pc, #352]	; (8003878 <Ultrasound_capturecallback+0x27c>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	429a      	cmp	r2, r3
 800371c:	d204      	bcs.n	8003728 <Ultrasound_capturecallback+0x12c>
                ultra->retreat(ultra);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	695b      	ldr	r3, [r3, #20]
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	4798      	blx	r3
            TIM_RESET_CAPTUREPOLARITY(ultra->echo_htim, ultra->echo_channel);
            TIM_SET_CAPTUREPOLARITY(ultra->echo_htim, ultra->echo_channel, TIM_ICPOLARITY_FALLING);
            __HAL_TIM_ENABLE(ultra->echo_htim);
        }
    }
}
 8003726:	e0a2      	b.n	800386e <Ultrasound_capturecallback+0x272>
                ultra->danger = 0;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	761a      	strb	r2, [r3, #24]
}
 800372e:	e09e      	b.n	800386e <Ultrasound_capturecallback+0x272>
            ultra->up = 1;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	735a      	strb	r2, [r3, #13]
            ultra->val = 0;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	821a      	strh	r2, [r3, #16]
            __HAL_TIM_DISABLE(ultra->echo_htim);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	6a1a      	ldr	r2, [r3, #32]
 8003744:	f241 1311 	movw	r3, #4369	; 0x1111
 8003748:	4013      	ands	r3, r2
 800374a:	2b00      	cmp	r3, #0
 800374c:	d112      	bne.n	8003774 <Ultrasound_capturecallback+0x178>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	6a1a      	ldr	r2, [r3, #32]
 8003756:	f240 4344 	movw	r3, #1092	; 0x444
 800375a:	4013      	ands	r3, r2
 800375c:	2b00      	cmp	r3, #0
 800375e:	d109      	bne.n	8003774 <Ultrasound_capturecallback+0x178>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f022 0201 	bic.w	r2, r2, #1
 8003772:	601a      	str	r2, [r3, #0]
            __HAL_TIM_SET_COUNTER(ultra->echo_htim, 0);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	2200      	movs	r2, #0
 800377c:	625a      	str	r2, [r3, #36]	; 0x24
            TIM_RESET_CAPTUREPOLARITY(ultra->echo_htim, ultra->echo_channel);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	891b      	ldrh	r3, [r3, #8]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d10a      	bne.n	800379c <Ultrasound_capturecallback+0x1a0>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	6a1a      	ldr	r2, [r3, #32]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f022 020a 	bic.w	r2, r2, #10
 8003798:	621a      	str	r2, [r3, #32]
 800379a:	e027      	b.n	80037ec <Ultrasound_capturecallback+0x1f0>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	891b      	ldrh	r3, [r3, #8]
 80037a0:	2b04      	cmp	r3, #4
 80037a2:	d10a      	bne.n	80037ba <Ultrasound_capturecallback+0x1be>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	6a1b      	ldr	r3, [r3, #32]
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	6812      	ldr	r2, [r2, #0]
 80037b0:	6812      	ldr	r2, [r2, #0]
 80037b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80037b6:	6213      	str	r3, [r2, #32]
 80037b8:	e018      	b.n	80037ec <Ultrasound_capturecallback+0x1f0>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	891b      	ldrh	r3, [r3, #8]
 80037be:	2b08      	cmp	r3, #8
 80037c0:	d10a      	bne.n	80037d8 <Ultrasound_capturecallback+0x1dc>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	6a1b      	ldr	r3, [r3, #32]
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	6812      	ldr	r2, [r2, #0]
 80037ce:	6812      	ldr	r2, [r2, #0]
 80037d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80037d4:	6213      	str	r3, [r2, #32]
 80037d6:	e009      	b.n	80037ec <Ultrasound_capturecallback+0x1f0>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	6a1b      	ldr	r3, [r3, #32]
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	6812      	ldr	r2, [r2, #0]
 80037e4:	6812      	ldr	r2, [r2, #0]
 80037e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80037ea:	6213      	str	r3, [r2, #32]
            TIM_SET_CAPTUREPOLARITY(ultra->echo_htim, ultra->echo_channel, TIM_ICPOLARITY_FALLING);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	891b      	ldrh	r3, [r3, #8]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d10a      	bne.n	800380a <Ultrasound_capturecallback+0x20e>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	6a1a      	ldr	r2, [r3, #32]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f042 0202 	orr.w	r2, r2, #2
 8003806:	621a      	str	r2, [r3, #32]
 8003808:	e027      	b.n	800385a <Ultrasound_capturecallback+0x25e>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	891b      	ldrh	r3, [r3, #8]
 800380e:	2b04      	cmp	r3, #4
 8003810:	d10a      	bne.n	8003828 <Ultrasound_capturecallback+0x22c>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	6a1b      	ldr	r3, [r3, #32]
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	6812      	ldr	r2, [r2, #0]
 800381e:	6812      	ldr	r2, [r2, #0]
 8003820:	f043 0320 	orr.w	r3, r3, #32
 8003824:	6213      	str	r3, [r2, #32]
 8003826:	e018      	b.n	800385a <Ultrasound_capturecallback+0x25e>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	891b      	ldrh	r3, [r3, #8]
 800382c:	2b08      	cmp	r3, #8
 800382e:	d10a      	bne.n	8003846 <Ultrasound_capturecallback+0x24a>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	6a1b      	ldr	r3, [r3, #32]
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	6812      	ldr	r2, [r2, #0]
 800383c:	6812      	ldr	r2, [r2, #0]
 800383e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003842:	6213      	str	r3, [r2, #32]
 8003844:	e009      	b.n	800385a <Ultrasound_capturecallback+0x25e>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	6a1b      	ldr	r3, [r3, #32]
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	6812      	ldr	r2, [r2, #0]
 8003852:	6812      	ldr	r2, [r2, #0]
 8003854:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003858:	6213      	str	r3, [r2, #32]
            __HAL_TIM_ENABLE(ultra->echo_htim);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f042 0201 	orr.w	r2, r2, #1
 800386c:	601a      	str	r2, [r3, #0]
}
 800386e:	bf00      	nop
 8003870:	3710      	adds	r7, #16
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	200005e4 	.word	0x200005e4

0800387c <Ultrasound_getval>:

uint8_t Ultrasound_getval(struct Ultrasound *ultra, uint32_t *val){
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
    if(ultra->captured){
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	7b1b      	ldrb	r3, [r3, #12]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d012      	beq.n	80038b4 <Ultrasound_getval+0x38>
        (*val) = ultra->overflow * 0x10000UL + ultra->val;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	89db      	ldrh	r3, [r3, #14]
 8003892:	041b      	lsls	r3, r3, #16
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	8a12      	ldrh	r2, [r2, #16]
 8003898:	441a      	add	r2, r3
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	601a      	str	r2, [r3, #0]
        ultra->captured = 0;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	731a      	strb	r2, [r3, #12]
        ultra->up = 0;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	735a      	strb	r2, [r3, #13]
        ultra->overflow = 0;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	81da      	strh	r2, [r3, #14]
        return 1;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e003      	b.n	80038bc <Ultrasound_getval+0x40>
    }else{
        (*val) = 0;
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	2200      	movs	r2, #0
 80038b8:	601a      	str	r2, [r3, #0]
        return 0;
 80038ba:	2300      	movs	r3, #0
    }
}
 80038bc:	4618      	mov	r0, r3
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bc80      	pop	{r7}
 80038c4:	4770      	bx	lr
	...

080038c8 <retr_front>:
extern uint32_t force;
extern uint8_t doultra;

extern UART_HandleTypeDef huart1;

void retr_front(struct Ultrasound *ultra){
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
    if(doultra){
 80038d0:	4b15      	ldr	r3, [pc, #84]	; (8003928 <retr_front+0x60>)
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d023      	beq.n	8003920 <retr_front+0x58>
        HAL_UART_Transmit(&huart1, (uint8_t*)"retr\n", 5, 100);
 80038d8:	2364      	movs	r3, #100	; 0x64
 80038da:	2205      	movs	r2, #5
 80038dc:	4913      	ldr	r1, [pc, #76]	; (800392c <retr_front+0x64>)
 80038de:	4814      	ldr	r0, [pc, #80]	; (8003930 <retr_front+0x68>)
 80038e0:	f003 fa59 	bl	8006d96 <HAL_UART_Transmit>

        force = ultra->danger = 1;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	761a      	strb	r2, [r3, #24]
 80038ea:	4b12      	ldr	r3, [pc, #72]	; (8003934 <retr_front+0x6c>)
 80038ec:	2201      	movs	r2, #1
 80038ee:	601a      	str	r2, [r3, #0]
        doPID = 0;
 80038f0:	4b11      	ldr	r3, [pc, #68]	; (8003938 <retr_front+0x70>)
 80038f2:	2200      	movs	r2, #0
 80038f4:	701a      	strb	r2, [r3, #0]
        PID_clear(&speedPIDL);
 80038f6:	4811      	ldr	r0, [pc, #68]	; (800393c <retr_front+0x74>)
 80038f8:	f7fe fe42 	bl	8002580 <PID_clear>
        PID_clear(&speedPIDR);
 80038fc:	4810      	ldr	r0, [pc, #64]	; (8003940 <retr_front+0x78>)
 80038fe:	f7fe fe3f 	bl	8002580 <PID_clear>
        speedonly = 1;
 8003902:	4b10      	ldr	r3, [pc, #64]	; (8003944 <retr_front+0x7c>)
 8003904:	2201      	movs	r2, #1
 8003906:	701a      	strb	r2, [r3, #0]
        aimspeedL = aimspeedR = -10;
 8003908:	4b0f      	ldr	r3, [pc, #60]	; (8003948 <retr_front+0x80>)
 800390a:	f64f 72f6 	movw	r2, #65526	; 0xfff6
 800390e:	801a      	strh	r2, [r3, #0]
 8003910:	4b0d      	ldr	r3, [pc, #52]	; (8003948 <retr_front+0x80>)
 8003912:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003916:	4b0d      	ldr	r3, [pc, #52]	; (800394c <retr_front+0x84>)
 8003918:	801a      	strh	r2, [r3, #0]
        dospinPID = 1;
 800391a:	4b0d      	ldr	r3, [pc, #52]	; (8003950 <retr_front+0x88>)
 800391c:	2201      	movs	r2, #1
 800391e:	701a      	strb	r2, [r3, #0]
    }
}
 8003920:	bf00      	nop
 8003922:	3708      	adds	r7, #8
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}
 8003928:	200005e8 	.word	0x200005e8
 800392c:	0800cca0 	.word	0x0800cca0
 8003930:	20000400 	.word	0x20000400
 8003934:	20000725 	.word	0x20000725
 8003938:	20000604 	.word	0x20000604
 800393c:	20000690 	.word	0x20000690
 8003940:	200006bc 	.word	0x200006bc
 8003944:	20000724 	.word	0x20000724
 8003948:	200006ee 	.word	0x200006ee
 800394c:	200006ec 	.word	0x200006ec
 8003950:	2000068f 	.word	0x2000068f

08003954 <min>:
/* UTILS */

#include "utils.h"

int min(int a, int b){
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	6039      	str	r1, [r7, #0]
    return a < b ? a : b;
 800395e:	683a      	ldr	r2, [r7, #0]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4293      	cmp	r3, r2
 8003964:	bfa8      	it	ge
 8003966:	4613      	movge	r3, r2
}
 8003968:	4618      	mov	r0, r3
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	bc80      	pop	{r7}
 8003970:	4770      	bx	lr

08003972 <max>:

int max(int a, int b){
 8003972:	b480      	push	{r7}
 8003974:	b083      	sub	sp, #12
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]
 800397a:	6039      	str	r1, [r7, #0]
    return a > b ? a : b;
 800397c:	683a      	ldr	r2, [r7, #0]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4293      	cmp	r3, r2
 8003982:	bfb8      	it	lt
 8003984:	4613      	movlt	r3, r2
}
 8003986:	4618      	mov	r0, r3
 8003988:	370c      	adds	r7, #12
 800398a:	46bd      	mov	sp, r7
 800398c:	bc80      	pop	{r7}
 800398e:	4770      	bx	lr

08003990 <clip>:

int abs(int x){
    return x > 0 ? x : -x;
}

int clip(int a, int b, int c){
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	60f8      	str	r0, [r7, #12]
 8003998:	60b9      	str	r1, [r7, #8]
 800399a:	607a      	str	r2, [r7, #4]
    return min(max(a, b), c);
 800399c:	68b9      	ldr	r1, [r7, #8]
 800399e:	68f8      	ldr	r0, [r7, #12]
 80039a0:	f7ff ffe7 	bl	8003972 <max>
 80039a4:	4603      	mov	r3, r0
 80039a6:	6879      	ldr	r1, [r7, #4]
 80039a8:	4618      	mov	r0, r3
 80039aa:	f7ff ffd3 	bl	8003954 <min>
 80039ae:	4603      	mov	r3, r0
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3710      	adds	r7, #16
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <Wheel_init>:
void Wheel_init(
    struct Wheel *wheel,
    TIM_HandleTypeDef *pwm, uint16_t channel,
    GPIO_TypeDef *g1, uint16_t p1,
    GPIO_TypeDef *g2, uint16_t p2,
    TIM_HandleTypeDef *encoder){
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	60b9      	str	r1, [r7, #8]
 80039c2:	603b      	str	r3, [r7, #0]
 80039c4:	4613      	mov	r3, r2
 80039c6:	80fb      	strh	r3, [r7, #6]
            prescaler = 0
            period = 7199
        TIM(ENCODER):
            Tl1
    */
    wheel->pwm = pwm;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	68ba      	ldr	r2, [r7, #8]
 80039cc:	601a      	str	r2, [r3, #0]
    wheel->channel = channel;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	88fa      	ldrh	r2, [r7, #6]
 80039d2:	821a      	strh	r2, [r3, #16]
    wheel->g1 = g1;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	683a      	ldr	r2, [r7, #0]
 80039d8:	609a      	str	r2, [r3, #8]
    wheel->p1 = p1;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	8b3a      	ldrh	r2, [r7, #24]
 80039de:	825a      	strh	r2, [r3, #18]
    wheel->g2 = g2;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	69fa      	ldr	r2, [r7, #28]
 80039e4:	60da      	str	r2, [r3, #12]
    wheel->p2 = p2;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	8c3a      	ldrh	r2, [r7, #32]
 80039ea:	829a      	strh	r2, [r3, #20]
    wheel->encoder = encoder;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039f0:	605a      	str	r2, [r3, #4]
    HAL_GPIO_WritePin(g1, p1, GPIO_PIN_RESET);
 80039f2:	8b3b      	ldrh	r3, [r7, #24]
 80039f4:	2200      	movs	r2, #0
 80039f6:	4619      	mov	r1, r3
 80039f8:	6838      	ldr	r0, [r7, #0]
 80039fa:	f001 f871 	bl	8004ae0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(g2, p2, GPIO_PIN_RESET);
 80039fe:	8c3b      	ldrh	r3, [r7, #32]
 8003a00:	2200      	movs	r2, #0
 8003a02:	4619      	mov	r1, r3
 8003a04:	69f8      	ldr	r0, [r7, #28]
 8003a06:	f001 f86b 	bl	8004ae0 <HAL_GPIO_WritePin>
    HAL_TIM_PWM_Start(pwm, channel);
 8003a0a:	88fb      	ldrh	r3, [r7, #6]
 8003a0c:	4619      	mov	r1, r3
 8003a0e:	68b8      	ldr	r0, [r7, #8]
 8003a10:	f001 fdce 	bl	80055b0 <HAL_TIM_PWM_Start>
    Encoder_init(encoder);
 8003a14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a16:	f7fd ff31 	bl	800187c <Encoder_init>
    wheel->lasenc = 0;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	82da      	strh	r2, [r3, #22]
}
 8003a20:	bf00      	nop
 8003a22:	3710      	adds	r7, #16
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <Wheel_set>:

extern uint16_t speedlim;

void Wheel_set(struct Wheel *wheel, int wide){
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b082      	sub	sp, #8
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	6039      	str	r1, [r7, #0]
    /*
        wide: 0-7200
        way: >0=forward, <0=backward
    */
    HAL_GPIO_WritePin(wheel->g1, wheel->p1, wide > 0 ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6898      	ldr	r0, [r3, #8]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	8a59      	ldrh	r1, [r3, #18]
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	bfd4      	ite	le
 8003a40:	2301      	movle	r3, #1
 8003a42:	2300      	movgt	r3, #0
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	461a      	mov	r2, r3
 8003a48:	f001 f84a 	bl	8004ae0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(wheel->g2, wheel->p2, wide > 0 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	68d8      	ldr	r0, [r3, #12]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	8a99      	ldrh	r1, [r3, #20]
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	bfcc      	ite	gt
 8003a5a:	2301      	movgt	r3, #1
 8003a5c:	2300      	movle	r3, #0
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	461a      	mov	r2, r3
 8003a62:	f001 f83d 	bl	8004ae0 <HAL_GPIO_WritePin>
    __HAL_TIM_SET_COMPARE(wheel->pwm, wheel->channel, min(abs(wide), speedlim));
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	8a1b      	ldrh	r3, [r3, #16]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d10f      	bne.n	8003a8e <Wheel_set+0x66>
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	bfb8      	it	lt
 8003a74:	425b      	neglt	r3, r3
 8003a76:	4a25      	ldr	r2, [pc, #148]	; (8003b0c <Wheel_set+0xe4>)
 8003a78:	8812      	ldrh	r2, [r2, #0]
 8003a7a:	4611      	mov	r1, r2
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f7ff ff69 	bl	8003954 <min>
 8003a82:	4602      	mov	r2, r0
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003a8c:	e039      	b.n	8003b02 <Wheel_set+0xda>
    __HAL_TIM_SET_COMPARE(wheel->pwm, wheel->channel, min(abs(wide), speedlim));
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	8a1b      	ldrh	r3, [r3, #16]
 8003a92:	2b04      	cmp	r3, #4
 8003a94:	d110      	bne.n	8003ab8 <Wheel_set+0x90>
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	bfb8      	it	lt
 8003a9c:	425b      	neglt	r3, r3
 8003a9e:	4a1b      	ldr	r2, [pc, #108]	; (8003b0c <Wheel_set+0xe4>)
 8003aa0:	8812      	ldrh	r2, [r2, #0]
 8003aa2:	4611      	mov	r1, r2
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f7ff ff55 	bl	8003954 <min>
 8003aaa:	4601      	mov	r1, r0
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	460b      	mov	r3, r1
 8003ab4:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003ab6:	e024      	b.n	8003b02 <Wheel_set+0xda>
    __HAL_TIM_SET_COMPARE(wheel->pwm, wheel->channel, min(abs(wide), speedlim));
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	8a1b      	ldrh	r3, [r3, #16]
 8003abc:	2b08      	cmp	r3, #8
 8003abe:	d110      	bne.n	8003ae2 <Wheel_set+0xba>
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	bfb8      	it	lt
 8003ac6:	425b      	neglt	r3, r3
 8003ac8:	4a10      	ldr	r2, [pc, #64]	; (8003b0c <Wheel_set+0xe4>)
 8003aca:	8812      	ldrh	r2, [r2, #0]
 8003acc:	4611      	mov	r1, r2
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f7ff ff40 	bl	8003954 <min>
 8003ad4:	4601      	mov	r1, r0
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	460b      	mov	r3, r1
 8003ade:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8003ae0:	e00f      	b.n	8003b02 <Wheel_set+0xda>
    __HAL_TIM_SET_COMPARE(wheel->pwm, wheel->channel, min(abs(wide), speedlim));
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	bfb8      	it	lt
 8003ae8:	425b      	neglt	r3, r3
 8003aea:	4a08      	ldr	r2, [pc, #32]	; (8003b0c <Wheel_set+0xe4>)
 8003aec:	8812      	ldrh	r2, [r2, #0]
 8003aee:	4611      	mov	r1, r2
 8003af0:	4618      	mov	r0, r3
 8003af2:	f7ff ff2f 	bl	8003954 <min>
 8003af6:	4601      	mov	r1, r0
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	460b      	mov	r3, r1
 8003b00:	6413      	str	r3, [r2, #64]	; 0x40
}
 8003b02:	bf00      	nop
 8003b04:	3708      	adds	r7, #8
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	2000052e 	.word	0x2000052e

08003b10 <Wheel_getspeed>:

uint16_t Wheel_getspeed(struct Wheel *wheel){   // call one time per TimerIT
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
    uint16_t now = Encoder_read(wheel->encoder);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f7fd fec6 	bl	80018ae <Encoder_read>
 8003b22:	4603      	mov	r3, r0
 8003b24:	81fb      	strh	r3, [r7, #14]
    uint16_t res = now - wheel->lasenc;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	8adb      	ldrh	r3, [r3, #22]
 8003b2a:	89fa      	ldrh	r2, [r7, #14]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	81bb      	strh	r3, [r7, #12]
    wheel->lasenc = now;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	89fa      	ldrh	r2, [r7, #14]
 8003b34:	82da      	strh	r2, [r3, #22]
    return res;
 8003b36:	89bb      	ldrh	r3, [r7, #12]
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3710      	adds	r7, #16
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003b40:	480c      	ldr	r0, [pc, #48]	; (8003b74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003b42:	490d      	ldr	r1, [pc, #52]	; (8003b78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003b44:	4a0d      	ldr	r2, [pc, #52]	; (8003b7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003b46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b48:	e002      	b.n	8003b50 <LoopCopyDataInit>

08003b4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b4e:	3304      	adds	r3, #4

08003b50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b54:	d3f9      	bcc.n	8003b4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b56:	4a0a      	ldr	r2, [pc, #40]	; (8003b80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003b58:	4c0a      	ldr	r4, [pc, #40]	; (8003b84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003b5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b5c:	e001      	b.n	8003b62 <LoopFillZerobss>

08003b5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b60:	3204      	adds	r2, #4

08003b62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b64:	d3fb      	bcc.n	8003b5e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003b66:	f7ff fb6f 	bl	8003248 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003b6a:	f003 ffc3 	bl	8007af4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003b6e:	f7fd feab 	bl	80018c8 <main>
  bx lr
 8003b72:	4770      	bx	lr
  ldr r0, =_sdata
 8003b74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b78:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8003b7c:	0800d19c 	.word	0x0800d19c
  ldr r2, =_sbss
 8003b80:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8003b84:	20000740 	.word	0x20000740

08003b88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003b88:	e7fe      	b.n	8003b88 <ADC1_2_IRQHandler>
	...

08003b8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b90:	4b08      	ldr	r3, [pc, #32]	; (8003bb4 <HAL_Init+0x28>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a07      	ldr	r2, [pc, #28]	; (8003bb4 <HAL_Init+0x28>)
 8003b96:	f043 0310 	orr.w	r3, r3, #16
 8003b9a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b9c:	2003      	movs	r0, #3
 8003b9e:	f000 f947 	bl	8003e30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003ba2:	200f      	movs	r0, #15
 8003ba4:	f000 f808 	bl	8003bb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003ba8:	f7fe feec 	bl	8002984 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003bac:	2300      	movs	r3, #0
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	40022000 	.word	0x40022000

08003bb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003bc0:	4b12      	ldr	r3, [pc, #72]	; (8003c0c <HAL_InitTick+0x54>)
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	4b12      	ldr	r3, [pc, #72]	; (8003c10 <HAL_InitTick+0x58>)
 8003bc6:	781b      	ldrb	r3, [r3, #0]
 8003bc8:	4619      	mov	r1, r3
 8003bca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003bce:	fbb3 f3f1 	udiv	r3, r3, r1
 8003bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f000 f95f 	bl	8003e9a <HAL_SYSTICK_Config>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d001      	beq.n	8003be6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e00e      	b.n	8003c04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2b0f      	cmp	r3, #15
 8003bea:	d80a      	bhi.n	8003c02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003bec:	2200      	movs	r2, #0
 8003bee:	6879      	ldr	r1, [r7, #4]
 8003bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8003bf4:	f000 f927 	bl	8003e46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003bf8:	4a06      	ldr	r2, [pc, #24]	; (8003c14 <HAL_InitTick+0x5c>)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	e000      	b.n	8003c04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3708      	adds	r7, #8
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}
 8003c0c:	20000000 	.word	0x20000000
 8003c10:	2000000c 	.word	0x2000000c
 8003c14:	20000008 	.word	0x20000008

08003c18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c1c:	4b05      	ldr	r3, [pc, #20]	; (8003c34 <HAL_IncTick+0x1c>)
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	461a      	mov	r2, r3
 8003c22:	4b05      	ldr	r3, [pc, #20]	; (8003c38 <HAL_IncTick+0x20>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4413      	add	r3, r2
 8003c28:	4a03      	ldr	r2, [pc, #12]	; (8003c38 <HAL_IncTick+0x20>)
 8003c2a:	6013      	str	r3, [r2, #0]
}
 8003c2c:	bf00      	nop
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bc80      	pop	{r7}
 8003c32:	4770      	bx	lr
 8003c34:	2000000c 	.word	0x2000000c
 8003c38:	2000072c 	.word	0x2000072c

08003c3c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	af00      	add	r7, sp, #0
  return uwTick;
 8003c40:	4b02      	ldr	r3, [pc, #8]	; (8003c4c <HAL_GetTick+0x10>)
 8003c42:	681b      	ldr	r3, [r3, #0]
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bc80      	pop	{r7}
 8003c4a:	4770      	bx	lr
 8003c4c:	2000072c 	.word	0x2000072c

08003c50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b084      	sub	sp, #16
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c58:	f7ff fff0 	bl	8003c3c <HAL_GetTick>
 8003c5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c68:	d005      	beq.n	8003c76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c6a:	4b0a      	ldr	r3, [pc, #40]	; (8003c94 <HAL_Delay+0x44>)
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	461a      	mov	r2, r3
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	4413      	add	r3, r2
 8003c74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003c76:	bf00      	nop
 8003c78:	f7ff ffe0 	bl	8003c3c <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	68fa      	ldr	r2, [r7, #12]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d8f7      	bhi.n	8003c78 <HAL_Delay+0x28>
  {
  }
}
 8003c88:	bf00      	nop
 8003c8a:	bf00      	nop
 8003c8c:	3710      	adds	r7, #16
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	2000000c 	.word	0x2000000c

08003c98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b085      	sub	sp, #20
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f003 0307 	and.w	r3, r3, #7
 8003ca6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ca8:	4b0c      	ldr	r3, [pc, #48]	; (8003cdc <__NVIC_SetPriorityGrouping+0x44>)
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cae:	68ba      	ldr	r2, [r7, #8]
 8003cb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003cc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003cc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003cca:	4a04      	ldr	r2, [pc, #16]	; (8003cdc <__NVIC_SetPriorityGrouping+0x44>)
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	60d3      	str	r3, [r2, #12]
}
 8003cd0:	bf00      	nop
 8003cd2:	3714      	adds	r7, #20
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bc80      	pop	{r7}
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop
 8003cdc:	e000ed00 	.word	0xe000ed00

08003ce0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ce4:	4b04      	ldr	r3, [pc, #16]	; (8003cf8 <__NVIC_GetPriorityGrouping+0x18>)
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	0a1b      	lsrs	r3, r3, #8
 8003cea:	f003 0307 	and.w	r3, r3, #7
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bc80      	pop	{r7}
 8003cf4:	4770      	bx	lr
 8003cf6:	bf00      	nop
 8003cf8:	e000ed00 	.word	0xe000ed00

08003cfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	4603      	mov	r3, r0
 8003d04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	db0b      	blt.n	8003d26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d0e:	79fb      	ldrb	r3, [r7, #7]
 8003d10:	f003 021f 	and.w	r2, r3, #31
 8003d14:	4906      	ldr	r1, [pc, #24]	; (8003d30 <__NVIC_EnableIRQ+0x34>)
 8003d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d1a:	095b      	lsrs	r3, r3, #5
 8003d1c:	2001      	movs	r0, #1
 8003d1e:	fa00 f202 	lsl.w	r2, r0, r2
 8003d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003d26:	bf00      	nop
 8003d28:	370c      	adds	r7, #12
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bc80      	pop	{r7}
 8003d2e:	4770      	bx	lr
 8003d30:	e000e100 	.word	0xe000e100

08003d34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	6039      	str	r1, [r7, #0]
 8003d3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	db0a      	blt.n	8003d5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	b2da      	uxtb	r2, r3
 8003d4c:	490c      	ldr	r1, [pc, #48]	; (8003d80 <__NVIC_SetPriority+0x4c>)
 8003d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d52:	0112      	lsls	r2, r2, #4
 8003d54:	b2d2      	uxtb	r2, r2
 8003d56:	440b      	add	r3, r1
 8003d58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d5c:	e00a      	b.n	8003d74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	b2da      	uxtb	r2, r3
 8003d62:	4908      	ldr	r1, [pc, #32]	; (8003d84 <__NVIC_SetPriority+0x50>)
 8003d64:	79fb      	ldrb	r3, [r7, #7]
 8003d66:	f003 030f 	and.w	r3, r3, #15
 8003d6a:	3b04      	subs	r3, #4
 8003d6c:	0112      	lsls	r2, r2, #4
 8003d6e:	b2d2      	uxtb	r2, r2
 8003d70:	440b      	add	r3, r1
 8003d72:	761a      	strb	r2, [r3, #24]
}
 8003d74:	bf00      	nop
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bc80      	pop	{r7}
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	e000e100 	.word	0xe000e100
 8003d84:	e000ed00 	.word	0xe000ed00

08003d88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b089      	sub	sp, #36	; 0x24
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	60b9      	str	r1, [r7, #8]
 8003d92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f003 0307 	and.w	r3, r3, #7
 8003d9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	f1c3 0307 	rsb	r3, r3, #7
 8003da2:	2b04      	cmp	r3, #4
 8003da4:	bf28      	it	cs
 8003da6:	2304      	movcs	r3, #4
 8003da8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	3304      	adds	r3, #4
 8003dae:	2b06      	cmp	r3, #6
 8003db0:	d902      	bls.n	8003db8 <NVIC_EncodePriority+0x30>
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	3b03      	subs	r3, #3
 8003db6:	e000      	b.n	8003dba <NVIC_EncodePriority+0x32>
 8003db8:	2300      	movs	r3, #0
 8003dba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc6:	43da      	mvns	r2, r3
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	401a      	ands	r2, r3
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003dd0:	f04f 31ff 	mov.w	r1, #4294967295
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8003dda:	43d9      	mvns	r1, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003de0:	4313      	orrs	r3, r2
         );
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3724      	adds	r7, #36	; 0x24
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bc80      	pop	{r7}
 8003dea:	4770      	bx	lr

08003dec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b082      	sub	sp, #8
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	3b01      	subs	r3, #1
 8003df8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003dfc:	d301      	bcc.n	8003e02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e00f      	b.n	8003e22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e02:	4a0a      	ldr	r2, [pc, #40]	; (8003e2c <SysTick_Config+0x40>)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	3b01      	subs	r3, #1
 8003e08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e0a:	210f      	movs	r1, #15
 8003e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e10:	f7ff ff90 	bl	8003d34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e14:	4b05      	ldr	r3, [pc, #20]	; (8003e2c <SysTick_Config+0x40>)
 8003e16:	2200      	movs	r2, #0
 8003e18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e1a:	4b04      	ldr	r3, [pc, #16]	; (8003e2c <SysTick_Config+0x40>)
 8003e1c:	2207      	movs	r2, #7
 8003e1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e20:	2300      	movs	r3, #0
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3708      	adds	r7, #8
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	e000e010 	.word	0xe000e010

08003e30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b082      	sub	sp, #8
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f7ff ff2d 	bl	8003c98 <__NVIC_SetPriorityGrouping>
}
 8003e3e:	bf00      	nop
 8003e40:	3708      	adds	r7, #8
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}

08003e46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e46:	b580      	push	{r7, lr}
 8003e48:	b086      	sub	sp, #24
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	60b9      	str	r1, [r7, #8]
 8003e50:	607a      	str	r2, [r7, #4]
 8003e52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e54:	2300      	movs	r3, #0
 8003e56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e58:	f7ff ff42 	bl	8003ce0 <__NVIC_GetPriorityGrouping>
 8003e5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	68b9      	ldr	r1, [r7, #8]
 8003e62:	6978      	ldr	r0, [r7, #20]
 8003e64:	f7ff ff90 	bl	8003d88 <NVIC_EncodePriority>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e6e:	4611      	mov	r1, r2
 8003e70:	4618      	mov	r0, r3
 8003e72:	f7ff ff5f 	bl	8003d34 <__NVIC_SetPriority>
}
 8003e76:	bf00      	nop
 8003e78:	3718      	adds	r7, #24
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}

08003e7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e7e:	b580      	push	{r7, lr}
 8003e80:	b082      	sub	sp, #8
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	4603      	mov	r3, r0
 8003e86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f7ff ff35 	bl	8003cfc <__NVIC_EnableIRQ>
}
 8003e92:	bf00      	nop
 8003e94:	3708      	adds	r7, #8
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}

08003e9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e9a:	b580      	push	{r7, lr}
 8003e9c:	b082      	sub	sp, #8
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f7ff ffa2 	bl	8003dec <SysTick_Config>
 8003ea8:	4603      	mov	r3, r0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3708      	adds	r7, #8
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
	...

08003eb4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b085      	sub	sp, #20
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d101      	bne.n	8003eca <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e059      	b.n	8003f7e <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	461a      	mov	r2, r3
 8003ed0:	4b2d      	ldr	r3, [pc, #180]	; (8003f88 <HAL_DMA_Init+0xd4>)
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d80f      	bhi.n	8003ef6 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	461a      	mov	r2, r3
 8003edc:	4b2b      	ldr	r3, [pc, #172]	; (8003f8c <HAL_DMA_Init+0xd8>)
 8003ede:	4413      	add	r3, r2
 8003ee0:	4a2b      	ldr	r2, [pc, #172]	; (8003f90 <HAL_DMA_Init+0xdc>)
 8003ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee6:	091b      	lsrs	r3, r3, #4
 8003ee8:	009a      	lsls	r2, r3, #2
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a28      	ldr	r2, [pc, #160]	; (8003f94 <HAL_DMA_Init+0xe0>)
 8003ef2:	63da      	str	r2, [r3, #60]	; 0x3c
 8003ef4:	e00e      	b.n	8003f14 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	461a      	mov	r2, r3
 8003efc:	4b26      	ldr	r3, [pc, #152]	; (8003f98 <HAL_DMA_Init+0xe4>)
 8003efe:	4413      	add	r3, r2
 8003f00:	4a23      	ldr	r2, [pc, #140]	; (8003f90 <HAL_DMA_Init+0xdc>)
 8003f02:	fba2 2303 	umull	r2, r3, r2, r3
 8003f06:	091b      	lsrs	r3, r3, #4
 8003f08:	009a      	lsls	r2, r3, #2
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a22      	ldr	r2, [pc, #136]	; (8003f9c <HAL_DMA_Init+0xe8>)
 8003f12:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2202      	movs	r2, #2
 8003f18:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003f2a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003f2e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003f38:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f44:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	695b      	ldr	r3, [r3, #20]
 8003f4a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f50:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	69db      	ldr	r3, [r3, #28]
 8003f56:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003f58:	68fa      	ldr	r2, [r7, #12]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68fa      	ldr	r2, [r7, #12]
 8003f64:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003f7c:	2300      	movs	r3, #0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3714      	adds	r7, #20
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bc80      	pop	{r7}
 8003f86:	4770      	bx	lr
 8003f88:	40020407 	.word	0x40020407
 8003f8c:	bffdfff8 	.word	0xbffdfff8
 8003f90:	cccccccd 	.word	0xcccccccd
 8003f94:	40020000 	.word	0x40020000
 8003f98:	bffdfbf8 	.word	0xbffdfbf8
 8003f9c:	40020400 	.word	0x40020400

08003fa0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b086      	sub	sp, #24
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	60f8      	str	r0, [r7, #12]
 8003fa8:	60b9      	str	r1, [r7, #8]
 8003faa:	607a      	str	r2, [r7, #4]
 8003fac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d101      	bne.n	8003fc0 <HAL_DMA_Start_IT+0x20>
 8003fbc:	2302      	movs	r3, #2
 8003fbe:	e04a      	b.n	8004056 <HAL_DMA_Start_IT+0xb6>
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d13a      	bne.n	8004048 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2202      	movs	r2, #2
 8003fd6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f022 0201 	bic.w	r2, r2, #1
 8003fee:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	68b9      	ldr	r1, [r7, #8]
 8003ff6:	68f8      	ldr	r0, [r7, #12]
 8003ff8:	f000 fbb0 	bl	800475c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004000:	2b00      	cmp	r3, #0
 8004002:	d008      	beq.n	8004016 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f042 020e 	orr.w	r2, r2, #14
 8004012:	601a      	str	r2, [r3, #0]
 8004014:	e00f      	b.n	8004036 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f022 0204 	bic.w	r2, r2, #4
 8004024:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f042 020a 	orr.w	r2, r2, #10
 8004034:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f042 0201 	orr.w	r2, r2, #1
 8004044:	601a      	str	r2, [r3, #0]
 8004046:	e005      	b.n	8004054 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2200      	movs	r2, #0
 800404c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004050:	2302      	movs	r3, #2
 8004052:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8004054:	7dfb      	ldrb	r3, [r7, #23]
}
 8004056:	4618      	mov	r0, r3
 8004058:	3718      	adds	r7, #24
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}

0800405e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800405e:	b480      	push	{r7}
 8004060:	b085      	sub	sp, #20
 8004062:	af00      	add	r7, sp, #0
 8004064:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004066:	2300      	movs	r3, #0
 8004068:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004070:	2b02      	cmp	r3, #2
 8004072:	d008      	beq.n	8004086 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2204      	movs	r2, #4
 8004078:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e020      	b.n	80040c8 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f022 020e 	bic.w	r2, r2, #14
 8004094:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f022 0201 	bic.w	r2, r2, #1
 80040a4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ae:	2101      	movs	r1, #1
 80040b0:	fa01 f202 	lsl.w	r2, r1, r2
 80040b4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2201      	movs	r2, #1
 80040ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80040c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3714      	adds	r7, #20
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bc80      	pop	{r7}
 80040d0:	4770      	bx	lr
	...

080040d4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b084      	sub	sp, #16
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040dc:	2300      	movs	r3, #0
 80040de:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d005      	beq.n	80040f6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2204      	movs	r2, #4
 80040ee:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	73fb      	strb	r3, [r7, #15]
 80040f4:	e0d6      	b.n	80042a4 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f022 020e 	bic.w	r2, r2, #14
 8004104:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f022 0201 	bic.w	r2, r2, #1
 8004114:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	461a      	mov	r2, r3
 800411c:	4b64      	ldr	r3, [pc, #400]	; (80042b0 <HAL_DMA_Abort_IT+0x1dc>)
 800411e:	429a      	cmp	r2, r3
 8004120:	d958      	bls.n	80041d4 <HAL_DMA_Abort_IT+0x100>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a63      	ldr	r2, [pc, #396]	; (80042b4 <HAL_DMA_Abort_IT+0x1e0>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d04f      	beq.n	80041cc <HAL_DMA_Abort_IT+0xf8>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a61      	ldr	r2, [pc, #388]	; (80042b8 <HAL_DMA_Abort_IT+0x1e4>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d048      	beq.n	80041c8 <HAL_DMA_Abort_IT+0xf4>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a60      	ldr	r2, [pc, #384]	; (80042bc <HAL_DMA_Abort_IT+0x1e8>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d040      	beq.n	80041c2 <HAL_DMA_Abort_IT+0xee>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a5e      	ldr	r2, [pc, #376]	; (80042c0 <HAL_DMA_Abort_IT+0x1ec>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d038      	beq.n	80041bc <HAL_DMA_Abort_IT+0xe8>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a5d      	ldr	r2, [pc, #372]	; (80042c4 <HAL_DMA_Abort_IT+0x1f0>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d030      	beq.n	80041b6 <HAL_DMA_Abort_IT+0xe2>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a5b      	ldr	r2, [pc, #364]	; (80042c8 <HAL_DMA_Abort_IT+0x1f4>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d028      	beq.n	80041b0 <HAL_DMA_Abort_IT+0xdc>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a53      	ldr	r2, [pc, #332]	; (80042b0 <HAL_DMA_Abort_IT+0x1dc>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d020      	beq.n	80041aa <HAL_DMA_Abort_IT+0xd6>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a57      	ldr	r2, [pc, #348]	; (80042cc <HAL_DMA_Abort_IT+0x1f8>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d019      	beq.n	80041a6 <HAL_DMA_Abort_IT+0xd2>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a56      	ldr	r2, [pc, #344]	; (80042d0 <HAL_DMA_Abort_IT+0x1fc>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d012      	beq.n	80041a2 <HAL_DMA_Abort_IT+0xce>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a54      	ldr	r2, [pc, #336]	; (80042d4 <HAL_DMA_Abort_IT+0x200>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d00a      	beq.n	800419c <HAL_DMA_Abort_IT+0xc8>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a53      	ldr	r2, [pc, #332]	; (80042d8 <HAL_DMA_Abort_IT+0x204>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d102      	bne.n	8004196 <HAL_DMA_Abort_IT+0xc2>
 8004190:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004194:	e01b      	b.n	80041ce <HAL_DMA_Abort_IT+0xfa>
 8004196:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800419a:	e018      	b.n	80041ce <HAL_DMA_Abort_IT+0xfa>
 800419c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80041a0:	e015      	b.n	80041ce <HAL_DMA_Abort_IT+0xfa>
 80041a2:	2310      	movs	r3, #16
 80041a4:	e013      	b.n	80041ce <HAL_DMA_Abort_IT+0xfa>
 80041a6:	2301      	movs	r3, #1
 80041a8:	e011      	b.n	80041ce <HAL_DMA_Abort_IT+0xfa>
 80041aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80041ae:	e00e      	b.n	80041ce <HAL_DMA_Abort_IT+0xfa>
 80041b0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80041b4:	e00b      	b.n	80041ce <HAL_DMA_Abort_IT+0xfa>
 80041b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80041ba:	e008      	b.n	80041ce <HAL_DMA_Abort_IT+0xfa>
 80041bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80041c0:	e005      	b.n	80041ce <HAL_DMA_Abort_IT+0xfa>
 80041c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80041c6:	e002      	b.n	80041ce <HAL_DMA_Abort_IT+0xfa>
 80041c8:	2310      	movs	r3, #16
 80041ca:	e000      	b.n	80041ce <HAL_DMA_Abort_IT+0xfa>
 80041cc:	2301      	movs	r3, #1
 80041ce:	4a43      	ldr	r2, [pc, #268]	; (80042dc <HAL_DMA_Abort_IT+0x208>)
 80041d0:	6053      	str	r3, [r2, #4]
 80041d2:	e057      	b.n	8004284 <HAL_DMA_Abort_IT+0x1b0>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a36      	ldr	r2, [pc, #216]	; (80042b4 <HAL_DMA_Abort_IT+0x1e0>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d04f      	beq.n	800427e <HAL_DMA_Abort_IT+0x1aa>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a35      	ldr	r2, [pc, #212]	; (80042b8 <HAL_DMA_Abort_IT+0x1e4>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d048      	beq.n	800427a <HAL_DMA_Abort_IT+0x1a6>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a33      	ldr	r2, [pc, #204]	; (80042bc <HAL_DMA_Abort_IT+0x1e8>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d040      	beq.n	8004274 <HAL_DMA_Abort_IT+0x1a0>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a32      	ldr	r2, [pc, #200]	; (80042c0 <HAL_DMA_Abort_IT+0x1ec>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d038      	beq.n	800426e <HAL_DMA_Abort_IT+0x19a>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a30      	ldr	r2, [pc, #192]	; (80042c4 <HAL_DMA_Abort_IT+0x1f0>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d030      	beq.n	8004268 <HAL_DMA_Abort_IT+0x194>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a2f      	ldr	r2, [pc, #188]	; (80042c8 <HAL_DMA_Abort_IT+0x1f4>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d028      	beq.n	8004262 <HAL_DMA_Abort_IT+0x18e>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a26      	ldr	r2, [pc, #152]	; (80042b0 <HAL_DMA_Abort_IT+0x1dc>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d020      	beq.n	800425c <HAL_DMA_Abort_IT+0x188>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a2b      	ldr	r2, [pc, #172]	; (80042cc <HAL_DMA_Abort_IT+0x1f8>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d019      	beq.n	8004258 <HAL_DMA_Abort_IT+0x184>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a29      	ldr	r2, [pc, #164]	; (80042d0 <HAL_DMA_Abort_IT+0x1fc>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d012      	beq.n	8004254 <HAL_DMA_Abort_IT+0x180>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a28      	ldr	r2, [pc, #160]	; (80042d4 <HAL_DMA_Abort_IT+0x200>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d00a      	beq.n	800424e <HAL_DMA_Abort_IT+0x17a>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a26      	ldr	r2, [pc, #152]	; (80042d8 <HAL_DMA_Abort_IT+0x204>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d102      	bne.n	8004248 <HAL_DMA_Abort_IT+0x174>
 8004242:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004246:	e01b      	b.n	8004280 <HAL_DMA_Abort_IT+0x1ac>
 8004248:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800424c:	e018      	b.n	8004280 <HAL_DMA_Abort_IT+0x1ac>
 800424e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004252:	e015      	b.n	8004280 <HAL_DMA_Abort_IT+0x1ac>
 8004254:	2310      	movs	r3, #16
 8004256:	e013      	b.n	8004280 <HAL_DMA_Abort_IT+0x1ac>
 8004258:	2301      	movs	r3, #1
 800425a:	e011      	b.n	8004280 <HAL_DMA_Abort_IT+0x1ac>
 800425c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004260:	e00e      	b.n	8004280 <HAL_DMA_Abort_IT+0x1ac>
 8004262:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004266:	e00b      	b.n	8004280 <HAL_DMA_Abort_IT+0x1ac>
 8004268:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800426c:	e008      	b.n	8004280 <HAL_DMA_Abort_IT+0x1ac>
 800426e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004272:	e005      	b.n	8004280 <HAL_DMA_Abort_IT+0x1ac>
 8004274:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004278:	e002      	b.n	8004280 <HAL_DMA_Abort_IT+0x1ac>
 800427a:	2310      	movs	r3, #16
 800427c:	e000      	b.n	8004280 <HAL_DMA_Abort_IT+0x1ac>
 800427e:	2301      	movs	r3, #1
 8004280:	4a17      	ldr	r2, [pc, #92]	; (80042e0 <HAL_DMA_Abort_IT+0x20c>)
 8004282:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004298:	2b00      	cmp	r3, #0
 800429a:	d003      	beq.n	80042a4 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	4798      	blx	r3
    } 
  }
  return status;
 80042a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3710      	adds	r7, #16
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	40020080 	.word	0x40020080
 80042b4:	40020008 	.word	0x40020008
 80042b8:	4002001c 	.word	0x4002001c
 80042bc:	40020030 	.word	0x40020030
 80042c0:	40020044 	.word	0x40020044
 80042c4:	40020058 	.word	0x40020058
 80042c8:	4002006c 	.word	0x4002006c
 80042cc:	40020408 	.word	0x40020408
 80042d0:	4002041c 	.word	0x4002041c
 80042d4:	40020430 	.word	0x40020430
 80042d8:	40020444 	.word	0x40020444
 80042dc:	40020400 	.word	0x40020400
 80042e0:	40020000 	.word	0x40020000

080042e4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b084      	sub	sp, #16
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004300:	2204      	movs	r2, #4
 8004302:	409a      	lsls	r2, r3
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	4013      	ands	r3, r2
 8004308:	2b00      	cmp	r3, #0
 800430a:	f000 80f1 	beq.w	80044f0 <HAL_DMA_IRQHandler+0x20c>
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	f003 0304 	and.w	r3, r3, #4
 8004314:	2b00      	cmp	r3, #0
 8004316:	f000 80eb 	beq.w	80044f0 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 0320 	and.w	r3, r3, #32
 8004324:	2b00      	cmp	r3, #0
 8004326:	d107      	bne.n	8004338 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f022 0204 	bic.w	r2, r2, #4
 8004336:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	461a      	mov	r2, r3
 800433e:	4b5f      	ldr	r3, [pc, #380]	; (80044bc <HAL_DMA_IRQHandler+0x1d8>)
 8004340:	429a      	cmp	r2, r3
 8004342:	d958      	bls.n	80043f6 <HAL_DMA_IRQHandler+0x112>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a5d      	ldr	r2, [pc, #372]	; (80044c0 <HAL_DMA_IRQHandler+0x1dc>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d04f      	beq.n	80043ee <HAL_DMA_IRQHandler+0x10a>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a5c      	ldr	r2, [pc, #368]	; (80044c4 <HAL_DMA_IRQHandler+0x1e0>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d048      	beq.n	80043ea <HAL_DMA_IRQHandler+0x106>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a5a      	ldr	r2, [pc, #360]	; (80044c8 <HAL_DMA_IRQHandler+0x1e4>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d040      	beq.n	80043e4 <HAL_DMA_IRQHandler+0x100>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a59      	ldr	r2, [pc, #356]	; (80044cc <HAL_DMA_IRQHandler+0x1e8>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d038      	beq.n	80043de <HAL_DMA_IRQHandler+0xfa>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a57      	ldr	r2, [pc, #348]	; (80044d0 <HAL_DMA_IRQHandler+0x1ec>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d030      	beq.n	80043d8 <HAL_DMA_IRQHandler+0xf4>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a56      	ldr	r2, [pc, #344]	; (80044d4 <HAL_DMA_IRQHandler+0x1f0>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d028      	beq.n	80043d2 <HAL_DMA_IRQHandler+0xee>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a4d      	ldr	r2, [pc, #308]	; (80044bc <HAL_DMA_IRQHandler+0x1d8>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d020      	beq.n	80043cc <HAL_DMA_IRQHandler+0xe8>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a52      	ldr	r2, [pc, #328]	; (80044d8 <HAL_DMA_IRQHandler+0x1f4>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d019      	beq.n	80043c8 <HAL_DMA_IRQHandler+0xe4>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a50      	ldr	r2, [pc, #320]	; (80044dc <HAL_DMA_IRQHandler+0x1f8>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d012      	beq.n	80043c4 <HAL_DMA_IRQHandler+0xe0>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a4f      	ldr	r2, [pc, #316]	; (80044e0 <HAL_DMA_IRQHandler+0x1fc>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d00a      	beq.n	80043be <HAL_DMA_IRQHandler+0xda>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a4d      	ldr	r2, [pc, #308]	; (80044e4 <HAL_DMA_IRQHandler+0x200>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d102      	bne.n	80043b8 <HAL_DMA_IRQHandler+0xd4>
 80043b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80043b6:	e01b      	b.n	80043f0 <HAL_DMA_IRQHandler+0x10c>
 80043b8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80043bc:	e018      	b.n	80043f0 <HAL_DMA_IRQHandler+0x10c>
 80043be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80043c2:	e015      	b.n	80043f0 <HAL_DMA_IRQHandler+0x10c>
 80043c4:	2340      	movs	r3, #64	; 0x40
 80043c6:	e013      	b.n	80043f0 <HAL_DMA_IRQHandler+0x10c>
 80043c8:	2304      	movs	r3, #4
 80043ca:	e011      	b.n	80043f0 <HAL_DMA_IRQHandler+0x10c>
 80043cc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80043d0:	e00e      	b.n	80043f0 <HAL_DMA_IRQHandler+0x10c>
 80043d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80043d6:	e00b      	b.n	80043f0 <HAL_DMA_IRQHandler+0x10c>
 80043d8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80043dc:	e008      	b.n	80043f0 <HAL_DMA_IRQHandler+0x10c>
 80043de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80043e2:	e005      	b.n	80043f0 <HAL_DMA_IRQHandler+0x10c>
 80043e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80043e8:	e002      	b.n	80043f0 <HAL_DMA_IRQHandler+0x10c>
 80043ea:	2340      	movs	r3, #64	; 0x40
 80043ec:	e000      	b.n	80043f0 <HAL_DMA_IRQHandler+0x10c>
 80043ee:	2304      	movs	r3, #4
 80043f0:	4a3d      	ldr	r2, [pc, #244]	; (80044e8 <HAL_DMA_IRQHandler+0x204>)
 80043f2:	6053      	str	r3, [r2, #4]
 80043f4:	e057      	b.n	80044a6 <HAL_DMA_IRQHandler+0x1c2>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a31      	ldr	r2, [pc, #196]	; (80044c0 <HAL_DMA_IRQHandler+0x1dc>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d04f      	beq.n	80044a0 <HAL_DMA_IRQHandler+0x1bc>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a2f      	ldr	r2, [pc, #188]	; (80044c4 <HAL_DMA_IRQHandler+0x1e0>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d048      	beq.n	800449c <HAL_DMA_IRQHandler+0x1b8>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a2e      	ldr	r2, [pc, #184]	; (80044c8 <HAL_DMA_IRQHandler+0x1e4>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d040      	beq.n	8004496 <HAL_DMA_IRQHandler+0x1b2>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a2c      	ldr	r2, [pc, #176]	; (80044cc <HAL_DMA_IRQHandler+0x1e8>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d038      	beq.n	8004490 <HAL_DMA_IRQHandler+0x1ac>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a2b      	ldr	r2, [pc, #172]	; (80044d0 <HAL_DMA_IRQHandler+0x1ec>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d030      	beq.n	800448a <HAL_DMA_IRQHandler+0x1a6>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a29      	ldr	r2, [pc, #164]	; (80044d4 <HAL_DMA_IRQHandler+0x1f0>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d028      	beq.n	8004484 <HAL_DMA_IRQHandler+0x1a0>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a21      	ldr	r2, [pc, #132]	; (80044bc <HAL_DMA_IRQHandler+0x1d8>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d020      	beq.n	800447e <HAL_DMA_IRQHandler+0x19a>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a25      	ldr	r2, [pc, #148]	; (80044d8 <HAL_DMA_IRQHandler+0x1f4>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d019      	beq.n	800447a <HAL_DMA_IRQHandler+0x196>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a24      	ldr	r2, [pc, #144]	; (80044dc <HAL_DMA_IRQHandler+0x1f8>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d012      	beq.n	8004476 <HAL_DMA_IRQHandler+0x192>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a22      	ldr	r2, [pc, #136]	; (80044e0 <HAL_DMA_IRQHandler+0x1fc>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d00a      	beq.n	8004470 <HAL_DMA_IRQHandler+0x18c>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a21      	ldr	r2, [pc, #132]	; (80044e4 <HAL_DMA_IRQHandler+0x200>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d102      	bne.n	800446a <HAL_DMA_IRQHandler+0x186>
 8004464:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004468:	e01b      	b.n	80044a2 <HAL_DMA_IRQHandler+0x1be>
 800446a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800446e:	e018      	b.n	80044a2 <HAL_DMA_IRQHandler+0x1be>
 8004470:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004474:	e015      	b.n	80044a2 <HAL_DMA_IRQHandler+0x1be>
 8004476:	2340      	movs	r3, #64	; 0x40
 8004478:	e013      	b.n	80044a2 <HAL_DMA_IRQHandler+0x1be>
 800447a:	2304      	movs	r3, #4
 800447c:	e011      	b.n	80044a2 <HAL_DMA_IRQHandler+0x1be>
 800447e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004482:	e00e      	b.n	80044a2 <HAL_DMA_IRQHandler+0x1be>
 8004484:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004488:	e00b      	b.n	80044a2 <HAL_DMA_IRQHandler+0x1be>
 800448a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800448e:	e008      	b.n	80044a2 <HAL_DMA_IRQHandler+0x1be>
 8004490:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004494:	e005      	b.n	80044a2 <HAL_DMA_IRQHandler+0x1be>
 8004496:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800449a:	e002      	b.n	80044a2 <HAL_DMA_IRQHandler+0x1be>
 800449c:	2340      	movs	r3, #64	; 0x40
 800449e:	e000      	b.n	80044a2 <HAL_DMA_IRQHandler+0x1be>
 80044a0:	2304      	movs	r3, #4
 80044a2:	4a12      	ldr	r2, [pc, #72]	; (80044ec <HAL_DMA_IRQHandler+0x208>)
 80044a4:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	f000 8136 	beq.w	800471c <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80044b8:	e130      	b.n	800471c <HAL_DMA_IRQHandler+0x438>
 80044ba:	bf00      	nop
 80044bc:	40020080 	.word	0x40020080
 80044c0:	40020008 	.word	0x40020008
 80044c4:	4002001c 	.word	0x4002001c
 80044c8:	40020030 	.word	0x40020030
 80044cc:	40020044 	.word	0x40020044
 80044d0:	40020058 	.word	0x40020058
 80044d4:	4002006c 	.word	0x4002006c
 80044d8:	40020408 	.word	0x40020408
 80044dc:	4002041c 	.word	0x4002041c
 80044e0:	40020430 	.word	0x40020430
 80044e4:	40020444 	.word	0x40020444
 80044e8:	40020400 	.word	0x40020400
 80044ec:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f4:	2202      	movs	r2, #2
 80044f6:	409a      	lsls	r2, r3
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	4013      	ands	r3, r2
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	f000 80dd 	beq.w	80046bc <HAL_DMA_IRQHandler+0x3d8>
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	f003 0302 	and.w	r3, r3, #2
 8004508:	2b00      	cmp	r3, #0
 800450a:	f000 80d7 	beq.w	80046bc <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 0320 	and.w	r3, r3, #32
 8004518:	2b00      	cmp	r3, #0
 800451a:	d10b      	bne.n	8004534 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f022 020a 	bic.w	r2, r2, #10
 800452a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	461a      	mov	r2, r3
 800453a:	4b7b      	ldr	r3, [pc, #492]	; (8004728 <HAL_DMA_IRQHandler+0x444>)
 800453c:	429a      	cmp	r2, r3
 800453e:	d958      	bls.n	80045f2 <HAL_DMA_IRQHandler+0x30e>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a79      	ldr	r2, [pc, #484]	; (800472c <HAL_DMA_IRQHandler+0x448>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d04f      	beq.n	80045ea <HAL_DMA_IRQHandler+0x306>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a78      	ldr	r2, [pc, #480]	; (8004730 <HAL_DMA_IRQHandler+0x44c>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d048      	beq.n	80045e6 <HAL_DMA_IRQHandler+0x302>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a76      	ldr	r2, [pc, #472]	; (8004734 <HAL_DMA_IRQHandler+0x450>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d040      	beq.n	80045e0 <HAL_DMA_IRQHandler+0x2fc>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a75      	ldr	r2, [pc, #468]	; (8004738 <HAL_DMA_IRQHandler+0x454>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d038      	beq.n	80045da <HAL_DMA_IRQHandler+0x2f6>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a73      	ldr	r2, [pc, #460]	; (800473c <HAL_DMA_IRQHandler+0x458>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d030      	beq.n	80045d4 <HAL_DMA_IRQHandler+0x2f0>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a72      	ldr	r2, [pc, #456]	; (8004740 <HAL_DMA_IRQHandler+0x45c>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d028      	beq.n	80045ce <HAL_DMA_IRQHandler+0x2ea>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a69      	ldr	r2, [pc, #420]	; (8004728 <HAL_DMA_IRQHandler+0x444>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d020      	beq.n	80045c8 <HAL_DMA_IRQHandler+0x2e4>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a6e      	ldr	r2, [pc, #440]	; (8004744 <HAL_DMA_IRQHandler+0x460>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d019      	beq.n	80045c4 <HAL_DMA_IRQHandler+0x2e0>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a6c      	ldr	r2, [pc, #432]	; (8004748 <HAL_DMA_IRQHandler+0x464>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d012      	beq.n	80045c0 <HAL_DMA_IRQHandler+0x2dc>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a6b      	ldr	r2, [pc, #428]	; (800474c <HAL_DMA_IRQHandler+0x468>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d00a      	beq.n	80045ba <HAL_DMA_IRQHandler+0x2d6>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a69      	ldr	r2, [pc, #420]	; (8004750 <HAL_DMA_IRQHandler+0x46c>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d102      	bne.n	80045b4 <HAL_DMA_IRQHandler+0x2d0>
 80045ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80045b2:	e01b      	b.n	80045ec <HAL_DMA_IRQHandler+0x308>
 80045b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80045b8:	e018      	b.n	80045ec <HAL_DMA_IRQHandler+0x308>
 80045ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80045be:	e015      	b.n	80045ec <HAL_DMA_IRQHandler+0x308>
 80045c0:	2320      	movs	r3, #32
 80045c2:	e013      	b.n	80045ec <HAL_DMA_IRQHandler+0x308>
 80045c4:	2302      	movs	r3, #2
 80045c6:	e011      	b.n	80045ec <HAL_DMA_IRQHandler+0x308>
 80045c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80045cc:	e00e      	b.n	80045ec <HAL_DMA_IRQHandler+0x308>
 80045ce:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80045d2:	e00b      	b.n	80045ec <HAL_DMA_IRQHandler+0x308>
 80045d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80045d8:	e008      	b.n	80045ec <HAL_DMA_IRQHandler+0x308>
 80045da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80045de:	e005      	b.n	80045ec <HAL_DMA_IRQHandler+0x308>
 80045e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80045e4:	e002      	b.n	80045ec <HAL_DMA_IRQHandler+0x308>
 80045e6:	2320      	movs	r3, #32
 80045e8:	e000      	b.n	80045ec <HAL_DMA_IRQHandler+0x308>
 80045ea:	2302      	movs	r3, #2
 80045ec:	4a59      	ldr	r2, [pc, #356]	; (8004754 <HAL_DMA_IRQHandler+0x470>)
 80045ee:	6053      	str	r3, [r2, #4]
 80045f0:	e057      	b.n	80046a2 <HAL_DMA_IRQHandler+0x3be>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a4d      	ldr	r2, [pc, #308]	; (800472c <HAL_DMA_IRQHandler+0x448>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d04f      	beq.n	800469c <HAL_DMA_IRQHandler+0x3b8>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a4b      	ldr	r2, [pc, #300]	; (8004730 <HAL_DMA_IRQHandler+0x44c>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d048      	beq.n	8004698 <HAL_DMA_IRQHandler+0x3b4>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a4a      	ldr	r2, [pc, #296]	; (8004734 <HAL_DMA_IRQHandler+0x450>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d040      	beq.n	8004692 <HAL_DMA_IRQHandler+0x3ae>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a48      	ldr	r2, [pc, #288]	; (8004738 <HAL_DMA_IRQHandler+0x454>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d038      	beq.n	800468c <HAL_DMA_IRQHandler+0x3a8>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a47      	ldr	r2, [pc, #284]	; (800473c <HAL_DMA_IRQHandler+0x458>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d030      	beq.n	8004686 <HAL_DMA_IRQHandler+0x3a2>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a45      	ldr	r2, [pc, #276]	; (8004740 <HAL_DMA_IRQHandler+0x45c>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d028      	beq.n	8004680 <HAL_DMA_IRQHandler+0x39c>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a3d      	ldr	r2, [pc, #244]	; (8004728 <HAL_DMA_IRQHandler+0x444>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d020      	beq.n	800467a <HAL_DMA_IRQHandler+0x396>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a41      	ldr	r2, [pc, #260]	; (8004744 <HAL_DMA_IRQHandler+0x460>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d019      	beq.n	8004676 <HAL_DMA_IRQHandler+0x392>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a40      	ldr	r2, [pc, #256]	; (8004748 <HAL_DMA_IRQHandler+0x464>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d012      	beq.n	8004672 <HAL_DMA_IRQHandler+0x38e>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a3e      	ldr	r2, [pc, #248]	; (800474c <HAL_DMA_IRQHandler+0x468>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d00a      	beq.n	800466c <HAL_DMA_IRQHandler+0x388>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a3d      	ldr	r2, [pc, #244]	; (8004750 <HAL_DMA_IRQHandler+0x46c>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d102      	bne.n	8004666 <HAL_DMA_IRQHandler+0x382>
 8004660:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004664:	e01b      	b.n	800469e <HAL_DMA_IRQHandler+0x3ba>
 8004666:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800466a:	e018      	b.n	800469e <HAL_DMA_IRQHandler+0x3ba>
 800466c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004670:	e015      	b.n	800469e <HAL_DMA_IRQHandler+0x3ba>
 8004672:	2320      	movs	r3, #32
 8004674:	e013      	b.n	800469e <HAL_DMA_IRQHandler+0x3ba>
 8004676:	2302      	movs	r3, #2
 8004678:	e011      	b.n	800469e <HAL_DMA_IRQHandler+0x3ba>
 800467a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800467e:	e00e      	b.n	800469e <HAL_DMA_IRQHandler+0x3ba>
 8004680:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004684:	e00b      	b.n	800469e <HAL_DMA_IRQHandler+0x3ba>
 8004686:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800468a:	e008      	b.n	800469e <HAL_DMA_IRQHandler+0x3ba>
 800468c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004690:	e005      	b.n	800469e <HAL_DMA_IRQHandler+0x3ba>
 8004692:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004696:	e002      	b.n	800469e <HAL_DMA_IRQHandler+0x3ba>
 8004698:	2320      	movs	r3, #32
 800469a:	e000      	b.n	800469e <HAL_DMA_IRQHandler+0x3ba>
 800469c:	2302      	movs	r3, #2
 800469e:	4a2e      	ldr	r2, [pc, #184]	; (8004758 <HAL_DMA_IRQHandler+0x474>)
 80046a0:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d034      	beq.n	800471c <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80046ba:	e02f      	b.n	800471c <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c0:	2208      	movs	r2, #8
 80046c2:	409a      	lsls	r2, r3
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	4013      	ands	r3, r2
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d028      	beq.n	800471e <HAL_DMA_IRQHandler+0x43a>
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	f003 0308 	and.w	r3, r3, #8
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d023      	beq.n	800471e <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f022 020e 	bic.w	r2, r2, #14
 80046e4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046ee:	2101      	movs	r1, #1
 80046f0:	fa01 f202 	lsl.w	r2, r1, r2
 80046f4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2201      	movs	r2, #1
 80046fa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2200      	movs	r2, #0
 8004708:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004710:	2b00      	cmp	r3, #0
 8004712:	d004      	beq.n	800471e <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	4798      	blx	r3
    }
  }
  return;
 800471c:	bf00      	nop
 800471e:	bf00      	nop
}
 8004720:	3710      	adds	r7, #16
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	40020080 	.word	0x40020080
 800472c:	40020008 	.word	0x40020008
 8004730:	4002001c 	.word	0x4002001c
 8004734:	40020030 	.word	0x40020030
 8004738:	40020044 	.word	0x40020044
 800473c:	40020058 	.word	0x40020058
 8004740:	4002006c 	.word	0x4002006c
 8004744:	40020408 	.word	0x40020408
 8004748:	4002041c 	.word	0x4002041c
 800474c:	40020430 	.word	0x40020430
 8004750:	40020444 	.word	0x40020444
 8004754:	40020400 	.word	0x40020400
 8004758:	40020000 	.word	0x40020000

0800475c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800475c:	b480      	push	{r7}
 800475e:	b085      	sub	sp, #20
 8004760:	af00      	add	r7, sp, #0
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	60b9      	str	r1, [r7, #8]
 8004766:	607a      	str	r2, [r7, #4]
 8004768:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004772:	2101      	movs	r1, #1
 8004774:	fa01 f202 	lsl.w	r2, r1, r2
 8004778:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	683a      	ldr	r2, [r7, #0]
 8004780:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	2b10      	cmp	r3, #16
 8004788:	d108      	bne.n	800479c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	68ba      	ldr	r2, [r7, #8]
 8004798:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800479a:	e007      	b.n	80047ac <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	68ba      	ldr	r2, [r7, #8]
 80047a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	60da      	str	r2, [r3, #12]
}
 80047ac:	bf00      	nop
 80047ae:	3714      	adds	r7, #20
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bc80      	pop	{r7}
 80047b4:	4770      	bx	lr
	...

080047b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b08b      	sub	sp, #44	; 0x2c
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80047c2:	2300      	movs	r3, #0
 80047c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80047c6:	2300      	movs	r3, #0
 80047c8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80047ca:	e179      	b.n	8004ac0 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80047cc:	2201      	movs	r2, #1
 80047ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d0:	fa02 f303 	lsl.w	r3, r2, r3
 80047d4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	69fa      	ldr	r2, [r7, #28]
 80047dc:	4013      	ands	r3, r2
 80047de:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80047e0:	69ba      	ldr	r2, [r7, #24]
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	429a      	cmp	r2, r3
 80047e6:	f040 8168 	bne.w	8004aba <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	4a96      	ldr	r2, [pc, #600]	; (8004a48 <HAL_GPIO_Init+0x290>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d05e      	beq.n	80048b2 <HAL_GPIO_Init+0xfa>
 80047f4:	4a94      	ldr	r2, [pc, #592]	; (8004a48 <HAL_GPIO_Init+0x290>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d875      	bhi.n	80048e6 <HAL_GPIO_Init+0x12e>
 80047fa:	4a94      	ldr	r2, [pc, #592]	; (8004a4c <HAL_GPIO_Init+0x294>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d058      	beq.n	80048b2 <HAL_GPIO_Init+0xfa>
 8004800:	4a92      	ldr	r2, [pc, #584]	; (8004a4c <HAL_GPIO_Init+0x294>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d86f      	bhi.n	80048e6 <HAL_GPIO_Init+0x12e>
 8004806:	4a92      	ldr	r2, [pc, #584]	; (8004a50 <HAL_GPIO_Init+0x298>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d052      	beq.n	80048b2 <HAL_GPIO_Init+0xfa>
 800480c:	4a90      	ldr	r2, [pc, #576]	; (8004a50 <HAL_GPIO_Init+0x298>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d869      	bhi.n	80048e6 <HAL_GPIO_Init+0x12e>
 8004812:	4a90      	ldr	r2, [pc, #576]	; (8004a54 <HAL_GPIO_Init+0x29c>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d04c      	beq.n	80048b2 <HAL_GPIO_Init+0xfa>
 8004818:	4a8e      	ldr	r2, [pc, #568]	; (8004a54 <HAL_GPIO_Init+0x29c>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d863      	bhi.n	80048e6 <HAL_GPIO_Init+0x12e>
 800481e:	4a8e      	ldr	r2, [pc, #568]	; (8004a58 <HAL_GPIO_Init+0x2a0>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d046      	beq.n	80048b2 <HAL_GPIO_Init+0xfa>
 8004824:	4a8c      	ldr	r2, [pc, #560]	; (8004a58 <HAL_GPIO_Init+0x2a0>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d85d      	bhi.n	80048e6 <HAL_GPIO_Init+0x12e>
 800482a:	2b12      	cmp	r3, #18
 800482c:	d82a      	bhi.n	8004884 <HAL_GPIO_Init+0xcc>
 800482e:	2b12      	cmp	r3, #18
 8004830:	d859      	bhi.n	80048e6 <HAL_GPIO_Init+0x12e>
 8004832:	a201      	add	r2, pc, #4	; (adr r2, 8004838 <HAL_GPIO_Init+0x80>)
 8004834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004838:	080048b3 	.word	0x080048b3
 800483c:	0800488d 	.word	0x0800488d
 8004840:	0800489f 	.word	0x0800489f
 8004844:	080048e1 	.word	0x080048e1
 8004848:	080048e7 	.word	0x080048e7
 800484c:	080048e7 	.word	0x080048e7
 8004850:	080048e7 	.word	0x080048e7
 8004854:	080048e7 	.word	0x080048e7
 8004858:	080048e7 	.word	0x080048e7
 800485c:	080048e7 	.word	0x080048e7
 8004860:	080048e7 	.word	0x080048e7
 8004864:	080048e7 	.word	0x080048e7
 8004868:	080048e7 	.word	0x080048e7
 800486c:	080048e7 	.word	0x080048e7
 8004870:	080048e7 	.word	0x080048e7
 8004874:	080048e7 	.word	0x080048e7
 8004878:	080048e7 	.word	0x080048e7
 800487c:	08004895 	.word	0x08004895
 8004880:	080048a9 	.word	0x080048a9
 8004884:	4a75      	ldr	r2, [pc, #468]	; (8004a5c <HAL_GPIO_Init+0x2a4>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d013      	beq.n	80048b2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800488a:	e02c      	b.n	80048e6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	623b      	str	r3, [r7, #32]
          break;
 8004892:	e029      	b.n	80048e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	3304      	adds	r3, #4
 800489a:	623b      	str	r3, [r7, #32]
          break;
 800489c:	e024      	b.n	80048e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	3308      	adds	r3, #8
 80048a4:	623b      	str	r3, [r7, #32]
          break;
 80048a6:	e01f      	b.n	80048e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	330c      	adds	r3, #12
 80048ae:	623b      	str	r3, [r7, #32]
          break;
 80048b0:	e01a      	b.n	80048e8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d102      	bne.n	80048c0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80048ba:	2304      	movs	r3, #4
 80048bc:	623b      	str	r3, [r7, #32]
          break;
 80048be:	e013      	b.n	80048e8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d105      	bne.n	80048d4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80048c8:	2308      	movs	r3, #8
 80048ca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	69fa      	ldr	r2, [r7, #28]
 80048d0:	611a      	str	r2, [r3, #16]
          break;
 80048d2:	e009      	b.n	80048e8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80048d4:	2308      	movs	r3, #8
 80048d6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	69fa      	ldr	r2, [r7, #28]
 80048dc:	615a      	str	r2, [r3, #20]
          break;
 80048de:	e003      	b.n	80048e8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80048e0:	2300      	movs	r3, #0
 80048e2:	623b      	str	r3, [r7, #32]
          break;
 80048e4:	e000      	b.n	80048e8 <HAL_GPIO_Init+0x130>
          break;
 80048e6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80048e8:	69bb      	ldr	r3, [r7, #24]
 80048ea:	2bff      	cmp	r3, #255	; 0xff
 80048ec:	d801      	bhi.n	80048f2 <HAL_GPIO_Init+0x13a>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	e001      	b.n	80048f6 <HAL_GPIO_Init+0x13e>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	3304      	adds	r3, #4
 80048f6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80048f8:	69bb      	ldr	r3, [r7, #24]
 80048fa:	2bff      	cmp	r3, #255	; 0xff
 80048fc:	d802      	bhi.n	8004904 <HAL_GPIO_Init+0x14c>
 80048fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	e002      	b.n	800490a <HAL_GPIO_Init+0x152>
 8004904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004906:	3b08      	subs	r3, #8
 8004908:	009b      	lsls	r3, r3, #2
 800490a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	210f      	movs	r1, #15
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	fa01 f303 	lsl.w	r3, r1, r3
 8004918:	43db      	mvns	r3, r3
 800491a:	401a      	ands	r2, r3
 800491c:	6a39      	ldr	r1, [r7, #32]
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	fa01 f303 	lsl.w	r3, r1, r3
 8004924:	431a      	orrs	r2, r3
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004932:	2b00      	cmp	r3, #0
 8004934:	f000 80c1 	beq.w	8004aba <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004938:	4b49      	ldr	r3, [pc, #292]	; (8004a60 <HAL_GPIO_Init+0x2a8>)
 800493a:	699b      	ldr	r3, [r3, #24]
 800493c:	4a48      	ldr	r2, [pc, #288]	; (8004a60 <HAL_GPIO_Init+0x2a8>)
 800493e:	f043 0301 	orr.w	r3, r3, #1
 8004942:	6193      	str	r3, [r2, #24]
 8004944:	4b46      	ldr	r3, [pc, #280]	; (8004a60 <HAL_GPIO_Init+0x2a8>)
 8004946:	699b      	ldr	r3, [r3, #24]
 8004948:	f003 0301 	and.w	r3, r3, #1
 800494c:	60bb      	str	r3, [r7, #8]
 800494e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004950:	4a44      	ldr	r2, [pc, #272]	; (8004a64 <HAL_GPIO_Init+0x2ac>)
 8004952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004954:	089b      	lsrs	r3, r3, #2
 8004956:	3302      	adds	r3, #2
 8004958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800495c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800495e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004960:	f003 0303 	and.w	r3, r3, #3
 8004964:	009b      	lsls	r3, r3, #2
 8004966:	220f      	movs	r2, #15
 8004968:	fa02 f303 	lsl.w	r3, r2, r3
 800496c:	43db      	mvns	r3, r3
 800496e:	68fa      	ldr	r2, [r7, #12]
 8004970:	4013      	ands	r3, r2
 8004972:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	4a3c      	ldr	r2, [pc, #240]	; (8004a68 <HAL_GPIO_Init+0x2b0>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d01f      	beq.n	80049bc <HAL_GPIO_Init+0x204>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	4a3b      	ldr	r2, [pc, #236]	; (8004a6c <HAL_GPIO_Init+0x2b4>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d019      	beq.n	80049b8 <HAL_GPIO_Init+0x200>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	4a3a      	ldr	r2, [pc, #232]	; (8004a70 <HAL_GPIO_Init+0x2b8>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d013      	beq.n	80049b4 <HAL_GPIO_Init+0x1fc>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4a39      	ldr	r2, [pc, #228]	; (8004a74 <HAL_GPIO_Init+0x2bc>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d00d      	beq.n	80049b0 <HAL_GPIO_Init+0x1f8>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	4a38      	ldr	r2, [pc, #224]	; (8004a78 <HAL_GPIO_Init+0x2c0>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d007      	beq.n	80049ac <HAL_GPIO_Init+0x1f4>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4a37      	ldr	r2, [pc, #220]	; (8004a7c <HAL_GPIO_Init+0x2c4>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d101      	bne.n	80049a8 <HAL_GPIO_Init+0x1f0>
 80049a4:	2305      	movs	r3, #5
 80049a6:	e00a      	b.n	80049be <HAL_GPIO_Init+0x206>
 80049a8:	2306      	movs	r3, #6
 80049aa:	e008      	b.n	80049be <HAL_GPIO_Init+0x206>
 80049ac:	2304      	movs	r3, #4
 80049ae:	e006      	b.n	80049be <HAL_GPIO_Init+0x206>
 80049b0:	2303      	movs	r3, #3
 80049b2:	e004      	b.n	80049be <HAL_GPIO_Init+0x206>
 80049b4:	2302      	movs	r3, #2
 80049b6:	e002      	b.n	80049be <HAL_GPIO_Init+0x206>
 80049b8:	2301      	movs	r3, #1
 80049ba:	e000      	b.n	80049be <HAL_GPIO_Init+0x206>
 80049bc:	2300      	movs	r3, #0
 80049be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049c0:	f002 0203 	and.w	r2, r2, #3
 80049c4:	0092      	lsls	r2, r2, #2
 80049c6:	4093      	lsls	r3, r2
 80049c8:	68fa      	ldr	r2, [r7, #12]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80049ce:	4925      	ldr	r1, [pc, #148]	; (8004a64 <HAL_GPIO_Init+0x2ac>)
 80049d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d2:	089b      	lsrs	r3, r3, #2
 80049d4:	3302      	adds	r3, #2
 80049d6:	68fa      	ldr	r2, [r7, #12]
 80049d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d006      	beq.n	80049f6 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80049e8:	4b25      	ldr	r3, [pc, #148]	; (8004a80 <HAL_GPIO_Init+0x2c8>)
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	4924      	ldr	r1, [pc, #144]	; (8004a80 <HAL_GPIO_Init+0x2c8>)
 80049ee:	69bb      	ldr	r3, [r7, #24]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	600b      	str	r3, [r1, #0]
 80049f4:	e006      	b.n	8004a04 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80049f6:	4b22      	ldr	r3, [pc, #136]	; (8004a80 <HAL_GPIO_Init+0x2c8>)
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	69bb      	ldr	r3, [r7, #24]
 80049fc:	43db      	mvns	r3, r3
 80049fe:	4920      	ldr	r1, [pc, #128]	; (8004a80 <HAL_GPIO_Init+0x2c8>)
 8004a00:	4013      	ands	r3, r2
 8004a02:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d006      	beq.n	8004a1e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004a10:	4b1b      	ldr	r3, [pc, #108]	; (8004a80 <HAL_GPIO_Init+0x2c8>)
 8004a12:	685a      	ldr	r2, [r3, #4]
 8004a14:	491a      	ldr	r1, [pc, #104]	; (8004a80 <HAL_GPIO_Init+0x2c8>)
 8004a16:	69bb      	ldr	r3, [r7, #24]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	604b      	str	r3, [r1, #4]
 8004a1c:	e006      	b.n	8004a2c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004a1e:	4b18      	ldr	r3, [pc, #96]	; (8004a80 <HAL_GPIO_Init+0x2c8>)
 8004a20:	685a      	ldr	r2, [r3, #4]
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	43db      	mvns	r3, r3
 8004a26:	4916      	ldr	r1, [pc, #88]	; (8004a80 <HAL_GPIO_Init+0x2c8>)
 8004a28:	4013      	ands	r3, r2
 8004a2a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d025      	beq.n	8004a84 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004a38:	4b11      	ldr	r3, [pc, #68]	; (8004a80 <HAL_GPIO_Init+0x2c8>)
 8004a3a:	689a      	ldr	r2, [r3, #8]
 8004a3c:	4910      	ldr	r1, [pc, #64]	; (8004a80 <HAL_GPIO_Init+0x2c8>)
 8004a3e:	69bb      	ldr	r3, [r7, #24]
 8004a40:	4313      	orrs	r3, r2
 8004a42:	608b      	str	r3, [r1, #8]
 8004a44:	e025      	b.n	8004a92 <HAL_GPIO_Init+0x2da>
 8004a46:	bf00      	nop
 8004a48:	10320000 	.word	0x10320000
 8004a4c:	10310000 	.word	0x10310000
 8004a50:	10220000 	.word	0x10220000
 8004a54:	10210000 	.word	0x10210000
 8004a58:	10120000 	.word	0x10120000
 8004a5c:	10110000 	.word	0x10110000
 8004a60:	40021000 	.word	0x40021000
 8004a64:	40010000 	.word	0x40010000
 8004a68:	40010800 	.word	0x40010800
 8004a6c:	40010c00 	.word	0x40010c00
 8004a70:	40011000 	.word	0x40011000
 8004a74:	40011400 	.word	0x40011400
 8004a78:	40011800 	.word	0x40011800
 8004a7c:	40011c00 	.word	0x40011c00
 8004a80:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004a84:	4b15      	ldr	r3, [pc, #84]	; (8004adc <HAL_GPIO_Init+0x324>)
 8004a86:	689a      	ldr	r2, [r3, #8]
 8004a88:	69bb      	ldr	r3, [r7, #24]
 8004a8a:	43db      	mvns	r3, r3
 8004a8c:	4913      	ldr	r1, [pc, #76]	; (8004adc <HAL_GPIO_Init+0x324>)
 8004a8e:	4013      	ands	r3, r2
 8004a90:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d006      	beq.n	8004aac <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004a9e:	4b0f      	ldr	r3, [pc, #60]	; (8004adc <HAL_GPIO_Init+0x324>)
 8004aa0:	68da      	ldr	r2, [r3, #12]
 8004aa2:	490e      	ldr	r1, [pc, #56]	; (8004adc <HAL_GPIO_Init+0x324>)
 8004aa4:	69bb      	ldr	r3, [r7, #24]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	60cb      	str	r3, [r1, #12]
 8004aaa:	e006      	b.n	8004aba <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004aac:	4b0b      	ldr	r3, [pc, #44]	; (8004adc <HAL_GPIO_Init+0x324>)
 8004aae:	68da      	ldr	r2, [r3, #12]
 8004ab0:	69bb      	ldr	r3, [r7, #24]
 8004ab2:	43db      	mvns	r3, r3
 8004ab4:	4909      	ldr	r1, [pc, #36]	; (8004adc <HAL_GPIO_Init+0x324>)
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004abc:	3301      	adds	r3, #1
 8004abe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac6:	fa22 f303 	lsr.w	r3, r2, r3
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	f47f ae7e 	bne.w	80047cc <HAL_GPIO_Init+0x14>
  }
}
 8004ad0:	bf00      	nop
 8004ad2:	bf00      	nop
 8004ad4:	372c      	adds	r7, #44	; 0x2c
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bc80      	pop	{r7}
 8004ada:	4770      	bx	lr
 8004adc:	40010400 	.word	0x40010400

08004ae0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b083      	sub	sp, #12
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	460b      	mov	r3, r1
 8004aea:	807b      	strh	r3, [r7, #2]
 8004aec:	4613      	mov	r3, r2
 8004aee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004af0:	787b      	ldrb	r3, [r7, #1]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d003      	beq.n	8004afe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004af6:	887a      	ldrh	r2, [r7, #2]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004afc:	e003      	b.n	8004b06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004afe:	887b      	ldrh	r3, [r7, #2]
 8004b00:	041a      	lsls	r2, r3, #16
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	611a      	str	r2, [r3, #16]
}
 8004b06:	bf00      	nop
 8004b08:	370c      	adds	r7, #12
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bc80      	pop	{r7}
 8004b0e:	4770      	bx	lr

08004b10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b086      	sub	sp, #24
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d101      	bne.n	8004b22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e272      	b.n	8005008 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 0301 	and.w	r3, r3, #1
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	f000 8087 	beq.w	8004c3e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b30:	4b92      	ldr	r3, [pc, #584]	; (8004d7c <HAL_RCC_OscConfig+0x26c>)
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	f003 030c 	and.w	r3, r3, #12
 8004b38:	2b04      	cmp	r3, #4
 8004b3a:	d00c      	beq.n	8004b56 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004b3c:	4b8f      	ldr	r3, [pc, #572]	; (8004d7c <HAL_RCC_OscConfig+0x26c>)
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	f003 030c 	and.w	r3, r3, #12
 8004b44:	2b08      	cmp	r3, #8
 8004b46:	d112      	bne.n	8004b6e <HAL_RCC_OscConfig+0x5e>
 8004b48:	4b8c      	ldr	r3, [pc, #560]	; (8004d7c <HAL_RCC_OscConfig+0x26c>)
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b54:	d10b      	bne.n	8004b6e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b56:	4b89      	ldr	r3, [pc, #548]	; (8004d7c <HAL_RCC_OscConfig+0x26c>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d06c      	beq.n	8004c3c <HAL_RCC_OscConfig+0x12c>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d168      	bne.n	8004c3c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e24c      	b.n	8005008 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b76:	d106      	bne.n	8004b86 <HAL_RCC_OscConfig+0x76>
 8004b78:	4b80      	ldr	r3, [pc, #512]	; (8004d7c <HAL_RCC_OscConfig+0x26c>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a7f      	ldr	r2, [pc, #508]	; (8004d7c <HAL_RCC_OscConfig+0x26c>)
 8004b7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b82:	6013      	str	r3, [r2, #0]
 8004b84:	e02e      	b.n	8004be4 <HAL_RCC_OscConfig+0xd4>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d10c      	bne.n	8004ba8 <HAL_RCC_OscConfig+0x98>
 8004b8e:	4b7b      	ldr	r3, [pc, #492]	; (8004d7c <HAL_RCC_OscConfig+0x26c>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a7a      	ldr	r2, [pc, #488]	; (8004d7c <HAL_RCC_OscConfig+0x26c>)
 8004b94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b98:	6013      	str	r3, [r2, #0]
 8004b9a:	4b78      	ldr	r3, [pc, #480]	; (8004d7c <HAL_RCC_OscConfig+0x26c>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a77      	ldr	r2, [pc, #476]	; (8004d7c <HAL_RCC_OscConfig+0x26c>)
 8004ba0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ba4:	6013      	str	r3, [r2, #0]
 8004ba6:	e01d      	b.n	8004be4 <HAL_RCC_OscConfig+0xd4>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004bb0:	d10c      	bne.n	8004bcc <HAL_RCC_OscConfig+0xbc>
 8004bb2:	4b72      	ldr	r3, [pc, #456]	; (8004d7c <HAL_RCC_OscConfig+0x26c>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a71      	ldr	r2, [pc, #452]	; (8004d7c <HAL_RCC_OscConfig+0x26c>)
 8004bb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004bbc:	6013      	str	r3, [r2, #0]
 8004bbe:	4b6f      	ldr	r3, [pc, #444]	; (8004d7c <HAL_RCC_OscConfig+0x26c>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a6e      	ldr	r2, [pc, #440]	; (8004d7c <HAL_RCC_OscConfig+0x26c>)
 8004bc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bc8:	6013      	str	r3, [r2, #0]
 8004bca:	e00b      	b.n	8004be4 <HAL_RCC_OscConfig+0xd4>
 8004bcc:	4b6b      	ldr	r3, [pc, #428]	; (8004d7c <HAL_RCC_OscConfig+0x26c>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a6a      	ldr	r2, [pc, #424]	; (8004d7c <HAL_RCC_OscConfig+0x26c>)
 8004bd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bd6:	6013      	str	r3, [r2, #0]
 8004bd8:	4b68      	ldr	r3, [pc, #416]	; (8004d7c <HAL_RCC_OscConfig+0x26c>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a67      	ldr	r2, [pc, #412]	; (8004d7c <HAL_RCC_OscConfig+0x26c>)
 8004bde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004be2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d013      	beq.n	8004c14 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bec:	f7ff f826 	bl	8003c3c <HAL_GetTick>
 8004bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bf2:	e008      	b.n	8004c06 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bf4:	f7ff f822 	bl	8003c3c <HAL_GetTick>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	2b64      	cmp	r3, #100	; 0x64
 8004c00:	d901      	bls.n	8004c06 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004c02:	2303      	movs	r3, #3
 8004c04:	e200      	b.n	8005008 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c06:	4b5d      	ldr	r3, [pc, #372]	; (8004d7c <HAL_RCC_OscConfig+0x26c>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d0f0      	beq.n	8004bf4 <HAL_RCC_OscConfig+0xe4>
 8004c12:	e014      	b.n	8004c3e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c14:	f7ff f812 	bl	8003c3c <HAL_GetTick>
 8004c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c1a:	e008      	b.n	8004c2e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c1c:	f7ff f80e 	bl	8003c3c <HAL_GetTick>
 8004c20:	4602      	mov	r2, r0
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	2b64      	cmp	r3, #100	; 0x64
 8004c28:	d901      	bls.n	8004c2e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	e1ec      	b.n	8005008 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c2e:	4b53      	ldr	r3, [pc, #332]	; (8004d7c <HAL_RCC_OscConfig+0x26c>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d1f0      	bne.n	8004c1c <HAL_RCC_OscConfig+0x10c>
 8004c3a:	e000      	b.n	8004c3e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 0302 	and.w	r3, r3, #2
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d063      	beq.n	8004d12 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c4a:	4b4c      	ldr	r3, [pc, #304]	; (8004d7c <HAL_RCC_OscConfig+0x26c>)
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	f003 030c 	and.w	r3, r3, #12
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d00b      	beq.n	8004c6e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004c56:	4b49      	ldr	r3, [pc, #292]	; (8004d7c <HAL_RCC_OscConfig+0x26c>)
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	f003 030c 	and.w	r3, r3, #12
 8004c5e:	2b08      	cmp	r3, #8
 8004c60:	d11c      	bne.n	8004c9c <HAL_RCC_OscConfig+0x18c>
 8004c62:	4b46      	ldr	r3, [pc, #280]	; (8004d7c <HAL_RCC_OscConfig+0x26c>)
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d116      	bne.n	8004c9c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c6e:	4b43      	ldr	r3, [pc, #268]	; (8004d7c <HAL_RCC_OscConfig+0x26c>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 0302 	and.w	r3, r3, #2
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d005      	beq.n	8004c86 <HAL_RCC_OscConfig+0x176>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	691b      	ldr	r3, [r3, #16]
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d001      	beq.n	8004c86 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e1c0      	b.n	8005008 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c86:	4b3d      	ldr	r3, [pc, #244]	; (8004d7c <HAL_RCC_OscConfig+0x26c>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	695b      	ldr	r3, [r3, #20]
 8004c92:	00db      	lsls	r3, r3, #3
 8004c94:	4939      	ldr	r1, [pc, #228]	; (8004d7c <HAL_RCC_OscConfig+0x26c>)
 8004c96:	4313      	orrs	r3, r2
 8004c98:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c9a:	e03a      	b.n	8004d12 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	691b      	ldr	r3, [r3, #16]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d020      	beq.n	8004ce6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ca4:	4b36      	ldr	r3, [pc, #216]	; (8004d80 <HAL_RCC_OscConfig+0x270>)
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004caa:	f7fe ffc7 	bl	8003c3c <HAL_GetTick>
 8004cae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cb0:	e008      	b.n	8004cc4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cb2:	f7fe ffc3 	bl	8003c3c <HAL_GetTick>
 8004cb6:	4602      	mov	r2, r0
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	1ad3      	subs	r3, r2, r3
 8004cbc:	2b02      	cmp	r3, #2
 8004cbe:	d901      	bls.n	8004cc4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004cc0:	2303      	movs	r3, #3
 8004cc2:	e1a1      	b.n	8005008 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cc4:	4b2d      	ldr	r3, [pc, #180]	; (8004d7c <HAL_RCC_OscConfig+0x26c>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f003 0302 	and.w	r3, r3, #2
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d0f0      	beq.n	8004cb2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cd0:	4b2a      	ldr	r3, [pc, #168]	; (8004d7c <HAL_RCC_OscConfig+0x26c>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	695b      	ldr	r3, [r3, #20]
 8004cdc:	00db      	lsls	r3, r3, #3
 8004cde:	4927      	ldr	r1, [pc, #156]	; (8004d7c <HAL_RCC_OscConfig+0x26c>)
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	600b      	str	r3, [r1, #0]
 8004ce4:	e015      	b.n	8004d12 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ce6:	4b26      	ldr	r3, [pc, #152]	; (8004d80 <HAL_RCC_OscConfig+0x270>)
 8004ce8:	2200      	movs	r2, #0
 8004cea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cec:	f7fe ffa6 	bl	8003c3c <HAL_GetTick>
 8004cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cf2:	e008      	b.n	8004d06 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cf4:	f7fe ffa2 	bl	8003c3c <HAL_GetTick>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	2b02      	cmp	r3, #2
 8004d00:	d901      	bls.n	8004d06 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004d02:	2303      	movs	r3, #3
 8004d04:	e180      	b.n	8005008 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d06:	4b1d      	ldr	r3, [pc, #116]	; (8004d7c <HAL_RCC_OscConfig+0x26c>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 0302 	and.w	r3, r3, #2
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d1f0      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 0308 	and.w	r3, r3, #8
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d03a      	beq.n	8004d94 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	699b      	ldr	r3, [r3, #24]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d019      	beq.n	8004d5a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d26:	4b17      	ldr	r3, [pc, #92]	; (8004d84 <HAL_RCC_OscConfig+0x274>)
 8004d28:	2201      	movs	r2, #1
 8004d2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d2c:	f7fe ff86 	bl	8003c3c <HAL_GetTick>
 8004d30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d32:	e008      	b.n	8004d46 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d34:	f7fe ff82 	bl	8003c3c <HAL_GetTick>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	1ad3      	subs	r3, r2, r3
 8004d3e:	2b02      	cmp	r3, #2
 8004d40:	d901      	bls.n	8004d46 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004d42:	2303      	movs	r3, #3
 8004d44:	e160      	b.n	8005008 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d46:	4b0d      	ldr	r3, [pc, #52]	; (8004d7c <HAL_RCC_OscConfig+0x26c>)
 8004d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4a:	f003 0302 	and.w	r3, r3, #2
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d0f0      	beq.n	8004d34 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004d52:	2001      	movs	r0, #1
 8004d54:	f000 fad8 	bl	8005308 <RCC_Delay>
 8004d58:	e01c      	b.n	8004d94 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d5a:	4b0a      	ldr	r3, [pc, #40]	; (8004d84 <HAL_RCC_OscConfig+0x274>)
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d60:	f7fe ff6c 	bl	8003c3c <HAL_GetTick>
 8004d64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d66:	e00f      	b.n	8004d88 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d68:	f7fe ff68 	bl	8003c3c <HAL_GetTick>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	2b02      	cmp	r3, #2
 8004d74:	d908      	bls.n	8004d88 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004d76:	2303      	movs	r3, #3
 8004d78:	e146      	b.n	8005008 <HAL_RCC_OscConfig+0x4f8>
 8004d7a:	bf00      	nop
 8004d7c:	40021000 	.word	0x40021000
 8004d80:	42420000 	.word	0x42420000
 8004d84:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d88:	4b92      	ldr	r3, [pc, #584]	; (8004fd4 <HAL_RCC_OscConfig+0x4c4>)
 8004d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8c:	f003 0302 	and.w	r3, r3, #2
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d1e9      	bne.n	8004d68 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 0304 	and.w	r3, r3, #4
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	f000 80a6 	beq.w	8004eee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004da2:	2300      	movs	r3, #0
 8004da4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004da6:	4b8b      	ldr	r3, [pc, #556]	; (8004fd4 <HAL_RCC_OscConfig+0x4c4>)
 8004da8:	69db      	ldr	r3, [r3, #28]
 8004daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d10d      	bne.n	8004dce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004db2:	4b88      	ldr	r3, [pc, #544]	; (8004fd4 <HAL_RCC_OscConfig+0x4c4>)
 8004db4:	69db      	ldr	r3, [r3, #28]
 8004db6:	4a87      	ldr	r2, [pc, #540]	; (8004fd4 <HAL_RCC_OscConfig+0x4c4>)
 8004db8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dbc:	61d3      	str	r3, [r2, #28]
 8004dbe:	4b85      	ldr	r3, [pc, #532]	; (8004fd4 <HAL_RCC_OscConfig+0x4c4>)
 8004dc0:	69db      	ldr	r3, [r3, #28]
 8004dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dc6:	60bb      	str	r3, [r7, #8]
 8004dc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dce:	4b82      	ldr	r3, [pc, #520]	; (8004fd8 <HAL_RCC_OscConfig+0x4c8>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d118      	bne.n	8004e0c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004dda:	4b7f      	ldr	r3, [pc, #508]	; (8004fd8 <HAL_RCC_OscConfig+0x4c8>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a7e      	ldr	r2, [pc, #504]	; (8004fd8 <HAL_RCC_OscConfig+0x4c8>)
 8004de0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004de4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004de6:	f7fe ff29 	bl	8003c3c <HAL_GetTick>
 8004dea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dec:	e008      	b.n	8004e00 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dee:	f7fe ff25 	bl	8003c3c <HAL_GetTick>
 8004df2:	4602      	mov	r2, r0
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	1ad3      	subs	r3, r2, r3
 8004df8:	2b64      	cmp	r3, #100	; 0x64
 8004dfa:	d901      	bls.n	8004e00 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004dfc:	2303      	movs	r3, #3
 8004dfe:	e103      	b.n	8005008 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e00:	4b75      	ldr	r3, [pc, #468]	; (8004fd8 <HAL_RCC_OscConfig+0x4c8>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d0f0      	beq.n	8004dee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d106      	bne.n	8004e22 <HAL_RCC_OscConfig+0x312>
 8004e14:	4b6f      	ldr	r3, [pc, #444]	; (8004fd4 <HAL_RCC_OscConfig+0x4c4>)
 8004e16:	6a1b      	ldr	r3, [r3, #32]
 8004e18:	4a6e      	ldr	r2, [pc, #440]	; (8004fd4 <HAL_RCC_OscConfig+0x4c4>)
 8004e1a:	f043 0301 	orr.w	r3, r3, #1
 8004e1e:	6213      	str	r3, [r2, #32]
 8004e20:	e02d      	b.n	8004e7e <HAL_RCC_OscConfig+0x36e>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	68db      	ldr	r3, [r3, #12]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d10c      	bne.n	8004e44 <HAL_RCC_OscConfig+0x334>
 8004e2a:	4b6a      	ldr	r3, [pc, #424]	; (8004fd4 <HAL_RCC_OscConfig+0x4c4>)
 8004e2c:	6a1b      	ldr	r3, [r3, #32]
 8004e2e:	4a69      	ldr	r2, [pc, #420]	; (8004fd4 <HAL_RCC_OscConfig+0x4c4>)
 8004e30:	f023 0301 	bic.w	r3, r3, #1
 8004e34:	6213      	str	r3, [r2, #32]
 8004e36:	4b67      	ldr	r3, [pc, #412]	; (8004fd4 <HAL_RCC_OscConfig+0x4c4>)
 8004e38:	6a1b      	ldr	r3, [r3, #32]
 8004e3a:	4a66      	ldr	r2, [pc, #408]	; (8004fd4 <HAL_RCC_OscConfig+0x4c4>)
 8004e3c:	f023 0304 	bic.w	r3, r3, #4
 8004e40:	6213      	str	r3, [r2, #32]
 8004e42:	e01c      	b.n	8004e7e <HAL_RCC_OscConfig+0x36e>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	2b05      	cmp	r3, #5
 8004e4a:	d10c      	bne.n	8004e66 <HAL_RCC_OscConfig+0x356>
 8004e4c:	4b61      	ldr	r3, [pc, #388]	; (8004fd4 <HAL_RCC_OscConfig+0x4c4>)
 8004e4e:	6a1b      	ldr	r3, [r3, #32]
 8004e50:	4a60      	ldr	r2, [pc, #384]	; (8004fd4 <HAL_RCC_OscConfig+0x4c4>)
 8004e52:	f043 0304 	orr.w	r3, r3, #4
 8004e56:	6213      	str	r3, [r2, #32]
 8004e58:	4b5e      	ldr	r3, [pc, #376]	; (8004fd4 <HAL_RCC_OscConfig+0x4c4>)
 8004e5a:	6a1b      	ldr	r3, [r3, #32]
 8004e5c:	4a5d      	ldr	r2, [pc, #372]	; (8004fd4 <HAL_RCC_OscConfig+0x4c4>)
 8004e5e:	f043 0301 	orr.w	r3, r3, #1
 8004e62:	6213      	str	r3, [r2, #32]
 8004e64:	e00b      	b.n	8004e7e <HAL_RCC_OscConfig+0x36e>
 8004e66:	4b5b      	ldr	r3, [pc, #364]	; (8004fd4 <HAL_RCC_OscConfig+0x4c4>)
 8004e68:	6a1b      	ldr	r3, [r3, #32]
 8004e6a:	4a5a      	ldr	r2, [pc, #360]	; (8004fd4 <HAL_RCC_OscConfig+0x4c4>)
 8004e6c:	f023 0301 	bic.w	r3, r3, #1
 8004e70:	6213      	str	r3, [r2, #32]
 8004e72:	4b58      	ldr	r3, [pc, #352]	; (8004fd4 <HAL_RCC_OscConfig+0x4c4>)
 8004e74:	6a1b      	ldr	r3, [r3, #32]
 8004e76:	4a57      	ldr	r2, [pc, #348]	; (8004fd4 <HAL_RCC_OscConfig+0x4c4>)
 8004e78:	f023 0304 	bic.w	r3, r3, #4
 8004e7c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d015      	beq.n	8004eb2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e86:	f7fe fed9 	bl	8003c3c <HAL_GetTick>
 8004e8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e8c:	e00a      	b.n	8004ea4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e8e:	f7fe fed5 	bl	8003c3c <HAL_GetTick>
 8004e92:	4602      	mov	r2, r0
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	1ad3      	subs	r3, r2, r3
 8004e98:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d901      	bls.n	8004ea4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004ea0:	2303      	movs	r3, #3
 8004ea2:	e0b1      	b.n	8005008 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ea4:	4b4b      	ldr	r3, [pc, #300]	; (8004fd4 <HAL_RCC_OscConfig+0x4c4>)
 8004ea6:	6a1b      	ldr	r3, [r3, #32]
 8004ea8:	f003 0302 	and.w	r3, r3, #2
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d0ee      	beq.n	8004e8e <HAL_RCC_OscConfig+0x37e>
 8004eb0:	e014      	b.n	8004edc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004eb2:	f7fe fec3 	bl	8003c3c <HAL_GetTick>
 8004eb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004eb8:	e00a      	b.n	8004ed0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eba:	f7fe febf 	bl	8003c3c <HAL_GetTick>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d901      	bls.n	8004ed0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004ecc:	2303      	movs	r3, #3
 8004ece:	e09b      	b.n	8005008 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ed0:	4b40      	ldr	r3, [pc, #256]	; (8004fd4 <HAL_RCC_OscConfig+0x4c4>)
 8004ed2:	6a1b      	ldr	r3, [r3, #32]
 8004ed4:	f003 0302 	and.w	r3, r3, #2
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d1ee      	bne.n	8004eba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004edc:	7dfb      	ldrb	r3, [r7, #23]
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d105      	bne.n	8004eee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ee2:	4b3c      	ldr	r3, [pc, #240]	; (8004fd4 <HAL_RCC_OscConfig+0x4c4>)
 8004ee4:	69db      	ldr	r3, [r3, #28]
 8004ee6:	4a3b      	ldr	r2, [pc, #236]	; (8004fd4 <HAL_RCC_OscConfig+0x4c4>)
 8004ee8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004eec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	69db      	ldr	r3, [r3, #28]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	f000 8087 	beq.w	8005006 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ef8:	4b36      	ldr	r3, [pc, #216]	; (8004fd4 <HAL_RCC_OscConfig+0x4c4>)
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	f003 030c 	and.w	r3, r3, #12
 8004f00:	2b08      	cmp	r3, #8
 8004f02:	d061      	beq.n	8004fc8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	69db      	ldr	r3, [r3, #28]
 8004f08:	2b02      	cmp	r3, #2
 8004f0a:	d146      	bne.n	8004f9a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f0c:	4b33      	ldr	r3, [pc, #204]	; (8004fdc <HAL_RCC_OscConfig+0x4cc>)
 8004f0e:	2200      	movs	r2, #0
 8004f10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f12:	f7fe fe93 	bl	8003c3c <HAL_GetTick>
 8004f16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f18:	e008      	b.n	8004f2c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f1a:	f7fe fe8f 	bl	8003c3c <HAL_GetTick>
 8004f1e:	4602      	mov	r2, r0
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	1ad3      	subs	r3, r2, r3
 8004f24:	2b02      	cmp	r3, #2
 8004f26:	d901      	bls.n	8004f2c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004f28:	2303      	movs	r3, #3
 8004f2a:	e06d      	b.n	8005008 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f2c:	4b29      	ldr	r3, [pc, #164]	; (8004fd4 <HAL_RCC_OscConfig+0x4c4>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d1f0      	bne.n	8004f1a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6a1b      	ldr	r3, [r3, #32]
 8004f3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f40:	d108      	bne.n	8004f54 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004f42:	4b24      	ldr	r3, [pc, #144]	; (8004fd4 <HAL_RCC_OscConfig+0x4c4>)
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	4921      	ldr	r1, [pc, #132]	; (8004fd4 <HAL_RCC_OscConfig+0x4c4>)
 8004f50:	4313      	orrs	r3, r2
 8004f52:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f54:	4b1f      	ldr	r3, [pc, #124]	; (8004fd4 <HAL_RCC_OscConfig+0x4c4>)
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6a19      	ldr	r1, [r3, #32]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f64:	430b      	orrs	r3, r1
 8004f66:	491b      	ldr	r1, [pc, #108]	; (8004fd4 <HAL_RCC_OscConfig+0x4c4>)
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f6c:	4b1b      	ldr	r3, [pc, #108]	; (8004fdc <HAL_RCC_OscConfig+0x4cc>)
 8004f6e:	2201      	movs	r2, #1
 8004f70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f72:	f7fe fe63 	bl	8003c3c <HAL_GetTick>
 8004f76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004f78:	e008      	b.n	8004f8c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f7a:	f7fe fe5f 	bl	8003c3c <HAL_GetTick>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	1ad3      	subs	r3, r2, r3
 8004f84:	2b02      	cmp	r3, #2
 8004f86:	d901      	bls.n	8004f8c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	e03d      	b.n	8005008 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004f8c:	4b11      	ldr	r3, [pc, #68]	; (8004fd4 <HAL_RCC_OscConfig+0x4c4>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d0f0      	beq.n	8004f7a <HAL_RCC_OscConfig+0x46a>
 8004f98:	e035      	b.n	8005006 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f9a:	4b10      	ldr	r3, [pc, #64]	; (8004fdc <HAL_RCC_OscConfig+0x4cc>)
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fa0:	f7fe fe4c 	bl	8003c3c <HAL_GetTick>
 8004fa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004fa6:	e008      	b.n	8004fba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fa8:	f7fe fe48 	bl	8003c3c <HAL_GetTick>
 8004fac:	4602      	mov	r2, r0
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	2b02      	cmp	r3, #2
 8004fb4:	d901      	bls.n	8004fba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	e026      	b.n	8005008 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004fba:	4b06      	ldr	r3, [pc, #24]	; (8004fd4 <HAL_RCC_OscConfig+0x4c4>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d1f0      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x498>
 8004fc6:	e01e      	b.n	8005006 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	69db      	ldr	r3, [r3, #28]
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d107      	bne.n	8004fe0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e019      	b.n	8005008 <HAL_RCC_OscConfig+0x4f8>
 8004fd4:	40021000 	.word	0x40021000
 8004fd8:	40007000 	.word	0x40007000
 8004fdc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004fe0:	4b0b      	ldr	r3, [pc, #44]	; (8005010 <HAL_RCC_OscConfig+0x500>)
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6a1b      	ldr	r3, [r3, #32]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d106      	bne.n	8005002 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d001      	beq.n	8005006 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	e000      	b.n	8005008 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005006:	2300      	movs	r3, #0
}
 8005008:	4618      	mov	r0, r3
 800500a:	3718      	adds	r7, #24
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}
 8005010:	40021000 	.word	0x40021000

08005014 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d101      	bne.n	8005028 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	e0d0      	b.n	80051ca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005028:	4b6a      	ldr	r3, [pc, #424]	; (80051d4 <HAL_RCC_ClockConfig+0x1c0>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 0307 	and.w	r3, r3, #7
 8005030:	683a      	ldr	r2, [r7, #0]
 8005032:	429a      	cmp	r2, r3
 8005034:	d910      	bls.n	8005058 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005036:	4b67      	ldr	r3, [pc, #412]	; (80051d4 <HAL_RCC_ClockConfig+0x1c0>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f023 0207 	bic.w	r2, r3, #7
 800503e:	4965      	ldr	r1, [pc, #404]	; (80051d4 <HAL_RCC_ClockConfig+0x1c0>)
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	4313      	orrs	r3, r2
 8005044:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005046:	4b63      	ldr	r3, [pc, #396]	; (80051d4 <HAL_RCC_ClockConfig+0x1c0>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 0307 	and.w	r3, r3, #7
 800504e:	683a      	ldr	r2, [r7, #0]
 8005050:	429a      	cmp	r2, r3
 8005052:	d001      	beq.n	8005058 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	e0b8      	b.n	80051ca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 0302 	and.w	r3, r3, #2
 8005060:	2b00      	cmp	r3, #0
 8005062:	d020      	beq.n	80050a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 0304 	and.w	r3, r3, #4
 800506c:	2b00      	cmp	r3, #0
 800506e:	d005      	beq.n	800507c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005070:	4b59      	ldr	r3, [pc, #356]	; (80051d8 <HAL_RCC_ClockConfig+0x1c4>)
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	4a58      	ldr	r2, [pc, #352]	; (80051d8 <HAL_RCC_ClockConfig+0x1c4>)
 8005076:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800507a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 0308 	and.w	r3, r3, #8
 8005084:	2b00      	cmp	r3, #0
 8005086:	d005      	beq.n	8005094 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005088:	4b53      	ldr	r3, [pc, #332]	; (80051d8 <HAL_RCC_ClockConfig+0x1c4>)
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	4a52      	ldr	r2, [pc, #328]	; (80051d8 <HAL_RCC_ClockConfig+0x1c4>)
 800508e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005092:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005094:	4b50      	ldr	r3, [pc, #320]	; (80051d8 <HAL_RCC_ClockConfig+0x1c4>)
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	494d      	ldr	r1, [pc, #308]	; (80051d8 <HAL_RCC_ClockConfig+0x1c4>)
 80050a2:	4313      	orrs	r3, r2
 80050a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 0301 	and.w	r3, r3, #1
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d040      	beq.n	8005134 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d107      	bne.n	80050ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050ba:	4b47      	ldr	r3, [pc, #284]	; (80051d8 <HAL_RCC_ClockConfig+0x1c4>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d115      	bne.n	80050f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e07f      	b.n	80051ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	2b02      	cmp	r3, #2
 80050d0:	d107      	bne.n	80050e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050d2:	4b41      	ldr	r3, [pc, #260]	; (80051d8 <HAL_RCC_ClockConfig+0x1c4>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d109      	bne.n	80050f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e073      	b.n	80051ca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050e2:	4b3d      	ldr	r3, [pc, #244]	; (80051d8 <HAL_RCC_ClockConfig+0x1c4>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 0302 	and.w	r3, r3, #2
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d101      	bne.n	80050f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e06b      	b.n	80051ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050f2:	4b39      	ldr	r3, [pc, #228]	; (80051d8 <HAL_RCC_ClockConfig+0x1c4>)
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	f023 0203 	bic.w	r2, r3, #3
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	4936      	ldr	r1, [pc, #216]	; (80051d8 <HAL_RCC_ClockConfig+0x1c4>)
 8005100:	4313      	orrs	r3, r2
 8005102:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005104:	f7fe fd9a 	bl	8003c3c <HAL_GetTick>
 8005108:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800510a:	e00a      	b.n	8005122 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800510c:	f7fe fd96 	bl	8003c3c <HAL_GetTick>
 8005110:	4602      	mov	r2, r0
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	f241 3288 	movw	r2, #5000	; 0x1388
 800511a:	4293      	cmp	r3, r2
 800511c:	d901      	bls.n	8005122 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800511e:	2303      	movs	r3, #3
 8005120:	e053      	b.n	80051ca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005122:	4b2d      	ldr	r3, [pc, #180]	; (80051d8 <HAL_RCC_ClockConfig+0x1c4>)
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	f003 020c 	and.w	r2, r3, #12
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	429a      	cmp	r2, r3
 8005132:	d1eb      	bne.n	800510c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005134:	4b27      	ldr	r3, [pc, #156]	; (80051d4 <HAL_RCC_ClockConfig+0x1c0>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 0307 	and.w	r3, r3, #7
 800513c:	683a      	ldr	r2, [r7, #0]
 800513e:	429a      	cmp	r2, r3
 8005140:	d210      	bcs.n	8005164 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005142:	4b24      	ldr	r3, [pc, #144]	; (80051d4 <HAL_RCC_ClockConfig+0x1c0>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f023 0207 	bic.w	r2, r3, #7
 800514a:	4922      	ldr	r1, [pc, #136]	; (80051d4 <HAL_RCC_ClockConfig+0x1c0>)
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	4313      	orrs	r3, r2
 8005150:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005152:	4b20      	ldr	r3, [pc, #128]	; (80051d4 <HAL_RCC_ClockConfig+0x1c0>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 0307 	and.w	r3, r3, #7
 800515a:	683a      	ldr	r2, [r7, #0]
 800515c:	429a      	cmp	r2, r3
 800515e:	d001      	beq.n	8005164 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005160:	2301      	movs	r3, #1
 8005162:	e032      	b.n	80051ca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 0304 	and.w	r3, r3, #4
 800516c:	2b00      	cmp	r3, #0
 800516e:	d008      	beq.n	8005182 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005170:	4b19      	ldr	r3, [pc, #100]	; (80051d8 <HAL_RCC_ClockConfig+0x1c4>)
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	4916      	ldr	r1, [pc, #88]	; (80051d8 <HAL_RCC_ClockConfig+0x1c4>)
 800517e:	4313      	orrs	r3, r2
 8005180:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 0308 	and.w	r3, r3, #8
 800518a:	2b00      	cmp	r3, #0
 800518c:	d009      	beq.n	80051a2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800518e:	4b12      	ldr	r3, [pc, #72]	; (80051d8 <HAL_RCC_ClockConfig+0x1c4>)
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	691b      	ldr	r3, [r3, #16]
 800519a:	00db      	lsls	r3, r3, #3
 800519c:	490e      	ldr	r1, [pc, #56]	; (80051d8 <HAL_RCC_ClockConfig+0x1c4>)
 800519e:	4313      	orrs	r3, r2
 80051a0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80051a2:	f000 f821 	bl	80051e8 <HAL_RCC_GetSysClockFreq>
 80051a6:	4602      	mov	r2, r0
 80051a8:	4b0b      	ldr	r3, [pc, #44]	; (80051d8 <HAL_RCC_ClockConfig+0x1c4>)
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	091b      	lsrs	r3, r3, #4
 80051ae:	f003 030f 	and.w	r3, r3, #15
 80051b2:	490a      	ldr	r1, [pc, #40]	; (80051dc <HAL_RCC_ClockConfig+0x1c8>)
 80051b4:	5ccb      	ldrb	r3, [r1, r3]
 80051b6:	fa22 f303 	lsr.w	r3, r2, r3
 80051ba:	4a09      	ldr	r2, [pc, #36]	; (80051e0 <HAL_RCC_ClockConfig+0x1cc>)
 80051bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80051be:	4b09      	ldr	r3, [pc, #36]	; (80051e4 <HAL_RCC_ClockConfig+0x1d0>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4618      	mov	r0, r3
 80051c4:	f7fe fcf8 	bl	8003bb8 <HAL_InitTick>

  return HAL_OK;
 80051c8:	2300      	movs	r3, #0
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3710      	adds	r7, #16
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}
 80051d2:	bf00      	nop
 80051d4:	40022000 	.word	0x40022000
 80051d8:	40021000 	.word	0x40021000
 80051dc:	0800ccc4 	.word	0x0800ccc4
 80051e0:	20000000 	.word	0x20000000
 80051e4:	20000008 	.word	0x20000008

080051e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051e8:	b490      	push	{r4, r7}
 80051ea:	b08a      	sub	sp, #40	; 0x28
 80051ec:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80051ee:	4b29      	ldr	r3, [pc, #164]	; (8005294 <HAL_RCC_GetSysClockFreq+0xac>)
 80051f0:	1d3c      	adds	r4, r7, #4
 80051f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80051f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80051f8:	f240 2301 	movw	r3, #513	; 0x201
 80051fc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80051fe:	2300      	movs	r3, #0
 8005200:	61fb      	str	r3, [r7, #28]
 8005202:	2300      	movs	r3, #0
 8005204:	61bb      	str	r3, [r7, #24]
 8005206:	2300      	movs	r3, #0
 8005208:	627b      	str	r3, [r7, #36]	; 0x24
 800520a:	2300      	movs	r3, #0
 800520c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800520e:	2300      	movs	r3, #0
 8005210:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005212:	4b21      	ldr	r3, [pc, #132]	; (8005298 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005218:	69fb      	ldr	r3, [r7, #28]
 800521a:	f003 030c 	and.w	r3, r3, #12
 800521e:	2b04      	cmp	r3, #4
 8005220:	d002      	beq.n	8005228 <HAL_RCC_GetSysClockFreq+0x40>
 8005222:	2b08      	cmp	r3, #8
 8005224:	d003      	beq.n	800522e <HAL_RCC_GetSysClockFreq+0x46>
 8005226:	e02b      	b.n	8005280 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005228:	4b1c      	ldr	r3, [pc, #112]	; (800529c <HAL_RCC_GetSysClockFreq+0xb4>)
 800522a:	623b      	str	r3, [r7, #32]
      break;
 800522c:	e02b      	b.n	8005286 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	0c9b      	lsrs	r3, r3, #18
 8005232:	f003 030f 	and.w	r3, r3, #15
 8005236:	3328      	adds	r3, #40	; 0x28
 8005238:	443b      	add	r3, r7
 800523a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800523e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005246:	2b00      	cmp	r3, #0
 8005248:	d012      	beq.n	8005270 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800524a:	4b13      	ldr	r3, [pc, #76]	; (8005298 <HAL_RCC_GetSysClockFreq+0xb0>)
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	0c5b      	lsrs	r3, r3, #17
 8005250:	f003 0301 	and.w	r3, r3, #1
 8005254:	3328      	adds	r3, #40	; 0x28
 8005256:	443b      	add	r3, r7
 8005258:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800525c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	4a0e      	ldr	r2, [pc, #56]	; (800529c <HAL_RCC_GetSysClockFreq+0xb4>)
 8005262:	fb03 f202 	mul.w	r2, r3, r2
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	fbb2 f3f3 	udiv	r3, r2, r3
 800526c:	627b      	str	r3, [r7, #36]	; 0x24
 800526e:	e004      	b.n	800527a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	4a0b      	ldr	r2, [pc, #44]	; (80052a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005274:	fb02 f303 	mul.w	r3, r2, r3
 8005278:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800527a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527c:	623b      	str	r3, [r7, #32]
      break;
 800527e:	e002      	b.n	8005286 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005280:	4b06      	ldr	r3, [pc, #24]	; (800529c <HAL_RCC_GetSysClockFreq+0xb4>)
 8005282:	623b      	str	r3, [r7, #32]
      break;
 8005284:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005286:	6a3b      	ldr	r3, [r7, #32]
}
 8005288:	4618      	mov	r0, r3
 800528a:	3728      	adds	r7, #40	; 0x28
 800528c:	46bd      	mov	sp, r7
 800528e:	bc90      	pop	{r4, r7}
 8005290:	4770      	bx	lr
 8005292:	bf00      	nop
 8005294:	0800cca8 	.word	0x0800cca8
 8005298:	40021000 	.word	0x40021000
 800529c:	007a1200 	.word	0x007a1200
 80052a0:	003d0900 	.word	0x003d0900

080052a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052a4:	b480      	push	{r7}
 80052a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052a8:	4b02      	ldr	r3, [pc, #8]	; (80052b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80052aa:	681b      	ldr	r3, [r3, #0]
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bc80      	pop	{r7}
 80052b2:	4770      	bx	lr
 80052b4:	20000000 	.word	0x20000000

080052b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80052bc:	f7ff fff2 	bl	80052a4 <HAL_RCC_GetHCLKFreq>
 80052c0:	4602      	mov	r2, r0
 80052c2:	4b05      	ldr	r3, [pc, #20]	; (80052d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	0a1b      	lsrs	r3, r3, #8
 80052c8:	f003 0307 	and.w	r3, r3, #7
 80052cc:	4903      	ldr	r1, [pc, #12]	; (80052dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80052ce:	5ccb      	ldrb	r3, [r1, r3]
 80052d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	bd80      	pop	{r7, pc}
 80052d8:	40021000 	.word	0x40021000
 80052dc:	0800ccd4 	.word	0x0800ccd4

080052e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80052e4:	f7ff ffde 	bl	80052a4 <HAL_RCC_GetHCLKFreq>
 80052e8:	4602      	mov	r2, r0
 80052ea:	4b05      	ldr	r3, [pc, #20]	; (8005300 <HAL_RCC_GetPCLK2Freq+0x20>)
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	0adb      	lsrs	r3, r3, #11
 80052f0:	f003 0307 	and.w	r3, r3, #7
 80052f4:	4903      	ldr	r1, [pc, #12]	; (8005304 <HAL_RCC_GetPCLK2Freq+0x24>)
 80052f6:	5ccb      	ldrb	r3, [r1, r3]
 80052f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	40021000 	.word	0x40021000
 8005304:	0800ccd4 	.word	0x0800ccd4

08005308 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005308:	b480      	push	{r7}
 800530a:	b085      	sub	sp, #20
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005310:	4b0a      	ldr	r3, [pc, #40]	; (800533c <RCC_Delay+0x34>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a0a      	ldr	r2, [pc, #40]	; (8005340 <RCC_Delay+0x38>)
 8005316:	fba2 2303 	umull	r2, r3, r2, r3
 800531a:	0a5b      	lsrs	r3, r3, #9
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	fb02 f303 	mul.w	r3, r2, r3
 8005322:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005324:	bf00      	nop
  }
  while (Delay --);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	1e5a      	subs	r2, r3, #1
 800532a:	60fa      	str	r2, [r7, #12]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d1f9      	bne.n	8005324 <RCC_Delay+0x1c>
}
 8005330:	bf00      	nop
 8005332:	bf00      	nop
 8005334:	3714      	adds	r7, #20
 8005336:	46bd      	mov	sp, r7
 8005338:	bc80      	pop	{r7}
 800533a:	4770      	bx	lr
 800533c:	20000000 	.word	0x20000000
 8005340:	10624dd3 	.word	0x10624dd3

08005344 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b082      	sub	sp, #8
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d101      	bne.n	8005356 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e041      	b.n	80053da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800535c:	b2db      	uxtb	r3, r3
 800535e:	2b00      	cmp	r3, #0
 8005360:	d106      	bne.n	8005370 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f7fd fbbe 	bl	8002aec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2202      	movs	r2, #2
 8005374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	3304      	adds	r3, #4
 8005380:	4619      	mov	r1, r3
 8005382:	4610      	mov	r0, r2
 8005384:	f001 f842 	bl	800640c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2201      	movs	r2, #1
 80053ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2201      	movs	r2, #1
 80053cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2201      	movs	r2, #1
 80053d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053d8:	2300      	movs	r3, #0
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3708      	adds	r7, #8
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}
	...

080053e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b085      	sub	sp, #20
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d001      	beq.n	80053fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	e044      	b.n	8005486 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2202      	movs	r2, #2
 8005400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	68da      	ldr	r2, [r3, #12]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f042 0201 	orr.w	r2, r2, #1
 8005412:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a1d      	ldr	r2, [pc, #116]	; (8005490 <HAL_TIM_Base_Start_IT+0xac>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d018      	beq.n	8005450 <HAL_TIM_Base_Start_IT+0x6c>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a1c      	ldr	r2, [pc, #112]	; (8005494 <HAL_TIM_Base_Start_IT+0xb0>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d013      	beq.n	8005450 <HAL_TIM_Base_Start_IT+0x6c>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005430:	d00e      	beq.n	8005450 <HAL_TIM_Base_Start_IT+0x6c>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a18      	ldr	r2, [pc, #96]	; (8005498 <HAL_TIM_Base_Start_IT+0xb4>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d009      	beq.n	8005450 <HAL_TIM_Base_Start_IT+0x6c>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a16      	ldr	r2, [pc, #88]	; (800549c <HAL_TIM_Base_Start_IT+0xb8>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d004      	beq.n	8005450 <HAL_TIM_Base_Start_IT+0x6c>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a15      	ldr	r2, [pc, #84]	; (80054a0 <HAL_TIM_Base_Start_IT+0xbc>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d111      	bne.n	8005474 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	f003 0307 	and.w	r3, r3, #7
 800545a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2b06      	cmp	r3, #6
 8005460:	d010      	beq.n	8005484 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f042 0201 	orr.w	r2, r2, #1
 8005470:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005472:	e007      	b.n	8005484 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f042 0201 	orr.w	r2, r2, #1
 8005482:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005484:	2300      	movs	r3, #0
}
 8005486:	4618      	mov	r0, r3
 8005488:	3714      	adds	r7, #20
 800548a:	46bd      	mov	sp, r7
 800548c:	bc80      	pop	{r7}
 800548e:	4770      	bx	lr
 8005490:	40012c00 	.word	0x40012c00
 8005494:	40013400 	.word	0x40013400
 8005498:	40000400 	.word	0x40000400
 800549c:	40000800 	.word	0x40000800
 80054a0:	40000c00 	.word	0x40000c00

080054a4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b083      	sub	sp, #12
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	68da      	ldr	r2, [r3, #12]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f022 0201 	bic.w	r2, r2, #1
 80054ba:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	6a1a      	ldr	r2, [r3, #32]
 80054c2:	f241 1311 	movw	r3, #4369	; 0x1111
 80054c6:	4013      	ands	r3, r2
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d10f      	bne.n	80054ec <HAL_TIM_Base_Stop_IT+0x48>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	6a1a      	ldr	r2, [r3, #32]
 80054d2:	f240 4344 	movw	r3, #1092	; 0x444
 80054d6:	4013      	ands	r3, r2
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d107      	bne.n	80054ec <HAL_TIM_Base_Stop_IT+0x48>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f022 0201 	bic.w	r2, r2, #1
 80054ea:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80054f4:	2300      	movs	r3, #0
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	370c      	adds	r7, #12
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bc80      	pop	{r7}
 80054fe:	4770      	bx	lr

08005500 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b082      	sub	sp, #8
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d101      	bne.n	8005512 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	e041      	b.n	8005596 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005518:	b2db      	uxtb	r3, r3
 800551a:	2b00      	cmp	r3, #0
 800551c:	d106      	bne.n	800552c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2200      	movs	r2, #0
 8005522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f000 f839 	bl	800559e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2202      	movs	r2, #2
 8005530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	3304      	adds	r3, #4
 800553c:	4619      	mov	r1, r3
 800553e:	4610      	mov	r0, r2
 8005540:	f000 ff64 	bl	800640c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2201      	movs	r2, #1
 8005548:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2201      	movs	r2, #1
 8005550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2201      	movs	r2, #1
 8005558:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2201      	movs	r2, #1
 8005560:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2201      	movs	r2, #1
 8005568:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2201      	movs	r2, #1
 8005570:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2201      	movs	r2, #1
 8005578:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2201      	movs	r2, #1
 8005580:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2201      	movs	r2, #1
 8005588:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2201      	movs	r2, #1
 8005590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005594:	2300      	movs	r3, #0
}
 8005596:	4618      	mov	r0, r3
 8005598:	3708      	adds	r7, #8
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}

0800559e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800559e:	b480      	push	{r7}
 80055a0:	b083      	sub	sp, #12
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80055a6:	bf00      	nop
 80055a8:	370c      	adds	r7, #12
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bc80      	pop	{r7}
 80055ae:	4770      	bx	lr

080055b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b084      	sub	sp, #16
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d109      	bne.n	80055d4 <HAL_TIM_PWM_Start+0x24>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	bf14      	ite	ne
 80055cc:	2301      	movne	r3, #1
 80055ce:	2300      	moveq	r3, #0
 80055d0:	b2db      	uxtb	r3, r3
 80055d2:	e022      	b.n	800561a <HAL_TIM_PWM_Start+0x6a>
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	2b04      	cmp	r3, #4
 80055d8:	d109      	bne.n	80055ee <HAL_TIM_PWM_Start+0x3e>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	bf14      	ite	ne
 80055e6:	2301      	movne	r3, #1
 80055e8:	2300      	moveq	r3, #0
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	e015      	b.n	800561a <HAL_TIM_PWM_Start+0x6a>
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	2b08      	cmp	r3, #8
 80055f2:	d109      	bne.n	8005608 <HAL_TIM_PWM_Start+0x58>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80055fa:	b2db      	uxtb	r3, r3
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	bf14      	ite	ne
 8005600:	2301      	movne	r3, #1
 8005602:	2300      	moveq	r3, #0
 8005604:	b2db      	uxtb	r3, r3
 8005606:	e008      	b.n	800561a <HAL_TIM_PWM_Start+0x6a>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800560e:	b2db      	uxtb	r3, r3
 8005610:	2b01      	cmp	r3, #1
 8005612:	bf14      	ite	ne
 8005614:	2301      	movne	r3, #1
 8005616:	2300      	moveq	r3, #0
 8005618:	b2db      	uxtb	r3, r3
 800561a:	2b00      	cmp	r3, #0
 800561c:	d001      	beq.n	8005622 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	e072      	b.n	8005708 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d104      	bne.n	8005632 <HAL_TIM_PWM_Start+0x82>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2202      	movs	r2, #2
 800562c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005630:	e013      	b.n	800565a <HAL_TIM_PWM_Start+0xaa>
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	2b04      	cmp	r3, #4
 8005636:	d104      	bne.n	8005642 <HAL_TIM_PWM_Start+0x92>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2202      	movs	r2, #2
 800563c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005640:	e00b      	b.n	800565a <HAL_TIM_PWM_Start+0xaa>
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	2b08      	cmp	r3, #8
 8005646:	d104      	bne.n	8005652 <HAL_TIM_PWM_Start+0xa2>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2202      	movs	r2, #2
 800564c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005650:	e003      	b.n	800565a <HAL_TIM_PWM_Start+0xaa>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2202      	movs	r2, #2
 8005656:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	2201      	movs	r2, #1
 8005660:	6839      	ldr	r1, [r7, #0]
 8005662:	4618      	mov	r0, r3
 8005664:	f001 faa7 	bl	8006bb6 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a28      	ldr	r2, [pc, #160]	; (8005710 <HAL_TIM_PWM_Start+0x160>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d004      	beq.n	800567c <HAL_TIM_PWM_Start+0xcc>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a27      	ldr	r2, [pc, #156]	; (8005714 <HAL_TIM_PWM_Start+0x164>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d101      	bne.n	8005680 <HAL_TIM_PWM_Start+0xd0>
 800567c:	2301      	movs	r3, #1
 800567e:	e000      	b.n	8005682 <HAL_TIM_PWM_Start+0xd2>
 8005680:	2300      	movs	r3, #0
 8005682:	2b00      	cmp	r3, #0
 8005684:	d007      	beq.n	8005696 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005694:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a1d      	ldr	r2, [pc, #116]	; (8005710 <HAL_TIM_PWM_Start+0x160>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d018      	beq.n	80056d2 <HAL_TIM_PWM_Start+0x122>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a1b      	ldr	r2, [pc, #108]	; (8005714 <HAL_TIM_PWM_Start+0x164>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d013      	beq.n	80056d2 <HAL_TIM_PWM_Start+0x122>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056b2:	d00e      	beq.n	80056d2 <HAL_TIM_PWM_Start+0x122>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a17      	ldr	r2, [pc, #92]	; (8005718 <HAL_TIM_PWM_Start+0x168>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d009      	beq.n	80056d2 <HAL_TIM_PWM_Start+0x122>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a16      	ldr	r2, [pc, #88]	; (800571c <HAL_TIM_PWM_Start+0x16c>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d004      	beq.n	80056d2 <HAL_TIM_PWM_Start+0x122>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a14      	ldr	r2, [pc, #80]	; (8005720 <HAL_TIM_PWM_Start+0x170>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d111      	bne.n	80056f6 <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	f003 0307 	and.w	r3, r3, #7
 80056dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2b06      	cmp	r3, #6
 80056e2:	d010      	beq.n	8005706 <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f042 0201 	orr.w	r2, r2, #1
 80056f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056f4:	e007      	b.n	8005706 <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f042 0201 	orr.w	r2, r2, #1
 8005704:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005706:	2300      	movs	r3, #0
}
 8005708:	4618      	mov	r0, r3
 800570a:	3710      	adds	r7, #16
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}
 8005710:	40012c00 	.word	0x40012c00
 8005714:	40013400 	.word	0x40013400
 8005718:	40000400 	.word	0x40000400
 800571c:	40000800 	.word	0x40000800
 8005720:	40000c00 	.word	0x40000c00

08005724 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b082      	sub	sp, #8
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d101      	bne.n	8005736 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	e041      	b.n	80057ba <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800573c:	b2db      	uxtb	r3, r3
 800573e:	2b00      	cmp	r3, #0
 8005740:	d106      	bne.n	8005750 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f000 f839 	bl	80057c2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2202      	movs	r2, #2
 8005754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	3304      	adds	r3, #4
 8005760:	4619      	mov	r1, r3
 8005762:	4610      	mov	r0, r2
 8005764:	f000 fe52 	bl	800640c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2201      	movs	r2, #1
 8005794:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2201      	movs	r2, #1
 800579c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057b8:	2300      	movs	r3, #0
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3708      	adds	r7, #8
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}

080057c2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80057c2:	b480      	push	{r7}
 80057c4:	b083      	sub	sp, #12
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80057ca:	bf00      	nop
 80057cc:	370c      	adds	r7, #12
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bc80      	pop	{r7}
 80057d2:	4770      	bx	lr

080057d4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b084      	sub	sp, #16
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
 80057dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d104      	bne.n	80057ee <HAL_TIM_IC_Start_IT+0x1a>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	e013      	b.n	8005816 <HAL_TIM_IC_Start_IT+0x42>
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	2b04      	cmp	r3, #4
 80057f2:	d104      	bne.n	80057fe <HAL_TIM_IC_Start_IT+0x2a>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	e00b      	b.n	8005816 <HAL_TIM_IC_Start_IT+0x42>
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	2b08      	cmp	r3, #8
 8005802:	d104      	bne.n	800580e <HAL_TIM_IC_Start_IT+0x3a>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800580a:	b2db      	uxtb	r3, r3
 800580c:	e003      	b.n	8005816 <HAL_TIM_IC_Start_IT+0x42>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005814:	b2db      	uxtb	r3, r3
 8005816:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d104      	bne.n	8005828 <HAL_TIM_IC_Start_IT+0x54>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005824:	b2db      	uxtb	r3, r3
 8005826:	e013      	b.n	8005850 <HAL_TIM_IC_Start_IT+0x7c>
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	2b04      	cmp	r3, #4
 800582c:	d104      	bne.n	8005838 <HAL_TIM_IC_Start_IT+0x64>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005834:	b2db      	uxtb	r3, r3
 8005836:	e00b      	b.n	8005850 <HAL_TIM_IC_Start_IT+0x7c>
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	2b08      	cmp	r3, #8
 800583c:	d104      	bne.n	8005848 <HAL_TIM_IC_Start_IT+0x74>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005844:	b2db      	uxtb	r3, r3
 8005846:	e003      	b.n	8005850 <HAL_TIM_IC_Start_IT+0x7c>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800584e:	b2db      	uxtb	r3, r3
 8005850:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005852:	7bfb      	ldrb	r3, [r7, #15]
 8005854:	2b01      	cmp	r3, #1
 8005856:	d102      	bne.n	800585e <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005858:	7bbb      	ldrb	r3, [r7, #14]
 800585a:	2b01      	cmp	r3, #1
 800585c:	d001      	beq.n	8005862 <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e0bd      	b.n	80059de <HAL_TIM_IC_Start_IT+0x20a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d104      	bne.n	8005872 <HAL_TIM_IC_Start_IT+0x9e>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2202      	movs	r2, #2
 800586c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005870:	e013      	b.n	800589a <HAL_TIM_IC_Start_IT+0xc6>
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	2b04      	cmp	r3, #4
 8005876:	d104      	bne.n	8005882 <HAL_TIM_IC_Start_IT+0xae>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2202      	movs	r2, #2
 800587c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005880:	e00b      	b.n	800589a <HAL_TIM_IC_Start_IT+0xc6>
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	2b08      	cmp	r3, #8
 8005886:	d104      	bne.n	8005892 <HAL_TIM_IC_Start_IT+0xbe>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2202      	movs	r2, #2
 800588c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005890:	e003      	b.n	800589a <HAL_TIM_IC_Start_IT+0xc6>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2202      	movs	r2, #2
 8005896:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d104      	bne.n	80058aa <HAL_TIM_IC_Start_IT+0xd6>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2202      	movs	r2, #2
 80058a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058a8:	e013      	b.n	80058d2 <HAL_TIM_IC_Start_IT+0xfe>
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	2b04      	cmp	r3, #4
 80058ae:	d104      	bne.n	80058ba <HAL_TIM_IC_Start_IT+0xe6>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2202      	movs	r2, #2
 80058b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80058b8:	e00b      	b.n	80058d2 <HAL_TIM_IC_Start_IT+0xfe>
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	2b08      	cmp	r3, #8
 80058be:	d104      	bne.n	80058ca <HAL_TIM_IC_Start_IT+0xf6>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2202      	movs	r2, #2
 80058c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058c8:	e003      	b.n	80058d2 <HAL_TIM_IC_Start_IT+0xfe>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2202      	movs	r2, #2
 80058ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	2b0c      	cmp	r3, #12
 80058d6:	d841      	bhi.n	800595c <HAL_TIM_IC_Start_IT+0x188>
 80058d8:	a201      	add	r2, pc, #4	; (adr r2, 80058e0 <HAL_TIM_IC_Start_IT+0x10c>)
 80058da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058de:	bf00      	nop
 80058e0:	08005915 	.word	0x08005915
 80058e4:	0800595d 	.word	0x0800595d
 80058e8:	0800595d 	.word	0x0800595d
 80058ec:	0800595d 	.word	0x0800595d
 80058f0:	08005927 	.word	0x08005927
 80058f4:	0800595d 	.word	0x0800595d
 80058f8:	0800595d 	.word	0x0800595d
 80058fc:	0800595d 	.word	0x0800595d
 8005900:	08005939 	.word	0x08005939
 8005904:	0800595d 	.word	0x0800595d
 8005908:	0800595d 	.word	0x0800595d
 800590c:	0800595d 	.word	0x0800595d
 8005910:	0800594b 	.word	0x0800594b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	68da      	ldr	r2, [r3, #12]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f042 0202 	orr.w	r2, r2, #2
 8005922:	60da      	str	r2, [r3, #12]
      break;
 8005924:	e01b      	b.n	800595e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	68da      	ldr	r2, [r3, #12]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f042 0204 	orr.w	r2, r2, #4
 8005934:	60da      	str	r2, [r3, #12]
      break;
 8005936:	e012      	b.n	800595e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	68da      	ldr	r2, [r3, #12]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f042 0208 	orr.w	r2, r2, #8
 8005946:	60da      	str	r2, [r3, #12]
      break;
 8005948:	e009      	b.n	800595e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	68da      	ldr	r2, [r3, #12]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f042 0210 	orr.w	r2, r2, #16
 8005958:	60da      	str	r2, [r3, #12]
      break;
 800595a:	e000      	b.n	800595e <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 800595c:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	2201      	movs	r2, #1
 8005964:	6839      	ldr	r1, [r7, #0]
 8005966:	4618      	mov	r0, r3
 8005968:	f001 f925 	bl	8006bb6 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a1d      	ldr	r2, [pc, #116]	; (80059e8 <HAL_TIM_IC_Start_IT+0x214>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d018      	beq.n	80059a8 <HAL_TIM_IC_Start_IT+0x1d4>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a1c      	ldr	r2, [pc, #112]	; (80059ec <HAL_TIM_IC_Start_IT+0x218>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d013      	beq.n	80059a8 <HAL_TIM_IC_Start_IT+0x1d4>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005988:	d00e      	beq.n	80059a8 <HAL_TIM_IC_Start_IT+0x1d4>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a18      	ldr	r2, [pc, #96]	; (80059f0 <HAL_TIM_IC_Start_IT+0x21c>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d009      	beq.n	80059a8 <HAL_TIM_IC_Start_IT+0x1d4>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a16      	ldr	r2, [pc, #88]	; (80059f4 <HAL_TIM_IC_Start_IT+0x220>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d004      	beq.n	80059a8 <HAL_TIM_IC_Start_IT+0x1d4>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a15      	ldr	r2, [pc, #84]	; (80059f8 <HAL_TIM_IC_Start_IT+0x224>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d111      	bne.n	80059cc <HAL_TIM_IC_Start_IT+0x1f8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	f003 0307 	and.w	r3, r3, #7
 80059b2:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	2b06      	cmp	r3, #6
 80059b8:	d010      	beq.n	80059dc <HAL_TIM_IC_Start_IT+0x208>
    {
      __HAL_TIM_ENABLE(htim);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f042 0201 	orr.w	r2, r2, #1
 80059c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059ca:	e007      	b.n	80059dc <HAL_TIM_IC_Start_IT+0x208>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f042 0201 	orr.w	r2, r2, #1
 80059da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80059dc:	2300      	movs	r3, #0
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3710      	adds	r7, #16
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
 80059e6:	bf00      	nop
 80059e8:	40012c00 	.word	0x40012c00
 80059ec:	40013400 	.word	0x40013400
 80059f0:	40000400 	.word	0x40000400
 80059f4:	40000800 	.word	0x40000800
 80059f8:	40000c00 	.word	0x40000c00

080059fc <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b082      	sub	sp, #8
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d101      	bne.n	8005a10 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e041      	b.n	8005a94 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a16:	b2db      	uxtb	r3, r3
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d106      	bne.n	8005a2a <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f000 f839 	bl	8005a9c <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2202      	movs	r2, #2
 8005a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	3304      	adds	r3, #4
 8005a3a:	4619      	mov	r1, r3
 8005a3c:	4610      	mov	r0, r2
 8005a3e:	f000 fce5 	bl	800640c <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f022 0208 	bic.w	r2, r2, #8
 8005a50:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	6819      	ldr	r1, [r3, #0]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	683a      	ldr	r2, [r7, #0]
 8005a5e:	430a      	orrs	r2, r1
 8005a60:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2201      	movs	r2, #1
 8005a66:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2201      	movs	r2, #1
 8005a76:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2201      	movs	r2, #1
 8005a86:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a92:	2300      	movs	r3, #0
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3708      	adds	r7, #8
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}

08005a9c <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b083      	sub	sp, #12
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8005aa4:	bf00      	nop
 8005aa6:	370c      	adds	r7, #12
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bc80      	pop	{r7}
 8005aac:	4770      	bx	lr

08005aae <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005aae:	b580      	push	{r7, lr}
 8005ab0:	b086      	sub	sp, #24
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	6078      	str	r0, [r7, #4]
 8005ab6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d101      	bne.n	8005ac2 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e093      	b.n	8005bea <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d106      	bne.n	8005adc <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f7fc ff86 	bl	80029e8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2202      	movs	r2, #2
 8005ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	687a      	ldr	r2, [r7, #4]
 8005aec:	6812      	ldr	r2, [r2, #0]
 8005aee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005af2:	f023 0307 	bic.w	r3, r3, #7
 8005af6:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	3304      	adds	r3, #4
 8005b00:	4619      	mov	r1, r3
 8005b02:	4610      	mov	r0, r2
 8005b04:	f000 fc82 	bl	800640c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	699b      	ldr	r3, [r3, #24]
 8005b16:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	6a1b      	ldr	r3, [r3, #32]
 8005b1e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	697a      	ldr	r2, [r7, #20]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b30:	f023 0303 	bic.w	r3, r3, #3
 8005b34:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	689a      	ldr	r2, [r3, #8]
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	699b      	ldr	r3, [r3, #24]
 8005b3e:	021b      	lsls	r3, r3, #8
 8005b40:	4313      	orrs	r3, r2
 8005b42:	693a      	ldr	r2, [r7, #16]
 8005b44:	4313      	orrs	r3, r2
 8005b46:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005b4e:	f023 030c 	bic.w	r3, r3, #12
 8005b52:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	68da      	ldr	r2, [r3, #12]
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	69db      	ldr	r3, [r3, #28]
 8005b68:	021b      	lsls	r3, r3, #8
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	693a      	ldr	r2, [r7, #16]
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	691b      	ldr	r3, [r3, #16]
 8005b76:	011a      	lsls	r2, r3, #4
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	6a1b      	ldr	r3, [r3, #32]
 8005b7c:	031b      	lsls	r3, r3, #12
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	693a      	ldr	r2, [r7, #16]
 8005b82:	4313      	orrs	r3, r2
 8005b84:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005b8c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	685a      	ldr	r2, [r3, #4]
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	695b      	ldr	r3, [r3, #20]
 8005b96:	011b      	lsls	r3, r3, #4
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	68fa      	ldr	r2, [r7, #12]
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	697a      	ldr	r2, [r7, #20]
 8005ba6:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	693a      	ldr	r2, [r7, #16]
 8005bae:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	68fa      	ldr	r2, [r7, #12]
 8005bb6:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2201      	movs	r2, #1
 8005be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005be8:	2300      	movs	r3, #0
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3718      	adds	r7, #24
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}

08005bf2 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005bf2:	b580      	push	{r7, lr}
 8005bf4:	b084      	sub	sp, #16
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	6078      	str	r0, [r7, #4]
 8005bfa:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c02:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005c0a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005c12:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005c1a:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d110      	bne.n	8005c44 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c22:	7bfb      	ldrb	r3, [r7, #15]
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d102      	bne.n	8005c2e <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005c28:	7b7b      	ldrb	r3, [r7, #13]
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	d001      	beq.n	8005c32 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e069      	b.n	8005d06 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2202      	movs	r2, #2
 8005c36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2202      	movs	r2, #2
 8005c3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c42:	e031      	b.n	8005ca8 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	2b04      	cmp	r3, #4
 8005c48:	d110      	bne.n	8005c6c <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c4a:	7bbb      	ldrb	r3, [r7, #14]
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d102      	bne.n	8005c56 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005c50:	7b3b      	ldrb	r3, [r7, #12]
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d001      	beq.n	8005c5a <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	e055      	b.n	8005d06 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2202      	movs	r2, #2
 8005c5e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2202      	movs	r2, #2
 8005c66:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c6a:	e01d      	b.n	8005ca8 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c6c:	7bfb      	ldrb	r3, [r7, #15]
 8005c6e:	2b01      	cmp	r3, #1
 8005c70:	d108      	bne.n	8005c84 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c72:	7bbb      	ldrb	r3, [r7, #14]
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d105      	bne.n	8005c84 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c78:	7b7b      	ldrb	r3, [r7, #13]
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d102      	bne.n	8005c84 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005c7e:	7b3b      	ldrb	r3, [r7, #12]
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d001      	beq.n	8005c88 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005c84:	2301      	movs	r3, #1
 8005c86:	e03e      	b.n	8005d06 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2202      	movs	r2, #2
 8005c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2202      	movs	r2, #2
 8005c94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2202      	movs	r2, #2
 8005c9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2202      	movs	r2, #2
 8005ca4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d003      	beq.n	8005cb6 <HAL_TIM_Encoder_Start+0xc4>
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	2b04      	cmp	r3, #4
 8005cb2:	d008      	beq.n	8005cc6 <HAL_TIM_Encoder_Start+0xd4>
 8005cb4:	e00f      	b.n	8005cd6 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	2100      	movs	r1, #0
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f000 ff79 	bl	8006bb6 <TIM_CCxChannelCmd>
      break;
 8005cc4:	e016      	b.n	8005cf4 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	2104      	movs	r1, #4
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f000 ff71 	bl	8006bb6 <TIM_CCxChannelCmd>
      break;
 8005cd4:	e00e      	b.n	8005cf4 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	2100      	movs	r1, #0
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f000 ff69 	bl	8006bb6 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	2201      	movs	r2, #1
 8005cea:	2104      	movs	r1, #4
 8005cec:	4618      	mov	r0, r3
 8005cee:	f000 ff62 	bl	8006bb6 <TIM_CCxChannelCmd>
      break;
 8005cf2:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f042 0201 	orr.w	r2, r2, #1
 8005d02:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005d04:	2300      	movs	r3, #0
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3710      	adds	r7, #16
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}

08005d0e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d0e:	b580      	push	{r7, lr}
 8005d10:	b082      	sub	sp, #8
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	691b      	ldr	r3, [r3, #16]
 8005d1c:	f003 0302 	and.w	r3, r3, #2
 8005d20:	2b02      	cmp	r3, #2
 8005d22:	d122      	bne.n	8005d6a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	68db      	ldr	r3, [r3, #12]
 8005d2a:	f003 0302 	and.w	r3, r3, #2
 8005d2e:	2b02      	cmp	r3, #2
 8005d30:	d11b      	bne.n	8005d6a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f06f 0202 	mvn.w	r2, #2
 8005d3a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	699b      	ldr	r3, [r3, #24]
 8005d48:	f003 0303 	and.w	r3, r3, #3
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d003      	beq.n	8005d58 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f7fc fb7b 	bl	800244c <HAL_TIM_IC_CaptureCallback>
 8005d56:	e005      	b.n	8005d64 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f000 fb3b 	bl	80063d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f000 fb41 	bl	80063e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	691b      	ldr	r3, [r3, #16]
 8005d70:	f003 0304 	and.w	r3, r3, #4
 8005d74:	2b04      	cmp	r3, #4
 8005d76:	d122      	bne.n	8005dbe <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	68db      	ldr	r3, [r3, #12]
 8005d7e:	f003 0304 	and.w	r3, r3, #4
 8005d82:	2b04      	cmp	r3, #4
 8005d84:	d11b      	bne.n	8005dbe <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f06f 0204 	mvn.w	r2, #4
 8005d8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2202      	movs	r2, #2
 8005d94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	699b      	ldr	r3, [r3, #24]
 8005d9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d003      	beq.n	8005dac <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f7fc fb51 	bl	800244c <HAL_TIM_IC_CaptureCallback>
 8005daa:	e005      	b.n	8005db8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f000 fb11 	bl	80063d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f000 fb17 	bl	80063e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	691b      	ldr	r3, [r3, #16]
 8005dc4:	f003 0308 	and.w	r3, r3, #8
 8005dc8:	2b08      	cmp	r3, #8
 8005dca:	d122      	bne.n	8005e12 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68db      	ldr	r3, [r3, #12]
 8005dd2:	f003 0308 	and.w	r3, r3, #8
 8005dd6:	2b08      	cmp	r3, #8
 8005dd8:	d11b      	bne.n	8005e12 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f06f 0208 	mvn.w	r2, #8
 8005de2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2204      	movs	r2, #4
 8005de8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	69db      	ldr	r3, [r3, #28]
 8005df0:	f003 0303 	and.w	r3, r3, #3
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d003      	beq.n	8005e00 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f7fc fb27 	bl	800244c <HAL_TIM_IC_CaptureCallback>
 8005dfe:	e005      	b.n	8005e0c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f000 fae7 	bl	80063d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f000 faed 	bl	80063e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	691b      	ldr	r3, [r3, #16]
 8005e18:	f003 0310 	and.w	r3, r3, #16
 8005e1c:	2b10      	cmp	r3, #16
 8005e1e:	d122      	bne.n	8005e66 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	68db      	ldr	r3, [r3, #12]
 8005e26:	f003 0310 	and.w	r3, r3, #16
 8005e2a:	2b10      	cmp	r3, #16
 8005e2c:	d11b      	bne.n	8005e66 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f06f 0210 	mvn.w	r2, #16
 8005e36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2208      	movs	r2, #8
 8005e3c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	69db      	ldr	r3, [r3, #28]
 8005e44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d003      	beq.n	8005e54 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f7fc fafd 	bl	800244c <HAL_TIM_IC_CaptureCallback>
 8005e52:	e005      	b.n	8005e60 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f000 fabd 	bl	80063d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f000 fac3 	bl	80063e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	691b      	ldr	r3, [r3, #16]
 8005e6c:	f003 0301 	and.w	r3, r3, #1
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d10e      	bne.n	8005e92 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	68db      	ldr	r3, [r3, #12]
 8005e7a:	f003 0301 	and.w	r3, r3, #1
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	d107      	bne.n	8005e92 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f06f 0201 	mvn.w	r2, #1
 8005e8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f7fc fb0f 	bl	80024b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	691b      	ldr	r3, [r3, #16]
 8005e98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e9c:	2b80      	cmp	r3, #128	; 0x80
 8005e9e:	d10e      	bne.n	8005ebe <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	68db      	ldr	r3, [r3, #12]
 8005ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eaa:	2b80      	cmp	r3, #128	; 0x80
 8005eac:	d107      	bne.n	8005ebe <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005eb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f000 ff16 	bl	8006cea <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	691b      	ldr	r3, [r3, #16]
 8005ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ec8:	2b40      	cmp	r3, #64	; 0x40
 8005eca:	d10e      	bne.n	8005eea <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	68db      	ldr	r3, [r3, #12]
 8005ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ed6:	2b40      	cmp	r3, #64	; 0x40
 8005ed8:	d107      	bne.n	8005eea <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ee2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f000 fa87 	bl	80063f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	691b      	ldr	r3, [r3, #16]
 8005ef0:	f003 0320 	and.w	r3, r3, #32
 8005ef4:	2b20      	cmp	r3, #32
 8005ef6:	d10e      	bne.n	8005f16 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	68db      	ldr	r3, [r3, #12]
 8005efe:	f003 0320 	and.w	r3, r3, #32
 8005f02:	2b20      	cmp	r3, #32
 8005f04:	d107      	bne.n	8005f16 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f06f 0220 	mvn.w	r2, #32
 8005f0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f000 fee1 	bl	8006cd8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f16:	bf00      	nop
 8005f18:	3708      	adds	r7, #8
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}

08005f1e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005f1e:	b580      	push	{r7, lr}
 8005f20:	b084      	sub	sp, #16
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	60f8      	str	r0, [r7, #12]
 8005f26:	60b9      	str	r1, [r7, #8]
 8005f28:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d101      	bne.n	8005f38 <HAL_TIM_IC_ConfigChannel+0x1a>
 8005f34:	2302      	movs	r3, #2
 8005f36:	e082      	b.n	800603e <HAL_TIM_IC_ConfigChannel+0x120>
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d11b      	bne.n	8005f7e <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	6818      	ldr	r0, [r3, #0]
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	6819      	ldr	r1, [r3, #0]
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	685a      	ldr	r2, [r3, #4]
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	68db      	ldr	r3, [r3, #12]
 8005f56:	f000 fc7f 	bl	8006858 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	699a      	ldr	r2, [r3, #24]
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f022 020c 	bic.w	r2, r2, #12
 8005f68:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	6999      	ldr	r1, [r3, #24]
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	689a      	ldr	r2, [r3, #8]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	430a      	orrs	r2, r1
 8005f7a:	619a      	str	r2, [r3, #24]
 8005f7c:	e05a      	b.n	8006034 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2b04      	cmp	r3, #4
 8005f82:	d11c      	bne.n	8005fbe <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6818      	ldr	r0, [r3, #0]
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	6819      	ldr	r1, [r3, #0]
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	685a      	ldr	r2, [r3, #4]
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	68db      	ldr	r3, [r3, #12]
 8005f94:	f000 fcf4 	bl	8006980 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	699a      	ldr	r2, [r3, #24]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005fa6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	6999      	ldr	r1, [r3, #24]
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	021a      	lsls	r2, r3, #8
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	430a      	orrs	r2, r1
 8005fba:	619a      	str	r2, [r3, #24]
 8005fbc:	e03a      	b.n	8006034 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2b08      	cmp	r3, #8
 8005fc2:	d11b      	bne.n	8005ffc <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	6818      	ldr	r0, [r3, #0]
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	6819      	ldr	r1, [r3, #0]
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	685a      	ldr	r2, [r3, #4]
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	68db      	ldr	r3, [r3, #12]
 8005fd4:	f000 fd3f 	bl	8006a56 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	69da      	ldr	r2, [r3, #28]
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f022 020c 	bic.w	r2, r2, #12
 8005fe6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	69d9      	ldr	r1, [r3, #28]
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	689a      	ldr	r2, [r3, #8]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	430a      	orrs	r2, r1
 8005ff8:	61da      	str	r2, [r3, #28]
 8005ffa:	e01b      	b.n	8006034 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6818      	ldr	r0, [r3, #0]
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	6819      	ldr	r1, [r3, #0]
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	685a      	ldr	r2, [r3, #4]
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	68db      	ldr	r3, [r3, #12]
 800600c:	f000 fd5e 	bl	8006acc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	69da      	ldr	r2, [r3, #28]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800601e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	69d9      	ldr	r1, [r3, #28]
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	021a      	lsls	r2, r3, #8
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	430a      	orrs	r2, r1
 8006032:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2200      	movs	r2, #0
 8006038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800603c:	2300      	movs	r3, #0
}
 800603e:	4618      	mov	r0, r3
 8006040:	3710      	adds	r7, #16
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}
	...

08006048 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b084      	sub	sp, #16
 800604c:	af00      	add	r7, sp, #0
 800604e:	60f8      	str	r0, [r7, #12]
 8006050:	60b9      	str	r1, [r7, #8]
 8006052:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800605a:	2b01      	cmp	r3, #1
 800605c:	d101      	bne.n	8006062 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800605e:	2302      	movs	r3, #2
 8006060:	e0ac      	b.n	80061bc <HAL_TIM_PWM_ConfigChannel+0x174>
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2201      	movs	r2, #1
 8006066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2b0c      	cmp	r3, #12
 800606e:	f200 809f 	bhi.w	80061b0 <HAL_TIM_PWM_ConfigChannel+0x168>
 8006072:	a201      	add	r2, pc, #4	; (adr r2, 8006078 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006078:	080060ad 	.word	0x080060ad
 800607c:	080061b1 	.word	0x080061b1
 8006080:	080061b1 	.word	0x080061b1
 8006084:	080061b1 	.word	0x080061b1
 8006088:	080060ed 	.word	0x080060ed
 800608c:	080061b1 	.word	0x080061b1
 8006090:	080061b1 	.word	0x080061b1
 8006094:	080061b1 	.word	0x080061b1
 8006098:	0800612f 	.word	0x0800612f
 800609c:	080061b1 	.word	0x080061b1
 80060a0:	080061b1 	.word	0x080061b1
 80060a4:	080061b1 	.word	0x080061b1
 80060a8:	0800616f 	.word	0x0800616f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	68b9      	ldr	r1, [r7, #8]
 80060b2:	4618      	mov	r0, r3
 80060b4:	f000 fa24 	bl	8006500 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	699a      	ldr	r2, [r3, #24]
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f042 0208 	orr.w	r2, r2, #8
 80060c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	699a      	ldr	r2, [r3, #24]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f022 0204 	bic.w	r2, r2, #4
 80060d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	6999      	ldr	r1, [r3, #24]
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	691a      	ldr	r2, [r3, #16]
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	430a      	orrs	r2, r1
 80060e8:	619a      	str	r2, [r3, #24]
      break;
 80060ea:	e062      	b.n	80061b2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	68b9      	ldr	r1, [r7, #8]
 80060f2:	4618      	mov	r0, r3
 80060f4:	f000 fa74 	bl	80065e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	699a      	ldr	r2, [r3, #24]
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006106:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	699a      	ldr	r2, [r3, #24]
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006116:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	6999      	ldr	r1, [r3, #24]
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	691b      	ldr	r3, [r3, #16]
 8006122:	021a      	lsls	r2, r3, #8
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	430a      	orrs	r2, r1
 800612a:	619a      	str	r2, [r3, #24]
      break;
 800612c:	e041      	b.n	80061b2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	68b9      	ldr	r1, [r7, #8]
 8006134:	4618      	mov	r0, r3
 8006136:	f000 fac7 	bl	80066c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	69da      	ldr	r2, [r3, #28]
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f042 0208 	orr.w	r2, r2, #8
 8006148:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	69da      	ldr	r2, [r3, #28]
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f022 0204 	bic.w	r2, r2, #4
 8006158:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	69d9      	ldr	r1, [r3, #28]
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	691a      	ldr	r2, [r3, #16]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	430a      	orrs	r2, r1
 800616a:	61da      	str	r2, [r3, #28]
      break;
 800616c:	e021      	b.n	80061b2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	68b9      	ldr	r1, [r7, #8]
 8006174:	4618      	mov	r0, r3
 8006176:	f000 fb1b 	bl	80067b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	69da      	ldr	r2, [r3, #28]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006188:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	69da      	ldr	r2, [r3, #28]
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006198:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	69d9      	ldr	r1, [r3, #28]
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	691b      	ldr	r3, [r3, #16]
 80061a4:	021a      	lsls	r2, r3, #8
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	430a      	orrs	r2, r1
 80061ac:	61da      	str	r2, [r3, #28]
      break;
 80061ae:	e000      	b.n	80061b2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80061b0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2200      	movs	r2, #0
 80061b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061ba:	2300      	movs	r3, #0
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3710      	adds	r7, #16
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}

080061c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	d101      	bne.n	80061dc <HAL_TIM_ConfigClockSource+0x18>
 80061d8:	2302      	movs	r3, #2
 80061da:	e0b3      	b.n	8006344 <HAL_TIM_ConfigClockSource+0x180>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2201      	movs	r2, #1
 80061e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2202      	movs	r2, #2
 80061e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80061fa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006202:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	68fa      	ldr	r2, [r7, #12]
 800620a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006214:	d03e      	beq.n	8006294 <HAL_TIM_ConfigClockSource+0xd0>
 8006216:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800621a:	f200 8087 	bhi.w	800632c <HAL_TIM_ConfigClockSource+0x168>
 800621e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006222:	f000 8085 	beq.w	8006330 <HAL_TIM_ConfigClockSource+0x16c>
 8006226:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800622a:	d87f      	bhi.n	800632c <HAL_TIM_ConfigClockSource+0x168>
 800622c:	2b70      	cmp	r3, #112	; 0x70
 800622e:	d01a      	beq.n	8006266 <HAL_TIM_ConfigClockSource+0xa2>
 8006230:	2b70      	cmp	r3, #112	; 0x70
 8006232:	d87b      	bhi.n	800632c <HAL_TIM_ConfigClockSource+0x168>
 8006234:	2b60      	cmp	r3, #96	; 0x60
 8006236:	d050      	beq.n	80062da <HAL_TIM_ConfigClockSource+0x116>
 8006238:	2b60      	cmp	r3, #96	; 0x60
 800623a:	d877      	bhi.n	800632c <HAL_TIM_ConfigClockSource+0x168>
 800623c:	2b50      	cmp	r3, #80	; 0x50
 800623e:	d03c      	beq.n	80062ba <HAL_TIM_ConfigClockSource+0xf6>
 8006240:	2b50      	cmp	r3, #80	; 0x50
 8006242:	d873      	bhi.n	800632c <HAL_TIM_ConfigClockSource+0x168>
 8006244:	2b40      	cmp	r3, #64	; 0x40
 8006246:	d058      	beq.n	80062fa <HAL_TIM_ConfigClockSource+0x136>
 8006248:	2b40      	cmp	r3, #64	; 0x40
 800624a:	d86f      	bhi.n	800632c <HAL_TIM_ConfigClockSource+0x168>
 800624c:	2b30      	cmp	r3, #48	; 0x30
 800624e:	d064      	beq.n	800631a <HAL_TIM_ConfigClockSource+0x156>
 8006250:	2b30      	cmp	r3, #48	; 0x30
 8006252:	d86b      	bhi.n	800632c <HAL_TIM_ConfigClockSource+0x168>
 8006254:	2b20      	cmp	r3, #32
 8006256:	d060      	beq.n	800631a <HAL_TIM_ConfigClockSource+0x156>
 8006258:	2b20      	cmp	r3, #32
 800625a:	d867      	bhi.n	800632c <HAL_TIM_ConfigClockSource+0x168>
 800625c:	2b00      	cmp	r3, #0
 800625e:	d05c      	beq.n	800631a <HAL_TIM_ConfigClockSource+0x156>
 8006260:	2b10      	cmp	r3, #16
 8006262:	d05a      	beq.n	800631a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006264:	e062      	b.n	800632c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6818      	ldr	r0, [r3, #0]
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	6899      	ldr	r1, [r3, #8]
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	685a      	ldr	r2, [r3, #4]
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	68db      	ldr	r3, [r3, #12]
 8006276:	f000 fc7f 	bl	8006b78 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006288:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	68fa      	ldr	r2, [r7, #12]
 8006290:	609a      	str	r2, [r3, #8]
      break;
 8006292:	e04e      	b.n	8006332 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6818      	ldr	r0, [r3, #0]
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	6899      	ldr	r1, [r3, #8]
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	685a      	ldr	r2, [r3, #4]
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	68db      	ldr	r3, [r3, #12]
 80062a4:	f000 fc68 	bl	8006b78 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	689a      	ldr	r2, [r3, #8]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80062b6:	609a      	str	r2, [r3, #8]
      break;
 80062b8:	e03b      	b.n	8006332 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6818      	ldr	r0, [r3, #0]
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	6859      	ldr	r1, [r3, #4]
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	68db      	ldr	r3, [r3, #12]
 80062c6:	461a      	mov	r2, r3
 80062c8:	f000 fb2c 	bl	8006924 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	2150      	movs	r1, #80	; 0x50
 80062d2:	4618      	mov	r0, r3
 80062d4:	f000 fc36 	bl	8006b44 <TIM_ITRx_SetConfig>
      break;
 80062d8:	e02b      	b.n	8006332 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6818      	ldr	r0, [r3, #0]
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	6859      	ldr	r1, [r3, #4]
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	68db      	ldr	r3, [r3, #12]
 80062e6:	461a      	mov	r2, r3
 80062e8:	f000 fb86 	bl	80069f8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	2160      	movs	r1, #96	; 0x60
 80062f2:	4618      	mov	r0, r3
 80062f4:	f000 fc26 	bl	8006b44 <TIM_ITRx_SetConfig>
      break;
 80062f8:	e01b      	b.n	8006332 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6818      	ldr	r0, [r3, #0]
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	6859      	ldr	r1, [r3, #4]
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	68db      	ldr	r3, [r3, #12]
 8006306:	461a      	mov	r2, r3
 8006308:	f000 fb0c 	bl	8006924 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	2140      	movs	r1, #64	; 0x40
 8006312:	4618      	mov	r0, r3
 8006314:	f000 fc16 	bl	8006b44 <TIM_ITRx_SetConfig>
      break;
 8006318:	e00b      	b.n	8006332 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4619      	mov	r1, r3
 8006324:	4610      	mov	r0, r2
 8006326:	f000 fc0d 	bl	8006b44 <TIM_ITRx_SetConfig>
        break;
 800632a:	e002      	b.n	8006332 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800632c:	bf00      	nop
 800632e:	e000      	b.n	8006332 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006330:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2201      	movs	r2, #1
 8006336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2200      	movs	r2, #0
 800633e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006342:	2300      	movs	r3, #0
}
 8006344:	4618      	mov	r0, r3
 8006346:	3710      	adds	r7, #16
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}

0800634c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800634c:	b480      	push	{r7}
 800634e:	b085      	sub	sp, #20
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006356:	2300      	movs	r3, #0
 8006358:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	2b0c      	cmp	r3, #12
 800635e:	d831      	bhi.n	80063c4 <HAL_TIM_ReadCapturedValue+0x78>
 8006360:	a201      	add	r2, pc, #4	; (adr r2, 8006368 <HAL_TIM_ReadCapturedValue+0x1c>)
 8006362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006366:	bf00      	nop
 8006368:	0800639d 	.word	0x0800639d
 800636c:	080063c5 	.word	0x080063c5
 8006370:	080063c5 	.word	0x080063c5
 8006374:	080063c5 	.word	0x080063c5
 8006378:	080063a7 	.word	0x080063a7
 800637c:	080063c5 	.word	0x080063c5
 8006380:	080063c5 	.word	0x080063c5
 8006384:	080063c5 	.word	0x080063c5
 8006388:	080063b1 	.word	0x080063b1
 800638c:	080063c5 	.word	0x080063c5
 8006390:	080063c5 	.word	0x080063c5
 8006394:	080063c5 	.word	0x080063c5
 8006398:	080063bb 	.word	0x080063bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063a2:	60fb      	str	r3, [r7, #12]

      break;
 80063a4:	e00f      	b.n	80063c6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ac:	60fb      	str	r3, [r7, #12]

      break;
 80063ae:	e00a      	b.n	80063c6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063b6:	60fb      	str	r3, [r7, #12]

      break;
 80063b8:	e005      	b.n	80063c6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c0:	60fb      	str	r3, [r7, #12]

      break;
 80063c2:	e000      	b.n	80063c6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80063c4:	bf00      	nop
  }

  return tmpreg;
 80063c6:	68fb      	ldr	r3, [r7, #12]
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3714      	adds	r7, #20
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bc80      	pop	{r7}
 80063d0:	4770      	bx	lr
 80063d2:	bf00      	nop

080063d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b083      	sub	sp, #12
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80063dc:	bf00      	nop
 80063de:	370c      	adds	r7, #12
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bc80      	pop	{r7}
 80063e4:	4770      	bx	lr

080063e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80063e6:	b480      	push	{r7}
 80063e8:	b083      	sub	sp, #12
 80063ea:	af00      	add	r7, sp, #0
 80063ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80063ee:	bf00      	nop
 80063f0:	370c      	adds	r7, #12
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bc80      	pop	{r7}
 80063f6:	4770      	bx	lr

080063f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b083      	sub	sp, #12
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006400:	bf00      	nop
 8006402:	370c      	adds	r7, #12
 8006404:	46bd      	mov	sp, r7
 8006406:	bc80      	pop	{r7}
 8006408:	4770      	bx	lr
	...

0800640c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800640c:	b480      	push	{r7}
 800640e:	b085      	sub	sp, #20
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
 8006414:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	4a33      	ldr	r2, [pc, #204]	; (80064ec <TIM_Base_SetConfig+0xe0>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d013      	beq.n	800644c <TIM_Base_SetConfig+0x40>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	4a32      	ldr	r2, [pc, #200]	; (80064f0 <TIM_Base_SetConfig+0xe4>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d00f      	beq.n	800644c <TIM_Base_SetConfig+0x40>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006432:	d00b      	beq.n	800644c <TIM_Base_SetConfig+0x40>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	4a2f      	ldr	r2, [pc, #188]	; (80064f4 <TIM_Base_SetConfig+0xe8>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d007      	beq.n	800644c <TIM_Base_SetConfig+0x40>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	4a2e      	ldr	r2, [pc, #184]	; (80064f8 <TIM_Base_SetConfig+0xec>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d003      	beq.n	800644c <TIM_Base_SetConfig+0x40>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	4a2d      	ldr	r2, [pc, #180]	; (80064fc <TIM_Base_SetConfig+0xf0>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d108      	bne.n	800645e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006452:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	68fa      	ldr	r2, [r7, #12]
 800645a:	4313      	orrs	r3, r2
 800645c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	4a22      	ldr	r2, [pc, #136]	; (80064ec <TIM_Base_SetConfig+0xe0>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d013      	beq.n	800648e <TIM_Base_SetConfig+0x82>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	4a21      	ldr	r2, [pc, #132]	; (80064f0 <TIM_Base_SetConfig+0xe4>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d00f      	beq.n	800648e <TIM_Base_SetConfig+0x82>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006474:	d00b      	beq.n	800648e <TIM_Base_SetConfig+0x82>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	4a1e      	ldr	r2, [pc, #120]	; (80064f4 <TIM_Base_SetConfig+0xe8>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d007      	beq.n	800648e <TIM_Base_SetConfig+0x82>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	4a1d      	ldr	r2, [pc, #116]	; (80064f8 <TIM_Base_SetConfig+0xec>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d003      	beq.n	800648e <TIM_Base_SetConfig+0x82>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	4a1c      	ldr	r2, [pc, #112]	; (80064fc <TIM_Base_SetConfig+0xf0>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d108      	bne.n	80064a0 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006494:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	68db      	ldr	r3, [r3, #12]
 800649a:	68fa      	ldr	r2, [r7, #12]
 800649c:	4313      	orrs	r3, r2
 800649e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	695b      	ldr	r3, [r3, #20]
 80064aa:	4313      	orrs	r3, r2
 80064ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	68fa      	ldr	r2, [r7, #12]
 80064b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	689a      	ldr	r2, [r3, #8]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	681a      	ldr	r2, [r3, #0]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	4a09      	ldr	r2, [pc, #36]	; (80064ec <TIM_Base_SetConfig+0xe0>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d003      	beq.n	80064d4 <TIM_Base_SetConfig+0xc8>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	4a08      	ldr	r2, [pc, #32]	; (80064f0 <TIM_Base_SetConfig+0xe4>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d103      	bne.n	80064dc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	691a      	ldr	r2, [r3, #16]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2201      	movs	r2, #1
 80064e0:	615a      	str	r2, [r3, #20]
}
 80064e2:	bf00      	nop
 80064e4:	3714      	adds	r7, #20
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bc80      	pop	{r7}
 80064ea:	4770      	bx	lr
 80064ec:	40012c00 	.word	0x40012c00
 80064f0:	40013400 	.word	0x40013400
 80064f4:	40000400 	.word	0x40000400
 80064f8:	40000800 	.word	0x40000800
 80064fc:	40000c00 	.word	0x40000c00

08006500 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006500:	b480      	push	{r7}
 8006502:	b087      	sub	sp, #28
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6a1b      	ldr	r3, [r3, #32]
 800650e:	f023 0201 	bic.w	r2, r3, #1
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6a1b      	ldr	r3, [r3, #32]
 800651a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	699b      	ldr	r3, [r3, #24]
 8006526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800652e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f023 0303 	bic.w	r3, r3, #3
 8006536:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	68fa      	ldr	r2, [r7, #12]
 800653e:	4313      	orrs	r3, r2
 8006540:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	f023 0302 	bic.w	r3, r3, #2
 8006548:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	689b      	ldr	r3, [r3, #8]
 800654e:	697a      	ldr	r2, [r7, #20]
 8006550:	4313      	orrs	r3, r2
 8006552:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	4a20      	ldr	r2, [pc, #128]	; (80065d8 <TIM_OC1_SetConfig+0xd8>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d003      	beq.n	8006564 <TIM_OC1_SetConfig+0x64>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	4a1f      	ldr	r2, [pc, #124]	; (80065dc <TIM_OC1_SetConfig+0xdc>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d10c      	bne.n	800657e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	f023 0308 	bic.w	r3, r3, #8
 800656a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	68db      	ldr	r3, [r3, #12]
 8006570:	697a      	ldr	r2, [r7, #20]
 8006572:	4313      	orrs	r3, r2
 8006574:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	f023 0304 	bic.w	r3, r3, #4
 800657c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	4a15      	ldr	r2, [pc, #84]	; (80065d8 <TIM_OC1_SetConfig+0xd8>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d003      	beq.n	800658e <TIM_OC1_SetConfig+0x8e>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	4a14      	ldr	r2, [pc, #80]	; (80065dc <TIM_OC1_SetConfig+0xdc>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d111      	bne.n	80065b2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006594:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800659c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	695b      	ldr	r3, [r3, #20]
 80065a2:	693a      	ldr	r2, [r7, #16]
 80065a4:	4313      	orrs	r3, r2
 80065a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	699b      	ldr	r3, [r3, #24]
 80065ac:	693a      	ldr	r2, [r7, #16]
 80065ae:	4313      	orrs	r3, r2
 80065b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	693a      	ldr	r2, [r7, #16]
 80065b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	68fa      	ldr	r2, [r7, #12]
 80065bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	685a      	ldr	r2, [r3, #4]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	697a      	ldr	r2, [r7, #20]
 80065ca:	621a      	str	r2, [r3, #32]
}
 80065cc:	bf00      	nop
 80065ce:	371c      	adds	r7, #28
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bc80      	pop	{r7}
 80065d4:	4770      	bx	lr
 80065d6:	bf00      	nop
 80065d8:	40012c00 	.word	0x40012c00
 80065dc:	40013400 	.word	0x40013400

080065e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b087      	sub	sp, #28
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6a1b      	ldr	r3, [r3, #32]
 80065ee:	f023 0210 	bic.w	r2, r3, #16
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6a1b      	ldr	r3, [r3, #32]
 80065fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	699b      	ldr	r3, [r3, #24]
 8006606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800660e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006616:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	021b      	lsls	r3, r3, #8
 800661e:	68fa      	ldr	r2, [r7, #12]
 8006620:	4313      	orrs	r3, r2
 8006622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	f023 0320 	bic.w	r3, r3, #32
 800662a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	011b      	lsls	r3, r3, #4
 8006632:	697a      	ldr	r2, [r7, #20]
 8006634:	4313      	orrs	r3, r2
 8006636:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	4a21      	ldr	r2, [pc, #132]	; (80066c0 <TIM_OC2_SetConfig+0xe0>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d003      	beq.n	8006648 <TIM_OC2_SetConfig+0x68>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	4a20      	ldr	r2, [pc, #128]	; (80066c4 <TIM_OC2_SetConfig+0xe4>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d10d      	bne.n	8006664 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800664e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	68db      	ldr	r3, [r3, #12]
 8006654:	011b      	lsls	r3, r3, #4
 8006656:	697a      	ldr	r2, [r7, #20]
 8006658:	4313      	orrs	r3, r2
 800665a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006662:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	4a16      	ldr	r2, [pc, #88]	; (80066c0 <TIM_OC2_SetConfig+0xe0>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d003      	beq.n	8006674 <TIM_OC2_SetConfig+0x94>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	4a15      	ldr	r2, [pc, #84]	; (80066c4 <TIM_OC2_SetConfig+0xe4>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d113      	bne.n	800669c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800667a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006682:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	695b      	ldr	r3, [r3, #20]
 8006688:	009b      	lsls	r3, r3, #2
 800668a:	693a      	ldr	r2, [r7, #16]
 800668c:	4313      	orrs	r3, r2
 800668e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	699b      	ldr	r3, [r3, #24]
 8006694:	009b      	lsls	r3, r3, #2
 8006696:	693a      	ldr	r2, [r7, #16]
 8006698:	4313      	orrs	r3, r2
 800669a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	693a      	ldr	r2, [r7, #16]
 80066a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	68fa      	ldr	r2, [r7, #12]
 80066a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	685a      	ldr	r2, [r3, #4]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	697a      	ldr	r2, [r7, #20]
 80066b4:	621a      	str	r2, [r3, #32]
}
 80066b6:	bf00      	nop
 80066b8:	371c      	adds	r7, #28
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bc80      	pop	{r7}
 80066be:	4770      	bx	lr
 80066c0:	40012c00 	.word	0x40012c00
 80066c4:	40013400 	.word	0x40013400

080066c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b087      	sub	sp, #28
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
 80066d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6a1b      	ldr	r3, [r3, #32]
 80066d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6a1b      	ldr	r3, [r3, #32]
 80066e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	69db      	ldr	r3, [r3, #28]
 80066ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f023 0303 	bic.w	r3, r3, #3
 80066fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	68fa      	ldr	r2, [r7, #12]
 8006706:	4313      	orrs	r3, r2
 8006708:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006710:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	689b      	ldr	r3, [r3, #8]
 8006716:	021b      	lsls	r3, r3, #8
 8006718:	697a      	ldr	r2, [r7, #20]
 800671a:	4313      	orrs	r3, r2
 800671c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	4a21      	ldr	r2, [pc, #132]	; (80067a8 <TIM_OC3_SetConfig+0xe0>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d003      	beq.n	800672e <TIM_OC3_SetConfig+0x66>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	4a20      	ldr	r2, [pc, #128]	; (80067ac <TIM_OC3_SetConfig+0xe4>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d10d      	bne.n	800674a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006734:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	68db      	ldr	r3, [r3, #12]
 800673a:	021b      	lsls	r3, r3, #8
 800673c:	697a      	ldr	r2, [r7, #20]
 800673e:	4313      	orrs	r3, r2
 8006740:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006748:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	4a16      	ldr	r2, [pc, #88]	; (80067a8 <TIM_OC3_SetConfig+0xe0>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d003      	beq.n	800675a <TIM_OC3_SetConfig+0x92>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	4a15      	ldr	r2, [pc, #84]	; (80067ac <TIM_OC3_SetConfig+0xe4>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d113      	bne.n	8006782 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006760:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006768:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	695b      	ldr	r3, [r3, #20]
 800676e:	011b      	lsls	r3, r3, #4
 8006770:	693a      	ldr	r2, [r7, #16]
 8006772:	4313      	orrs	r3, r2
 8006774:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	699b      	ldr	r3, [r3, #24]
 800677a:	011b      	lsls	r3, r3, #4
 800677c:	693a      	ldr	r2, [r7, #16]
 800677e:	4313      	orrs	r3, r2
 8006780:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	693a      	ldr	r2, [r7, #16]
 8006786:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	68fa      	ldr	r2, [r7, #12]
 800678c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	685a      	ldr	r2, [r3, #4]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	697a      	ldr	r2, [r7, #20]
 800679a:	621a      	str	r2, [r3, #32]
}
 800679c:	bf00      	nop
 800679e:	371c      	adds	r7, #28
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bc80      	pop	{r7}
 80067a4:	4770      	bx	lr
 80067a6:	bf00      	nop
 80067a8:	40012c00 	.word	0x40012c00
 80067ac:	40013400 	.word	0x40013400

080067b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b087      	sub	sp, #28
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
 80067b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6a1b      	ldr	r3, [r3, #32]
 80067be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6a1b      	ldr	r3, [r3, #32]
 80067ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	69db      	ldr	r3, [r3, #28]
 80067d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	021b      	lsls	r3, r3, #8
 80067ee:	68fa      	ldr	r2, [r7, #12]
 80067f0:	4313      	orrs	r3, r2
 80067f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80067fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	689b      	ldr	r3, [r3, #8]
 8006800:	031b      	lsls	r3, r3, #12
 8006802:	693a      	ldr	r2, [r7, #16]
 8006804:	4313      	orrs	r3, r2
 8006806:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	4a11      	ldr	r2, [pc, #68]	; (8006850 <TIM_OC4_SetConfig+0xa0>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d003      	beq.n	8006818 <TIM_OC4_SetConfig+0x68>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	4a10      	ldr	r2, [pc, #64]	; (8006854 <TIM_OC4_SetConfig+0xa4>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d109      	bne.n	800682c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800681e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	695b      	ldr	r3, [r3, #20]
 8006824:	019b      	lsls	r3, r3, #6
 8006826:	697a      	ldr	r2, [r7, #20]
 8006828:	4313      	orrs	r3, r2
 800682a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	697a      	ldr	r2, [r7, #20]
 8006830:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	68fa      	ldr	r2, [r7, #12]
 8006836:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	685a      	ldr	r2, [r3, #4]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	693a      	ldr	r2, [r7, #16]
 8006844:	621a      	str	r2, [r3, #32]
}
 8006846:	bf00      	nop
 8006848:	371c      	adds	r7, #28
 800684a:	46bd      	mov	sp, r7
 800684c:	bc80      	pop	{r7}
 800684e:	4770      	bx	lr
 8006850:	40012c00 	.word	0x40012c00
 8006854:	40013400 	.word	0x40013400

08006858 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006858:	b480      	push	{r7}
 800685a:	b087      	sub	sp, #28
 800685c:	af00      	add	r7, sp, #0
 800685e:	60f8      	str	r0, [r7, #12]
 8006860:	60b9      	str	r1, [r7, #8]
 8006862:	607a      	str	r2, [r7, #4]
 8006864:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	6a1b      	ldr	r3, [r3, #32]
 800686a:	f023 0201 	bic.w	r2, r3, #1
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	699b      	ldr	r3, [r3, #24]
 8006876:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	6a1b      	ldr	r3, [r3, #32]
 800687c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	4a23      	ldr	r2, [pc, #140]	; (8006910 <TIM_TI1_SetConfig+0xb8>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d013      	beq.n	80068ae <TIM_TI1_SetConfig+0x56>
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	4a22      	ldr	r2, [pc, #136]	; (8006914 <TIM_TI1_SetConfig+0xbc>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d00f      	beq.n	80068ae <TIM_TI1_SetConfig+0x56>
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006894:	d00b      	beq.n	80068ae <TIM_TI1_SetConfig+0x56>
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	4a1f      	ldr	r2, [pc, #124]	; (8006918 <TIM_TI1_SetConfig+0xc0>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d007      	beq.n	80068ae <TIM_TI1_SetConfig+0x56>
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	4a1e      	ldr	r2, [pc, #120]	; (800691c <TIM_TI1_SetConfig+0xc4>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d003      	beq.n	80068ae <TIM_TI1_SetConfig+0x56>
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	4a1d      	ldr	r2, [pc, #116]	; (8006920 <TIM_TI1_SetConfig+0xc8>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d101      	bne.n	80068b2 <TIM_TI1_SetConfig+0x5a>
 80068ae:	2301      	movs	r3, #1
 80068b0:	e000      	b.n	80068b4 <TIM_TI1_SetConfig+0x5c>
 80068b2:	2300      	movs	r3, #0
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d008      	beq.n	80068ca <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	f023 0303 	bic.w	r3, r3, #3
 80068be:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80068c0:	697a      	ldr	r2, [r7, #20]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	4313      	orrs	r3, r2
 80068c6:	617b      	str	r3, [r7, #20]
 80068c8:	e003      	b.n	80068d2 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	f043 0301 	orr.w	r3, r3, #1
 80068d0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80068d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	011b      	lsls	r3, r3, #4
 80068de:	b2db      	uxtb	r3, r3
 80068e0:	697a      	ldr	r2, [r7, #20]
 80068e2:	4313      	orrs	r3, r2
 80068e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	f023 030a 	bic.w	r3, r3, #10
 80068ec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	f003 030a 	and.w	r3, r3, #10
 80068f4:	693a      	ldr	r2, [r7, #16]
 80068f6:	4313      	orrs	r3, r2
 80068f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	697a      	ldr	r2, [r7, #20]
 80068fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	693a      	ldr	r2, [r7, #16]
 8006904:	621a      	str	r2, [r3, #32]
}
 8006906:	bf00      	nop
 8006908:	371c      	adds	r7, #28
 800690a:	46bd      	mov	sp, r7
 800690c:	bc80      	pop	{r7}
 800690e:	4770      	bx	lr
 8006910:	40012c00 	.word	0x40012c00
 8006914:	40013400 	.word	0x40013400
 8006918:	40000400 	.word	0x40000400
 800691c:	40000800 	.word	0x40000800
 8006920:	40000c00 	.word	0x40000c00

08006924 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006924:	b480      	push	{r7}
 8006926:	b087      	sub	sp, #28
 8006928:	af00      	add	r7, sp, #0
 800692a:	60f8      	str	r0, [r7, #12]
 800692c:	60b9      	str	r1, [r7, #8]
 800692e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	6a1b      	ldr	r3, [r3, #32]
 8006934:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	6a1b      	ldr	r3, [r3, #32]
 800693a:	f023 0201 	bic.w	r2, r3, #1
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	699b      	ldr	r3, [r3, #24]
 8006946:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800694e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	011b      	lsls	r3, r3, #4
 8006954:	693a      	ldr	r2, [r7, #16]
 8006956:	4313      	orrs	r3, r2
 8006958:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	f023 030a 	bic.w	r3, r3, #10
 8006960:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006962:	697a      	ldr	r2, [r7, #20]
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	4313      	orrs	r3, r2
 8006968:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	693a      	ldr	r2, [r7, #16]
 800696e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	697a      	ldr	r2, [r7, #20]
 8006974:	621a      	str	r2, [r3, #32]
}
 8006976:	bf00      	nop
 8006978:	371c      	adds	r7, #28
 800697a:	46bd      	mov	sp, r7
 800697c:	bc80      	pop	{r7}
 800697e:	4770      	bx	lr

08006980 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006980:	b480      	push	{r7}
 8006982:	b087      	sub	sp, #28
 8006984:	af00      	add	r7, sp, #0
 8006986:	60f8      	str	r0, [r7, #12]
 8006988:	60b9      	str	r1, [r7, #8]
 800698a:	607a      	str	r2, [r7, #4]
 800698c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	6a1b      	ldr	r3, [r3, #32]
 8006992:	f023 0210 	bic.w	r2, r3, #16
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	699b      	ldr	r3, [r3, #24]
 800699e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	6a1b      	ldr	r3, [r3, #32]
 80069a4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	021b      	lsls	r3, r3, #8
 80069b2:	697a      	ldr	r2, [r7, #20]
 80069b4:	4313      	orrs	r3, r2
 80069b6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80069be:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	031b      	lsls	r3, r3, #12
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	697a      	ldr	r2, [r7, #20]
 80069c8:	4313      	orrs	r3, r2
 80069ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80069d2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	011b      	lsls	r3, r3, #4
 80069d8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80069dc:	693a      	ldr	r2, [r7, #16]
 80069de:	4313      	orrs	r3, r2
 80069e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	697a      	ldr	r2, [r7, #20]
 80069e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	693a      	ldr	r2, [r7, #16]
 80069ec:	621a      	str	r2, [r3, #32]
}
 80069ee:	bf00      	nop
 80069f0:	371c      	adds	r7, #28
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bc80      	pop	{r7}
 80069f6:	4770      	bx	lr

080069f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b087      	sub	sp, #28
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	60f8      	str	r0, [r7, #12]
 8006a00:	60b9      	str	r1, [r7, #8]
 8006a02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	6a1b      	ldr	r3, [r3, #32]
 8006a08:	f023 0210 	bic.w	r2, r3, #16
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	699b      	ldr	r3, [r3, #24]
 8006a14:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	6a1b      	ldr	r3, [r3, #32]
 8006a1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a22:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	031b      	lsls	r3, r3, #12
 8006a28:	697a      	ldr	r2, [r7, #20]
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006a34:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	011b      	lsls	r3, r3, #4
 8006a3a:	693a      	ldr	r2, [r7, #16]
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	697a      	ldr	r2, [r7, #20]
 8006a44:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	693a      	ldr	r2, [r7, #16]
 8006a4a:	621a      	str	r2, [r3, #32]
}
 8006a4c:	bf00      	nop
 8006a4e:	371c      	adds	r7, #28
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bc80      	pop	{r7}
 8006a54:	4770      	bx	lr

08006a56 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006a56:	b480      	push	{r7}
 8006a58:	b087      	sub	sp, #28
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	60f8      	str	r0, [r7, #12]
 8006a5e:	60b9      	str	r1, [r7, #8]
 8006a60:	607a      	str	r2, [r7, #4]
 8006a62:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	6a1b      	ldr	r3, [r3, #32]
 8006a68:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	69db      	ldr	r3, [r3, #28]
 8006a74:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	6a1b      	ldr	r3, [r3, #32]
 8006a7a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	f023 0303 	bic.w	r3, r3, #3
 8006a82:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006a84:	697a      	ldr	r2, [r7, #20]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a92:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	011b      	lsls	r3, r3, #4
 8006a98:	b2db      	uxtb	r3, r3
 8006a9a:	697a      	ldr	r2, [r7, #20]
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006aa6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	021b      	lsls	r3, r3, #8
 8006aac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ab0:	693a      	ldr	r2, [r7, #16]
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	697a      	ldr	r2, [r7, #20]
 8006aba:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	693a      	ldr	r2, [r7, #16]
 8006ac0:	621a      	str	r2, [r3, #32]
}
 8006ac2:	bf00      	nop
 8006ac4:	371c      	adds	r7, #28
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bc80      	pop	{r7}
 8006aca:	4770      	bx	lr

08006acc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b087      	sub	sp, #28
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	60f8      	str	r0, [r7, #12]
 8006ad4:	60b9      	str	r1, [r7, #8]
 8006ad6:	607a      	str	r2, [r7, #4]
 8006ad8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	6a1b      	ldr	r3, [r3, #32]
 8006ade:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	69db      	ldr	r3, [r3, #28]
 8006aea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	6a1b      	ldr	r3, [r3, #32]
 8006af0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006af8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	021b      	lsls	r3, r3, #8
 8006afe:	697a      	ldr	r2, [r7, #20]
 8006b00:	4313      	orrs	r3, r2
 8006b02:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006b0a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	031b      	lsls	r3, r3, #12
 8006b10:	b29b      	uxth	r3, r3
 8006b12:	697a      	ldr	r2, [r7, #20]
 8006b14:	4313      	orrs	r3, r2
 8006b16:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b1e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	031b      	lsls	r3, r3, #12
 8006b24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006b28:	693a      	ldr	r2, [r7, #16]
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	697a      	ldr	r2, [r7, #20]
 8006b32:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	693a      	ldr	r2, [r7, #16]
 8006b38:	621a      	str	r2, [r3, #32]
}
 8006b3a:	bf00      	nop
 8006b3c:	371c      	adds	r7, #28
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bc80      	pop	{r7}
 8006b42:	4770      	bx	lr

08006b44 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b085      	sub	sp, #20
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
 8006b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	689b      	ldr	r3, [r3, #8]
 8006b52:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b5a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006b5c:	683a      	ldr	r2, [r7, #0]
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	4313      	orrs	r3, r2
 8006b62:	f043 0307 	orr.w	r3, r3, #7
 8006b66:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	68fa      	ldr	r2, [r7, #12]
 8006b6c:	609a      	str	r2, [r3, #8]
}
 8006b6e:	bf00      	nop
 8006b70:	3714      	adds	r7, #20
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bc80      	pop	{r7}
 8006b76:	4770      	bx	lr

08006b78 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b087      	sub	sp, #28
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	60f8      	str	r0, [r7, #12]
 8006b80:	60b9      	str	r1, [r7, #8]
 8006b82:	607a      	str	r2, [r7, #4]
 8006b84:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	689b      	ldr	r3, [r3, #8]
 8006b8a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b92:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	021a      	lsls	r2, r3, #8
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	431a      	orrs	r2, r3
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	697a      	ldr	r2, [r7, #20]
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	697a      	ldr	r2, [r7, #20]
 8006baa:	609a      	str	r2, [r3, #8]
}
 8006bac:	bf00      	nop
 8006bae:	371c      	adds	r7, #28
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bc80      	pop	{r7}
 8006bb4:	4770      	bx	lr

08006bb6 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006bb6:	b480      	push	{r7}
 8006bb8:	b087      	sub	sp, #28
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	60f8      	str	r0, [r7, #12]
 8006bbe:	60b9      	str	r1, [r7, #8]
 8006bc0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	f003 031f 	and.w	r3, r3, #31
 8006bc8:	2201      	movs	r2, #1
 8006bca:	fa02 f303 	lsl.w	r3, r2, r3
 8006bce:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	6a1a      	ldr	r2, [r3, #32]
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	43db      	mvns	r3, r3
 8006bd8:	401a      	ands	r2, r3
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	6a1a      	ldr	r2, [r3, #32]
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	f003 031f 	and.w	r3, r3, #31
 8006be8:	6879      	ldr	r1, [r7, #4]
 8006bea:	fa01 f303 	lsl.w	r3, r1, r3
 8006bee:	431a      	orrs	r2, r3
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	621a      	str	r2, [r3, #32]
}
 8006bf4:	bf00      	nop
 8006bf6:	371c      	adds	r7, #28
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bc80      	pop	{r7}
 8006bfc:	4770      	bx	lr
	...

08006c00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b085      	sub	sp, #20
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
 8006c08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d101      	bne.n	8006c18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c14:	2302      	movs	r3, #2
 8006c16:	e050      	b.n	8006cba <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2202      	movs	r2, #2
 8006c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	689b      	ldr	r3, [r3, #8]
 8006c36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	68fa      	ldr	r2, [r7, #12]
 8006c46:	4313      	orrs	r3, r2
 8006c48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	68fa      	ldr	r2, [r7, #12]
 8006c50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a1b      	ldr	r2, [pc, #108]	; (8006cc4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d018      	beq.n	8006c8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a19      	ldr	r2, [pc, #100]	; (8006cc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d013      	beq.n	8006c8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c6e:	d00e      	beq.n	8006c8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a15      	ldr	r2, [pc, #84]	; (8006ccc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d009      	beq.n	8006c8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a14      	ldr	r2, [pc, #80]	; (8006cd0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d004      	beq.n	8006c8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a12      	ldr	r2, [pc, #72]	; (8006cd4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d10c      	bne.n	8006ca8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c94:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	685b      	ldr	r3, [r3, #4]
 8006c9a:	68ba      	ldr	r2, [r7, #8]
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	68ba      	ldr	r2, [r7, #8]
 8006ca6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2201      	movs	r2, #1
 8006cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006cb8:	2300      	movs	r3, #0
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3714      	adds	r7, #20
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bc80      	pop	{r7}
 8006cc2:	4770      	bx	lr
 8006cc4:	40012c00 	.word	0x40012c00
 8006cc8:	40013400 	.word	0x40013400
 8006ccc:	40000400 	.word	0x40000400
 8006cd0:	40000800 	.word	0x40000800
 8006cd4:	40000c00 	.word	0x40000c00

08006cd8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b083      	sub	sp, #12
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ce0:	bf00      	nop
 8006ce2:	370c      	adds	r7, #12
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bc80      	pop	{r7}
 8006ce8:	4770      	bx	lr

08006cea <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006cea:	b480      	push	{r7}
 8006cec:	b083      	sub	sp, #12
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006cf2:	bf00      	nop
 8006cf4:	370c      	adds	r7, #12
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bc80      	pop	{r7}
 8006cfa:	4770      	bx	lr

08006cfc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b082      	sub	sp, #8
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d101      	bne.n	8006d0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	e03f      	b.n	8006d8e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d14:	b2db      	uxtb	r3, r3
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d106      	bne.n	8006d28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f7fc f81c 	bl	8002d60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2224      	movs	r2, #36	; 0x24
 8006d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	68da      	ldr	r2, [r3, #12]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006d3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f000 fe43 	bl	80079cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	691a      	ldr	r2, [r3, #16]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006d54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	695a      	ldr	r2, [r3, #20]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006d64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	68da      	ldr	r2, [r3, #12]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006d74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2220      	movs	r2, #32
 8006d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2220      	movs	r2, #32
 8006d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006d8c:	2300      	movs	r3, #0
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3708      	adds	r7, #8
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}

08006d96 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d96:	b580      	push	{r7, lr}
 8006d98:	b08a      	sub	sp, #40	; 0x28
 8006d9a:	af02      	add	r7, sp, #8
 8006d9c:	60f8      	str	r0, [r7, #12]
 8006d9e:	60b9      	str	r1, [r7, #8]
 8006da0:	603b      	str	r3, [r7, #0]
 8006da2:	4613      	mov	r3, r2
 8006da4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006da6:	2300      	movs	r3, #0
 8006da8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006db0:	b2db      	uxtb	r3, r3
 8006db2:	2b20      	cmp	r3, #32
 8006db4:	d17c      	bne.n	8006eb0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d002      	beq.n	8006dc2 <HAL_UART_Transmit+0x2c>
 8006dbc:	88fb      	ldrh	r3, [r7, #6]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d101      	bne.n	8006dc6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	e075      	b.n	8006eb2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d101      	bne.n	8006dd4 <HAL_UART_Transmit+0x3e>
 8006dd0:	2302      	movs	r3, #2
 8006dd2:	e06e      	b.n	8006eb2 <HAL_UART_Transmit+0x11c>
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	2200      	movs	r2, #0
 8006de0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	2221      	movs	r2, #33	; 0x21
 8006de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006dea:	f7fc ff27 	bl	8003c3c <HAL_GetTick>
 8006dee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	88fa      	ldrh	r2, [r7, #6]
 8006df4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	88fa      	ldrh	r2, [r7, #6]
 8006dfa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e04:	d108      	bne.n	8006e18 <HAL_UART_Transmit+0x82>
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	691b      	ldr	r3, [r3, #16]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d104      	bne.n	8006e18 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	61bb      	str	r3, [r7, #24]
 8006e16:	e003      	b.n	8006e20 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2200      	movs	r2, #0
 8006e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006e28:	e02a      	b.n	8006e80 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	9300      	str	r3, [sp, #0]
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	2200      	movs	r2, #0
 8006e32:	2180      	movs	r1, #128	; 0x80
 8006e34:	68f8      	ldr	r0, [r7, #12]
 8006e36:	f000 fb7b 	bl	8007530 <UART_WaitOnFlagUntilTimeout>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d001      	beq.n	8006e44 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006e40:	2303      	movs	r3, #3
 8006e42:	e036      	b.n	8006eb2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006e44:	69fb      	ldr	r3, [r7, #28]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d10b      	bne.n	8006e62 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006e4a:	69bb      	ldr	r3, [r7, #24]
 8006e4c:	881b      	ldrh	r3, [r3, #0]
 8006e4e:	461a      	mov	r2, r3
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e58:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006e5a:	69bb      	ldr	r3, [r7, #24]
 8006e5c:	3302      	adds	r3, #2
 8006e5e:	61bb      	str	r3, [r7, #24]
 8006e60:	e007      	b.n	8006e72 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006e62:	69fb      	ldr	r3, [r7, #28]
 8006e64:	781a      	ldrb	r2, [r3, #0]
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006e6c:	69fb      	ldr	r3, [r7, #28]
 8006e6e:	3301      	adds	r3, #1
 8006e70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006e76:	b29b      	uxth	r3, r3
 8006e78:	3b01      	subs	r3, #1
 8006e7a:	b29a      	uxth	r2, r3
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006e84:	b29b      	uxth	r3, r3
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d1cf      	bne.n	8006e2a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	9300      	str	r3, [sp, #0]
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	2200      	movs	r2, #0
 8006e92:	2140      	movs	r1, #64	; 0x40
 8006e94:	68f8      	ldr	r0, [r7, #12]
 8006e96:	f000 fb4b 	bl	8007530 <UART_WaitOnFlagUntilTimeout>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d001      	beq.n	8006ea4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006ea0:	2303      	movs	r3, #3
 8006ea2:	e006      	b.n	8006eb2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2220      	movs	r2, #32
 8006ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006eac:	2300      	movs	r3, #0
 8006eae:	e000      	b.n	8006eb2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006eb0:	2302      	movs	r3, #2
  }
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3720      	adds	r7, #32
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}

08006eba <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006eba:	b580      	push	{r7, lr}
 8006ebc:	b084      	sub	sp, #16
 8006ebe:	af00      	add	r7, sp, #0
 8006ec0:	60f8      	str	r0, [r7, #12]
 8006ec2:	60b9      	str	r1, [r7, #8]
 8006ec4:	4613      	mov	r3, r2
 8006ec6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ece:	b2db      	uxtb	r3, r3
 8006ed0:	2b20      	cmp	r3, #32
 8006ed2:	d11d      	bne.n	8006f10 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d002      	beq.n	8006ee0 <HAL_UART_Receive_IT+0x26>
 8006eda:	88fb      	ldrh	r3, [r7, #6]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d101      	bne.n	8006ee4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	e016      	b.n	8006f12 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	d101      	bne.n	8006ef2 <HAL_UART_Receive_IT+0x38>
 8006eee:	2302      	movs	r3, #2
 8006ef0:	e00f      	b.n	8006f12 <HAL_UART_Receive_IT+0x58>
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2200      	movs	r2, #0
 8006efe:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8006f00:	88fb      	ldrh	r3, [r7, #6]
 8006f02:	461a      	mov	r2, r3
 8006f04:	68b9      	ldr	r1, [r7, #8]
 8006f06:	68f8      	ldr	r0, [r7, #12]
 8006f08:	f000 fb5c 	bl	80075c4 <UART_Start_Receive_IT>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	e000      	b.n	8006f12 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006f10:	2302      	movs	r3, #2
  }
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3710      	adds	r7, #16
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}

08006f1a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f1a:	b580      	push	{r7, lr}
 8006f1c:	b084      	sub	sp, #16
 8006f1e:	af00      	add	r7, sp, #0
 8006f20:	60f8      	str	r0, [r7, #12]
 8006f22:	60b9      	str	r1, [r7, #8]
 8006f24:	4613      	mov	r3, r2
 8006f26:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f2e:	b2db      	uxtb	r3, r3
 8006f30:	2b20      	cmp	r3, #32
 8006f32:	d11d      	bne.n	8006f70 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d002      	beq.n	8006f40 <HAL_UART_Receive_DMA+0x26>
 8006f3a:	88fb      	ldrh	r3, [r7, #6]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d101      	bne.n	8006f44 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006f40:	2301      	movs	r3, #1
 8006f42:	e016      	b.n	8006f72 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f4a:	2b01      	cmp	r3, #1
 8006f4c:	d101      	bne.n	8006f52 <HAL_UART_Receive_DMA+0x38>
 8006f4e:	2302      	movs	r3, #2
 8006f50:	e00f      	b.n	8006f72 <HAL_UART_Receive_DMA+0x58>
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	2201      	movs	r2, #1
 8006f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8006f60:	88fb      	ldrh	r3, [r7, #6]
 8006f62:	461a      	mov	r2, r3
 8006f64:	68b9      	ldr	r1, [r7, #8]
 8006f66:	68f8      	ldr	r0, [r7, #12]
 8006f68:	f000 fb66 	bl	8007638 <UART_Start_Receive_DMA>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	e000      	b.n	8006f72 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006f70:	2302      	movs	r3, #2
  }
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3710      	adds	r7, #16
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}

08006f7a <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8006f7a:	b580      	push	{r7, lr}
 8006f7c:	b084      	sub	sp, #16
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006f82:	2300      	movs	r3, #0
 8006f84:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	695b      	ldr	r3, [r3, #20]
 8006f8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	bf14      	ite	ne
 8006f94:	2301      	movne	r3, #1
 8006f96:	2300      	moveq	r3, #0
 8006f98:	b2db      	uxtb	r3, r3
 8006f9a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fa2:	b2db      	uxtb	r3, r3
 8006fa4:	2b21      	cmp	r3, #33	; 0x21
 8006fa6:	d116      	bne.n	8006fd6 <HAL_UART_DMAStop+0x5c>
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d013      	beq.n	8006fd6 <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	695a      	ldr	r2, [r3, #20]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006fbc:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d004      	beq.n	8006fd0 <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f7fd f847 	bl	800405e <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f000 fb95 	bl	8007700 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	695b      	ldr	r3, [r3, #20]
 8006fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	bf14      	ite	ne
 8006fe4:	2301      	movne	r3, #1
 8006fe6:	2300      	moveq	r3, #0
 8006fe8:	b2db      	uxtb	r3, r3
 8006fea:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ff2:	b2db      	uxtb	r3, r3
 8006ff4:	2b22      	cmp	r3, #34	; 0x22
 8006ff6:	d116      	bne.n	8007026 <HAL_UART_DMAStop+0xac>
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d013      	beq.n	8007026 <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	695a      	ldr	r2, [r3, #20]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800700c:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007012:	2b00      	cmp	r3, #0
 8007014:	d004      	beq.n	8007020 <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800701a:	4618      	mov	r0, r3
 800701c:	f7fd f81f 	bl	800405e <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f000 fb82 	bl	800772a <UART_EndRxTransfer>
  }

  return HAL_OK;
 8007026:	2300      	movs	r3, #0
}
 8007028:	4618      	mov	r0, r3
 800702a:	3710      	adds	r7, #16
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}

08007030 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b08a      	sub	sp, #40	; 0x28
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	68db      	ldr	r3, [r3, #12]
 8007046:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	695b      	ldr	r3, [r3, #20]
 800704e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8007050:	2300      	movs	r3, #0
 8007052:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8007054:	2300      	movs	r3, #0
 8007056:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800705a:	f003 030f 	and.w	r3, r3, #15
 800705e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8007060:	69bb      	ldr	r3, [r7, #24]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d10d      	bne.n	8007082 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007068:	f003 0320 	and.w	r3, r3, #32
 800706c:	2b00      	cmp	r3, #0
 800706e:	d008      	beq.n	8007082 <HAL_UART_IRQHandler+0x52>
 8007070:	6a3b      	ldr	r3, [r7, #32]
 8007072:	f003 0320 	and.w	r3, r3, #32
 8007076:	2b00      	cmp	r3, #0
 8007078:	d003      	beq.n	8007082 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f000 fbfc 	bl	8007878 <UART_Receive_IT>
      return;
 8007080:	e17b      	b.n	800737a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007082:	69bb      	ldr	r3, [r7, #24]
 8007084:	2b00      	cmp	r3, #0
 8007086:	f000 80b1 	beq.w	80071ec <HAL_UART_IRQHandler+0x1bc>
 800708a:	69fb      	ldr	r3, [r7, #28]
 800708c:	f003 0301 	and.w	r3, r3, #1
 8007090:	2b00      	cmp	r3, #0
 8007092:	d105      	bne.n	80070a0 <HAL_UART_IRQHandler+0x70>
 8007094:	6a3b      	ldr	r3, [r7, #32]
 8007096:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800709a:	2b00      	cmp	r3, #0
 800709c:	f000 80a6 	beq.w	80071ec <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80070a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a2:	f003 0301 	and.w	r3, r3, #1
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d00a      	beq.n	80070c0 <HAL_UART_IRQHandler+0x90>
 80070aa:	6a3b      	ldr	r3, [r7, #32]
 80070ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d005      	beq.n	80070c0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070b8:	f043 0201 	orr.w	r2, r3, #1
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80070c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c2:	f003 0304 	and.w	r3, r3, #4
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d00a      	beq.n	80070e0 <HAL_UART_IRQHandler+0xb0>
 80070ca:	69fb      	ldr	r3, [r7, #28]
 80070cc:	f003 0301 	and.w	r3, r3, #1
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d005      	beq.n	80070e0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070d8:	f043 0202 	orr.w	r2, r3, #2
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80070e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e2:	f003 0302 	and.w	r3, r3, #2
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d00a      	beq.n	8007100 <HAL_UART_IRQHandler+0xd0>
 80070ea:	69fb      	ldr	r3, [r7, #28]
 80070ec:	f003 0301 	and.w	r3, r3, #1
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d005      	beq.n	8007100 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070f8:	f043 0204 	orr.w	r2, r3, #4
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007102:	f003 0308 	and.w	r3, r3, #8
 8007106:	2b00      	cmp	r3, #0
 8007108:	d00f      	beq.n	800712a <HAL_UART_IRQHandler+0xfa>
 800710a:	6a3b      	ldr	r3, [r7, #32]
 800710c:	f003 0320 	and.w	r3, r3, #32
 8007110:	2b00      	cmp	r3, #0
 8007112:	d104      	bne.n	800711e <HAL_UART_IRQHandler+0xee>
 8007114:	69fb      	ldr	r3, [r7, #28]
 8007116:	f003 0301 	and.w	r3, r3, #1
 800711a:	2b00      	cmp	r3, #0
 800711c:	d005      	beq.n	800712a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007122:	f043 0208 	orr.w	r2, r3, #8
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800712e:	2b00      	cmp	r3, #0
 8007130:	f000 811e 	beq.w	8007370 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007136:	f003 0320 	and.w	r3, r3, #32
 800713a:	2b00      	cmp	r3, #0
 800713c:	d007      	beq.n	800714e <HAL_UART_IRQHandler+0x11e>
 800713e:	6a3b      	ldr	r3, [r7, #32]
 8007140:	f003 0320 	and.w	r3, r3, #32
 8007144:	2b00      	cmp	r3, #0
 8007146:	d002      	beq.n	800714e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f000 fb95 	bl	8007878 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	695b      	ldr	r3, [r3, #20]
 8007154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007158:	2b00      	cmp	r3, #0
 800715a:	bf14      	ite	ne
 800715c:	2301      	movne	r3, #1
 800715e:	2300      	moveq	r3, #0
 8007160:	b2db      	uxtb	r3, r3
 8007162:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007168:	f003 0308 	and.w	r3, r3, #8
 800716c:	2b00      	cmp	r3, #0
 800716e:	d102      	bne.n	8007176 <HAL_UART_IRQHandler+0x146>
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d031      	beq.n	80071da <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 fad7 	bl	800772a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	695b      	ldr	r3, [r3, #20]
 8007182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007186:	2b00      	cmp	r3, #0
 8007188:	d023      	beq.n	80071d2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	695a      	ldr	r2, [r3, #20]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007198:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d013      	beq.n	80071ca <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071a6:	4a76      	ldr	r2, [pc, #472]	; (8007380 <HAL_UART_IRQHandler+0x350>)
 80071a8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ae:	4618      	mov	r0, r3
 80071b0:	f7fc ff90 	bl	80040d4 <HAL_DMA_Abort_IT>
 80071b4:	4603      	mov	r3, r0
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d016      	beq.n	80071e8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071c0:	687a      	ldr	r2, [r7, #4]
 80071c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80071c4:	4610      	mov	r0, r2
 80071c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071c8:	e00e      	b.n	80071e8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f000 f8ec 	bl	80073a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071d0:	e00a      	b.n	80071e8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f000 f8e8 	bl	80073a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071d8:	e006      	b.n	80071e8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f000 f8e4 	bl	80073a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2200      	movs	r2, #0
 80071e4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80071e6:	e0c3      	b.n	8007370 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071e8:	bf00      	nop
    return;
 80071ea:	e0c1      	b.n	8007370 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071f0:	2b01      	cmp	r3, #1
 80071f2:	f040 80a1 	bne.w	8007338 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80071f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f8:	f003 0310 	and.w	r3, r3, #16
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	f000 809b 	beq.w	8007338 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8007202:	6a3b      	ldr	r3, [r7, #32]
 8007204:	f003 0310 	and.w	r3, r3, #16
 8007208:	2b00      	cmp	r3, #0
 800720a:	f000 8095 	beq.w	8007338 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800720e:	2300      	movs	r3, #0
 8007210:	60fb      	str	r3, [r7, #12]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	60fb      	str	r3, [r7, #12]
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	60fb      	str	r3, [r7, #12]
 8007222:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	695b      	ldr	r3, [r3, #20]
 800722a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800722e:	2b00      	cmp	r3, #0
 8007230:	d04e      	beq.n	80072d0 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800723c:	8a3b      	ldrh	r3, [r7, #16]
 800723e:	2b00      	cmp	r3, #0
 8007240:	f000 8098 	beq.w	8007374 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007248:	8a3a      	ldrh	r2, [r7, #16]
 800724a:	429a      	cmp	r2, r3
 800724c:	f080 8092 	bcs.w	8007374 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	8a3a      	ldrh	r2, [r7, #16]
 8007254:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800725a:	699b      	ldr	r3, [r3, #24]
 800725c:	2b20      	cmp	r3, #32
 800725e:	d02b      	beq.n	80072b8 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	68da      	ldr	r2, [r3, #12]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800726e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	695a      	ldr	r2, [r3, #20]
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f022 0201 	bic.w	r2, r2, #1
 800727e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	695a      	ldr	r2, [r3, #20]
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800728e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2220      	movs	r2, #32
 8007294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2200      	movs	r2, #0
 800729c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	68da      	ldr	r2, [r3, #12]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f022 0210 	bic.w	r2, r2, #16
 80072ac:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072b2:	4618      	mov	r0, r3
 80072b4:	f7fc fed3 	bl	800405e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80072c0:	b29b      	uxth	r3, r3
 80072c2:	1ad3      	subs	r3, r2, r3
 80072c4:	b29b      	uxth	r3, r3
 80072c6:	4619      	mov	r1, r3
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f000 f876 	bl	80073ba <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80072ce:	e051      	b.n	8007374 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80072d8:	b29b      	uxth	r3, r3
 80072da:	1ad3      	subs	r3, r2, r3
 80072dc:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d047      	beq.n	8007378 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80072e8:	8a7b      	ldrh	r3, [r7, #18]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d044      	beq.n	8007378 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	68da      	ldr	r2, [r3, #12]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80072fc:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	695a      	ldr	r2, [r3, #20]
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f022 0201 	bic.w	r2, r2, #1
 800730c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2220      	movs	r2, #32
 8007312:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2200      	movs	r2, #0
 800731a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	68da      	ldr	r2, [r3, #12]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f022 0210 	bic.w	r2, r2, #16
 800732a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800732c:	8a7b      	ldrh	r3, [r7, #18]
 800732e:	4619      	mov	r1, r3
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f000 f842 	bl	80073ba <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007336:	e01f      	b.n	8007378 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800733a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800733e:	2b00      	cmp	r3, #0
 8007340:	d008      	beq.n	8007354 <HAL_UART_IRQHandler+0x324>
 8007342:	6a3b      	ldr	r3, [r7, #32]
 8007344:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007348:	2b00      	cmp	r3, #0
 800734a:	d003      	beq.n	8007354 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f000 fa2c 	bl	80077aa <UART_Transmit_IT>
    return;
 8007352:	e012      	b.n	800737a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800735a:	2b00      	cmp	r3, #0
 800735c:	d00d      	beq.n	800737a <HAL_UART_IRQHandler+0x34a>
 800735e:	6a3b      	ldr	r3, [r7, #32]
 8007360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007364:	2b00      	cmp	r3, #0
 8007366:	d008      	beq.n	800737a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f000 fa6d 	bl	8007848 <UART_EndTransmit_IT>
    return;
 800736e:	e004      	b.n	800737a <HAL_UART_IRQHandler+0x34a>
    return;
 8007370:	bf00      	nop
 8007372:	e002      	b.n	800737a <HAL_UART_IRQHandler+0x34a>
      return;
 8007374:	bf00      	nop
 8007376:	e000      	b.n	800737a <HAL_UART_IRQHandler+0x34a>
      return;
 8007378:	bf00      	nop
  }
}
 800737a:	3728      	adds	r7, #40	; 0x28
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}
 8007380:	08007783 	.word	0x08007783

08007384 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007384:	b480      	push	{r7}
 8007386:	b083      	sub	sp, #12
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800738c:	bf00      	nop
 800738e:	370c      	adds	r7, #12
 8007390:	46bd      	mov	sp, r7
 8007392:	bc80      	pop	{r7}
 8007394:	4770      	bx	lr

08007396 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007396:	b480      	push	{r7}
 8007398:	b083      	sub	sp, #12
 800739a:	af00      	add	r7, sp, #0
 800739c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800739e:	bf00      	nop
 80073a0:	370c      	adds	r7, #12
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bc80      	pop	{r7}
 80073a6:	4770      	bx	lr

080073a8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b083      	sub	sp, #12
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80073b0:	bf00      	nop
 80073b2:	370c      	adds	r7, #12
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bc80      	pop	{r7}
 80073b8:	4770      	bx	lr

080073ba <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80073ba:	b480      	push	{r7}
 80073bc:	b083      	sub	sp, #12
 80073be:	af00      	add	r7, sp, #0
 80073c0:	6078      	str	r0, [r7, #4]
 80073c2:	460b      	mov	r3, r1
 80073c4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80073c6:	bf00      	nop
 80073c8:	370c      	adds	r7, #12
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bc80      	pop	{r7}
 80073ce:	4770      	bx	lr

080073d0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b084      	sub	sp, #16
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073dc:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f003 0320 	and.w	r3, r3, #32
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d12a      	bne.n	8007442 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2200      	movs	r2, #0
 80073f0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	68da      	ldr	r2, [r3, #12]
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007400:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	695a      	ldr	r2, [r3, #20]
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f022 0201 	bic.w	r2, r2, #1
 8007410:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	695a      	ldr	r2, [r3, #20]
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007420:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	2220      	movs	r2, #32
 8007426:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800742e:	2b01      	cmp	r3, #1
 8007430:	d107      	bne.n	8007442 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	68da      	ldr	r2, [r3, #12]
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f022 0210 	bic.w	r2, r2, #16
 8007440:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007446:	2b01      	cmp	r3, #1
 8007448:	d106      	bne.n	8007458 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800744e:	4619      	mov	r1, r3
 8007450:	68f8      	ldr	r0, [r7, #12]
 8007452:	f7ff ffb2 	bl	80073ba <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007456:	e002      	b.n	800745e <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8007458:	68f8      	ldr	r0, [r7, #12]
 800745a:	f7fa ffc5 	bl	80023e8 <HAL_UART_RxCpltCallback>
}
 800745e:	bf00      	nop
 8007460:	3710      	adds	r7, #16
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}

08007466 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007466:	b580      	push	{r7, lr}
 8007468:	b084      	sub	sp, #16
 800746a:	af00      	add	r7, sp, #0
 800746c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007472:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007478:	2b01      	cmp	r3, #1
 800747a:	d108      	bne.n	800748e <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007480:	085b      	lsrs	r3, r3, #1
 8007482:	b29b      	uxth	r3, r3
 8007484:	4619      	mov	r1, r3
 8007486:	68f8      	ldr	r0, [r7, #12]
 8007488:	f7ff ff97 	bl	80073ba <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800748c:	e002      	b.n	8007494 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800748e:	68f8      	ldr	r0, [r7, #12]
 8007490:	f7ff ff81 	bl	8007396 <HAL_UART_RxHalfCpltCallback>
}
 8007494:	bf00      	nop
 8007496:	3710      	adds	r7, #16
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}

0800749c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b084      	sub	sp, #16
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80074a4:	2300      	movs	r3, #0
 80074a6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ac:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	695b      	ldr	r3, [r3, #20]
 80074b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	bf14      	ite	ne
 80074bc:	2301      	movne	r3, #1
 80074be:	2300      	moveq	r3, #0
 80074c0:	b2db      	uxtb	r3, r3
 80074c2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074ca:	b2db      	uxtb	r3, r3
 80074cc:	2b21      	cmp	r3, #33	; 0x21
 80074ce:	d108      	bne.n	80074e2 <UART_DMAError+0x46>
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d005      	beq.n	80074e2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	2200      	movs	r2, #0
 80074da:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80074dc:	68b8      	ldr	r0, [r7, #8]
 80074de:	f000 f90f 	bl	8007700 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	695b      	ldr	r3, [r3, #20]
 80074e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	bf14      	ite	ne
 80074f0:	2301      	movne	r3, #1
 80074f2:	2300      	moveq	r3, #0
 80074f4:	b2db      	uxtb	r3, r3
 80074f6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80074fe:	b2db      	uxtb	r3, r3
 8007500:	2b22      	cmp	r3, #34	; 0x22
 8007502:	d108      	bne.n	8007516 <UART_DMAError+0x7a>
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d005      	beq.n	8007516 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	2200      	movs	r2, #0
 800750e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007510:	68b8      	ldr	r0, [r7, #8]
 8007512:	f000 f90a 	bl	800772a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800751a:	f043 0210 	orr.w	r2, r3, #16
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007522:	68b8      	ldr	r0, [r7, #8]
 8007524:	f7ff ff40 	bl	80073a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007528:	bf00      	nop
 800752a:	3710      	adds	r7, #16
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}

08007530 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b084      	sub	sp, #16
 8007534:	af00      	add	r7, sp, #0
 8007536:	60f8      	str	r0, [r7, #12]
 8007538:	60b9      	str	r1, [r7, #8]
 800753a:	603b      	str	r3, [r7, #0]
 800753c:	4613      	mov	r3, r2
 800753e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007540:	e02c      	b.n	800759c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007542:	69bb      	ldr	r3, [r7, #24]
 8007544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007548:	d028      	beq.n	800759c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800754a:	69bb      	ldr	r3, [r7, #24]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d007      	beq.n	8007560 <UART_WaitOnFlagUntilTimeout+0x30>
 8007550:	f7fc fb74 	bl	8003c3c <HAL_GetTick>
 8007554:	4602      	mov	r2, r0
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	1ad3      	subs	r3, r2, r3
 800755a:	69ba      	ldr	r2, [r7, #24]
 800755c:	429a      	cmp	r2, r3
 800755e:	d21d      	bcs.n	800759c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	68da      	ldr	r2, [r3, #12]
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800756e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	695a      	ldr	r2, [r3, #20]
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f022 0201 	bic.w	r2, r2, #1
 800757e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2220      	movs	r2, #32
 8007584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2220      	movs	r2, #32
 800758c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2200      	movs	r2, #0
 8007594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007598:	2303      	movs	r3, #3
 800759a:	e00f      	b.n	80075bc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	681a      	ldr	r2, [r3, #0]
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	4013      	ands	r3, r2
 80075a6:	68ba      	ldr	r2, [r7, #8]
 80075a8:	429a      	cmp	r2, r3
 80075aa:	bf0c      	ite	eq
 80075ac:	2301      	moveq	r3, #1
 80075ae:	2300      	movne	r3, #0
 80075b0:	b2db      	uxtb	r3, r3
 80075b2:	461a      	mov	r2, r3
 80075b4:	79fb      	ldrb	r3, [r7, #7]
 80075b6:	429a      	cmp	r2, r3
 80075b8:	d0c3      	beq.n	8007542 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80075ba:	2300      	movs	r3, #0
}
 80075bc:	4618      	mov	r0, r3
 80075be:	3710      	adds	r7, #16
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}

080075c4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b085      	sub	sp, #20
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	60f8      	str	r0, [r7, #12]
 80075cc:	60b9      	str	r1, [r7, #8]
 80075ce:	4613      	mov	r3, r2
 80075d0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	68ba      	ldr	r2, [r7, #8]
 80075d6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	88fa      	ldrh	r2, [r7, #6]
 80075dc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	88fa      	ldrh	r2, [r7, #6]
 80075e2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	2200      	movs	r2, #0
 80075e8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2222      	movs	r2, #34	; 0x22
 80075ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	2200      	movs	r2, #0
 80075f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	68da      	ldr	r2, [r3, #12]
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007608:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	695a      	ldr	r2, [r3, #20]
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f042 0201 	orr.w	r2, r2, #1
 8007618:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	68da      	ldr	r2, [r3, #12]
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f042 0220 	orr.w	r2, r2, #32
 8007628:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800762a:	2300      	movs	r3, #0
}
 800762c:	4618      	mov	r0, r3
 800762e:	3714      	adds	r7, #20
 8007630:	46bd      	mov	sp, r7
 8007632:	bc80      	pop	{r7}
 8007634:	4770      	bx	lr
	...

08007638 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b086      	sub	sp, #24
 800763c:	af00      	add	r7, sp, #0
 800763e:	60f8      	str	r0, [r7, #12]
 8007640:	60b9      	str	r1, [r7, #8]
 8007642:	4613      	mov	r3, r2
 8007644:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007646:	68ba      	ldr	r2, [r7, #8]
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	88fa      	ldrh	r2, [r7, #6]
 8007650:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	2200      	movs	r2, #0
 8007656:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	2222      	movs	r2, #34	; 0x22
 800765c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007664:	4a23      	ldr	r2, [pc, #140]	; (80076f4 <UART_Start_Receive_DMA+0xbc>)
 8007666:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800766c:	4a22      	ldr	r2, [pc, #136]	; (80076f8 <UART_Start_Receive_DMA+0xc0>)
 800766e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007674:	4a21      	ldr	r2, [pc, #132]	; (80076fc <UART_Start_Receive_DMA+0xc4>)
 8007676:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800767c:	2200      	movs	r2, #0
 800767e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007680:	f107 0308 	add.w	r3, r7, #8
 8007684:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	3304      	adds	r3, #4
 8007690:	4619      	mov	r1, r3
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	681a      	ldr	r2, [r3, #0]
 8007696:	88fb      	ldrh	r3, [r7, #6]
 8007698:	f7fc fc82 	bl	8003fa0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800769c:	2300      	movs	r3, #0
 800769e:	613b      	str	r3, [r7, #16]
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	613b      	str	r3, [r7, #16]
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	685b      	ldr	r3, [r3, #4]
 80076ae:	613b      	str	r3, [r7, #16]
 80076b0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	2200      	movs	r2, #0
 80076b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	68da      	ldr	r2, [r3, #12]
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80076c8:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	695a      	ldr	r2, [r3, #20]
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f042 0201 	orr.w	r2, r2, #1
 80076d8:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	695a      	ldr	r2, [r3, #20]
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80076e8:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80076ea:	2300      	movs	r3, #0
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	3718      	adds	r7, #24
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}
 80076f4:	080073d1 	.word	0x080073d1
 80076f8:	08007467 	.word	0x08007467
 80076fc:	0800749d 	.word	0x0800749d

08007700 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007700:	b480      	push	{r7}
 8007702:	b083      	sub	sp, #12
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	68da      	ldr	r2, [r3, #12]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8007716:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2220      	movs	r2, #32
 800771c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007720:	bf00      	nop
 8007722:	370c      	adds	r7, #12
 8007724:	46bd      	mov	sp, r7
 8007726:	bc80      	pop	{r7}
 8007728:	4770      	bx	lr

0800772a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800772a:	b480      	push	{r7}
 800772c:	b083      	sub	sp, #12
 800772e:	af00      	add	r7, sp, #0
 8007730:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	68da      	ldr	r2, [r3, #12]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007740:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	695a      	ldr	r2, [r3, #20]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f022 0201 	bic.w	r2, r2, #1
 8007750:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007756:	2b01      	cmp	r3, #1
 8007758:	d107      	bne.n	800776a <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	68da      	ldr	r2, [r3, #12]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f022 0210 	bic.w	r2, r2, #16
 8007768:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2220      	movs	r2, #32
 800776e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2200      	movs	r2, #0
 8007776:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007778:	bf00      	nop
 800777a:	370c      	adds	r7, #12
 800777c:	46bd      	mov	sp, r7
 800777e:	bc80      	pop	{r7}
 8007780:	4770      	bx	lr

08007782 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007782:	b580      	push	{r7, lr}
 8007784:	b084      	sub	sp, #16
 8007786:	af00      	add	r7, sp, #0
 8007788:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800778e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2200      	movs	r2, #0
 8007794:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2200      	movs	r2, #0
 800779a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800779c:	68f8      	ldr	r0, [r7, #12]
 800779e:	f7ff fe03 	bl	80073a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80077a2:	bf00      	nop
 80077a4:	3710      	adds	r7, #16
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}

080077aa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80077aa:	b480      	push	{r7}
 80077ac:	b085      	sub	sp, #20
 80077ae:	af00      	add	r7, sp, #0
 80077b0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077b8:	b2db      	uxtb	r3, r3
 80077ba:	2b21      	cmp	r3, #33	; 0x21
 80077bc:	d13e      	bne.n	800783c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	689b      	ldr	r3, [r3, #8]
 80077c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077c6:	d114      	bne.n	80077f2 <UART_Transmit_IT+0x48>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	691b      	ldr	r3, [r3, #16]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d110      	bne.n	80077f2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6a1b      	ldr	r3, [r3, #32]
 80077d4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	881b      	ldrh	r3, [r3, #0]
 80077da:	461a      	mov	r2, r3
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80077e4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6a1b      	ldr	r3, [r3, #32]
 80077ea:	1c9a      	adds	r2, r3, #2
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	621a      	str	r2, [r3, #32]
 80077f0:	e008      	b.n	8007804 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6a1b      	ldr	r3, [r3, #32]
 80077f6:	1c59      	adds	r1, r3, #1
 80077f8:	687a      	ldr	r2, [r7, #4]
 80077fa:	6211      	str	r1, [r2, #32]
 80077fc:	781a      	ldrb	r2, [r3, #0]
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007808:	b29b      	uxth	r3, r3
 800780a:	3b01      	subs	r3, #1
 800780c:	b29b      	uxth	r3, r3
 800780e:	687a      	ldr	r2, [r7, #4]
 8007810:	4619      	mov	r1, r3
 8007812:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007814:	2b00      	cmp	r3, #0
 8007816:	d10f      	bne.n	8007838 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	68da      	ldr	r2, [r3, #12]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007826:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	68da      	ldr	r2, [r3, #12]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007836:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007838:	2300      	movs	r3, #0
 800783a:	e000      	b.n	800783e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800783c:	2302      	movs	r3, #2
  }
}
 800783e:	4618      	mov	r0, r3
 8007840:	3714      	adds	r7, #20
 8007842:	46bd      	mov	sp, r7
 8007844:	bc80      	pop	{r7}
 8007846:	4770      	bx	lr

08007848 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b082      	sub	sp, #8
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	68da      	ldr	r2, [r3, #12]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800785e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2220      	movs	r2, #32
 8007864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f7ff fd8b 	bl	8007384 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800786e:	2300      	movs	r3, #0
}
 8007870:	4618      	mov	r0, r3
 8007872:	3708      	adds	r7, #8
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}

08007878 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b086      	sub	sp, #24
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007886:	b2db      	uxtb	r3, r3
 8007888:	2b22      	cmp	r3, #34	; 0x22
 800788a:	f040 8099 	bne.w	80079c0 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	689b      	ldr	r3, [r3, #8]
 8007892:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007896:	d117      	bne.n	80078c8 <UART_Receive_IT+0x50>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	691b      	ldr	r3, [r3, #16]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d113      	bne.n	80078c8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80078a0:	2300      	movs	r3, #0
 80078a2:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078a8:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	b29b      	uxth	r3, r3
 80078b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078b6:	b29a      	uxth	r2, r3
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078c0:	1c9a      	adds	r2, r3, #2
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	629a      	str	r2, [r3, #40]	; 0x28
 80078c6:	e026      	b.n	8007916 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078cc:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80078ce:	2300      	movs	r3, #0
 80078d0:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	689b      	ldr	r3, [r3, #8]
 80078d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078da:	d007      	beq.n	80078ec <UART_Receive_IT+0x74>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	689b      	ldr	r3, [r3, #8]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d10a      	bne.n	80078fa <UART_Receive_IT+0x82>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	691b      	ldr	r3, [r3, #16]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d106      	bne.n	80078fa <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	685b      	ldr	r3, [r3, #4]
 80078f2:	b2da      	uxtb	r2, r3
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	701a      	strb	r2, [r3, #0]
 80078f8:	e008      	b.n	800790c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	685b      	ldr	r3, [r3, #4]
 8007900:	b2db      	uxtb	r3, r3
 8007902:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007906:	b2da      	uxtb	r2, r3
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007910:	1c5a      	adds	r2, r3, #1
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800791a:	b29b      	uxth	r3, r3
 800791c:	3b01      	subs	r3, #1
 800791e:	b29b      	uxth	r3, r3
 8007920:	687a      	ldr	r2, [r7, #4]
 8007922:	4619      	mov	r1, r3
 8007924:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007926:	2b00      	cmp	r3, #0
 8007928:	d148      	bne.n	80079bc <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	68da      	ldr	r2, [r3, #12]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f022 0220 	bic.w	r2, r2, #32
 8007938:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	68da      	ldr	r2, [r3, #12]
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007948:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	695a      	ldr	r2, [r3, #20]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f022 0201 	bic.w	r2, r2, #1
 8007958:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2220      	movs	r2, #32
 800795e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007966:	2b01      	cmp	r3, #1
 8007968:	d123      	bne.n	80079b2 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2200      	movs	r2, #0
 800796e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	68da      	ldr	r2, [r3, #12]
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f022 0210 	bic.w	r2, r2, #16
 800797e:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f003 0310 	and.w	r3, r3, #16
 800798a:	2b10      	cmp	r3, #16
 800798c:	d10a      	bne.n	80079a4 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800798e:	2300      	movs	r3, #0
 8007990:	60fb      	str	r3, [r7, #12]
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	60fb      	str	r3, [r7, #12]
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	60fb      	str	r3, [r7, #12]
 80079a2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80079a8:	4619      	mov	r1, r3
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f7ff fd05 	bl	80073ba <HAL_UARTEx_RxEventCallback>
 80079b0:	e002      	b.n	80079b8 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f7fa fd18 	bl	80023e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80079b8:	2300      	movs	r3, #0
 80079ba:	e002      	b.n	80079c2 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80079bc:	2300      	movs	r3, #0
 80079be:	e000      	b.n	80079c2 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80079c0:	2302      	movs	r3, #2
  }
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3718      	adds	r7, #24
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}
	...

080079cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b084      	sub	sp, #16
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	691b      	ldr	r3, [r3, #16]
 80079da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	68da      	ldr	r2, [r3, #12]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	430a      	orrs	r2, r1
 80079e8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	689a      	ldr	r2, [r3, #8]
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	691b      	ldr	r3, [r3, #16]
 80079f2:	431a      	orrs	r2, r3
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	695b      	ldr	r3, [r3, #20]
 80079f8:	4313      	orrs	r3, r2
 80079fa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	68db      	ldr	r3, [r3, #12]
 8007a02:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007a06:	f023 030c 	bic.w	r3, r3, #12
 8007a0a:	687a      	ldr	r2, [r7, #4]
 8007a0c:	6812      	ldr	r2, [r2, #0]
 8007a0e:	68b9      	ldr	r1, [r7, #8]
 8007a10:	430b      	orrs	r3, r1
 8007a12:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	695b      	ldr	r3, [r3, #20]
 8007a1a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	699a      	ldr	r2, [r3, #24]
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	430a      	orrs	r2, r1
 8007a28:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	4a2c      	ldr	r2, [pc, #176]	; (8007ae0 <UART_SetConfig+0x114>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d103      	bne.n	8007a3c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007a34:	f7fd fc54 	bl	80052e0 <HAL_RCC_GetPCLK2Freq>
 8007a38:	60f8      	str	r0, [r7, #12]
 8007a3a:	e002      	b.n	8007a42 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007a3c:	f7fd fc3c 	bl	80052b8 <HAL_RCC_GetPCLK1Freq>
 8007a40:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007a42:	68fa      	ldr	r2, [r7, #12]
 8007a44:	4613      	mov	r3, r2
 8007a46:	009b      	lsls	r3, r3, #2
 8007a48:	4413      	add	r3, r2
 8007a4a:	009a      	lsls	r2, r3, #2
 8007a4c:	441a      	add	r2, r3
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	685b      	ldr	r3, [r3, #4]
 8007a52:	009b      	lsls	r3, r3, #2
 8007a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a58:	4a22      	ldr	r2, [pc, #136]	; (8007ae4 <UART_SetConfig+0x118>)
 8007a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8007a5e:	095b      	lsrs	r3, r3, #5
 8007a60:	0119      	lsls	r1, r3, #4
 8007a62:	68fa      	ldr	r2, [r7, #12]
 8007a64:	4613      	mov	r3, r2
 8007a66:	009b      	lsls	r3, r3, #2
 8007a68:	4413      	add	r3, r2
 8007a6a:	009a      	lsls	r2, r3, #2
 8007a6c:	441a      	add	r2, r3
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	685b      	ldr	r3, [r3, #4]
 8007a72:	009b      	lsls	r3, r3, #2
 8007a74:	fbb2 f2f3 	udiv	r2, r2, r3
 8007a78:	4b1a      	ldr	r3, [pc, #104]	; (8007ae4 <UART_SetConfig+0x118>)
 8007a7a:	fba3 0302 	umull	r0, r3, r3, r2
 8007a7e:	095b      	lsrs	r3, r3, #5
 8007a80:	2064      	movs	r0, #100	; 0x64
 8007a82:	fb00 f303 	mul.w	r3, r0, r3
 8007a86:	1ad3      	subs	r3, r2, r3
 8007a88:	011b      	lsls	r3, r3, #4
 8007a8a:	3332      	adds	r3, #50	; 0x32
 8007a8c:	4a15      	ldr	r2, [pc, #84]	; (8007ae4 <UART_SetConfig+0x118>)
 8007a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8007a92:	095b      	lsrs	r3, r3, #5
 8007a94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007a98:	4419      	add	r1, r3
 8007a9a:	68fa      	ldr	r2, [r7, #12]
 8007a9c:	4613      	mov	r3, r2
 8007a9e:	009b      	lsls	r3, r3, #2
 8007aa0:	4413      	add	r3, r2
 8007aa2:	009a      	lsls	r2, r3, #2
 8007aa4:	441a      	add	r2, r3
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	685b      	ldr	r3, [r3, #4]
 8007aaa:	009b      	lsls	r3, r3, #2
 8007aac:	fbb2 f2f3 	udiv	r2, r2, r3
 8007ab0:	4b0c      	ldr	r3, [pc, #48]	; (8007ae4 <UART_SetConfig+0x118>)
 8007ab2:	fba3 0302 	umull	r0, r3, r3, r2
 8007ab6:	095b      	lsrs	r3, r3, #5
 8007ab8:	2064      	movs	r0, #100	; 0x64
 8007aba:	fb00 f303 	mul.w	r3, r0, r3
 8007abe:	1ad3      	subs	r3, r2, r3
 8007ac0:	011b      	lsls	r3, r3, #4
 8007ac2:	3332      	adds	r3, #50	; 0x32
 8007ac4:	4a07      	ldr	r2, [pc, #28]	; (8007ae4 <UART_SetConfig+0x118>)
 8007ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8007aca:	095b      	lsrs	r3, r3, #5
 8007acc:	f003 020f 	and.w	r2, r3, #15
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	440a      	add	r2, r1
 8007ad6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007ad8:	bf00      	nop
 8007ada:	3710      	adds	r7, #16
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}
 8007ae0:	40013800 	.word	0x40013800
 8007ae4:	51eb851f 	.word	0x51eb851f

08007ae8 <__errno>:
 8007ae8:	4b01      	ldr	r3, [pc, #4]	; (8007af0 <__errno+0x8>)
 8007aea:	6818      	ldr	r0, [r3, #0]
 8007aec:	4770      	bx	lr
 8007aee:	bf00      	nop
 8007af0:	20000010 	.word	0x20000010

08007af4 <__libc_init_array>:
 8007af4:	b570      	push	{r4, r5, r6, lr}
 8007af6:	2600      	movs	r6, #0
 8007af8:	4d0c      	ldr	r5, [pc, #48]	; (8007b2c <__libc_init_array+0x38>)
 8007afa:	4c0d      	ldr	r4, [pc, #52]	; (8007b30 <__libc_init_array+0x3c>)
 8007afc:	1b64      	subs	r4, r4, r5
 8007afe:	10a4      	asrs	r4, r4, #2
 8007b00:	42a6      	cmp	r6, r4
 8007b02:	d109      	bne.n	8007b18 <__libc_init_array+0x24>
 8007b04:	f005 f886 	bl	800cc14 <_init>
 8007b08:	2600      	movs	r6, #0
 8007b0a:	4d0a      	ldr	r5, [pc, #40]	; (8007b34 <__libc_init_array+0x40>)
 8007b0c:	4c0a      	ldr	r4, [pc, #40]	; (8007b38 <__libc_init_array+0x44>)
 8007b0e:	1b64      	subs	r4, r4, r5
 8007b10:	10a4      	asrs	r4, r4, #2
 8007b12:	42a6      	cmp	r6, r4
 8007b14:	d105      	bne.n	8007b22 <__libc_init_array+0x2e>
 8007b16:	bd70      	pop	{r4, r5, r6, pc}
 8007b18:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b1c:	4798      	blx	r3
 8007b1e:	3601      	adds	r6, #1
 8007b20:	e7ee      	b.n	8007b00 <__libc_init_array+0xc>
 8007b22:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b26:	4798      	blx	r3
 8007b28:	3601      	adds	r6, #1
 8007b2a:	e7f2      	b.n	8007b12 <__libc_init_array+0x1e>
 8007b2c:	0800d194 	.word	0x0800d194
 8007b30:	0800d194 	.word	0x0800d194
 8007b34:	0800d194 	.word	0x0800d194
 8007b38:	0800d198 	.word	0x0800d198

08007b3c <memcpy>:
 8007b3c:	440a      	add	r2, r1
 8007b3e:	4291      	cmp	r1, r2
 8007b40:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b44:	d100      	bne.n	8007b48 <memcpy+0xc>
 8007b46:	4770      	bx	lr
 8007b48:	b510      	push	{r4, lr}
 8007b4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b4e:	4291      	cmp	r1, r2
 8007b50:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b54:	d1f9      	bne.n	8007b4a <memcpy+0xe>
 8007b56:	bd10      	pop	{r4, pc}

08007b58 <memset>:
 8007b58:	4603      	mov	r3, r0
 8007b5a:	4402      	add	r2, r0
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d100      	bne.n	8007b62 <memset+0xa>
 8007b60:	4770      	bx	lr
 8007b62:	f803 1b01 	strb.w	r1, [r3], #1
 8007b66:	e7f9      	b.n	8007b5c <memset+0x4>

08007b68 <__cvt>:
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b6e:	461f      	mov	r7, r3
 8007b70:	bfbb      	ittet	lt
 8007b72:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8007b76:	461f      	movlt	r7, r3
 8007b78:	2300      	movge	r3, #0
 8007b7a:	232d      	movlt	r3, #45	; 0x2d
 8007b7c:	b088      	sub	sp, #32
 8007b7e:	4614      	mov	r4, r2
 8007b80:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007b82:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8007b84:	7013      	strb	r3, [r2, #0]
 8007b86:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007b88:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8007b8c:	f023 0820 	bic.w	r8, r3, #32
 8007b90:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007b94:	d005      	beq.n	8007ba2 <__cvt+0x3a>
 8007b96:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007b9a:	d100      	bne.n	8007b9e <__cvt+0x36>
 8007b9c:	3501      	adds	r5, #1
 8007b9e:	2302      	movs	r3, #2
 8007ba0:	e000      	b.n	8007ba4 <__cvt+0x3c>
 8007ba2:	2303      	movs	r3, #3
 8007ba4:	aa07      	add	r2, sp, #28
 8007ba6:	9204      	str	r2, [sp, #16]
 8007ba8:	aa06      	add	r2, sp, #24
 8007baa:	e9cd a202 	strd	sl, r2, [sp, #8]
 8007bae:	e9cd 3500 	strd	r3, r5, [sp]
 8007bb2:	4622      	mov	r2, r4
 8007bb4:	463b      	mov	r3, r7
 8007bb6:	f001 fe17 	bl	80097e8 <_dtoa_r>
 8007bba:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007bbe:	4606      	mov	r6, r0
 8007bc0:	d102      	bne.n	8007bc8 <__cvt+0x60>
 8007bc2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007bc4:	07db      	lsls	r3, r3, #31
 8007bc6:	d522      	bpl.n	8007c0e <__cvt+0xa6>
 8007bc8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007bcc:	eb06 0905 	add.w	r9, r6, r5
 8007bd0:	d110      	bne.n	8007bf4 <__cvt+0x8c>
 8007bd2:	7833      	ldrb	r3, [r6, #0]
 8007bd4:	2b30      	cmp	r3, #48	; 0x30
 8007bd6:	d10a      	bne.n	8007bee <__cvt+0x86>
 8007bd8:	2200      	movs	r2, #0
 8007bda:	2300      	movs	r3, #0
 8007bdc:	4620      	mov	r0, r4
 8007bde:	4639      	mov	r1, r7
 8007be0:	f7f9 f802 	bl	8000be8 <__aeabi_dcmpeq>
 8007be4:	b918      	cbnz	r0, 8007bee <__cvt+0x86>
 8007be6:	f1c5 0501 	rsb	r5, r5, #1
 8007bea:	f8ca 5000 	str.w	r5, [sl]
 8007bee:	f8da 3000 	ldr.w	r3, [sl]
 8007bf2:	4499      	add	r9, r3
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	4620      	mov	r0, r4
 8007bfa:	4639      	mov	r1, r7
 8007bfc:	f7f8 fff4 	bl	8000be8 <__aeabi_dcmpeq>
 8007c00:	b108      	cbz	r0, 8007c06 <__cvt+0x9e>
 8007c02:	f8cd 901c 	str.w	r9, [sp, #28]
 8007c06:	2230      	movs	r2, #48	; 0x30
 8007c08:	9b07      	ldr	r3, [sp, #28]
 8007c0a:	454b      	cmp	r3, r9
 8007c0c:	d307      	bcc.n	8007c1e <__cvt+0xb6>
 8007c0e:	4630      	mov	r0, r6
 8007c10:	9b07      	ldr	r3, [sp, #28]
 8007c12:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007c14:	1b9b      	subs	r3, r3, r6
 8007c16:	6013      	str	r3, [r2, #0]
 8007c18:	b008      	add	sp, #32
 8007c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c1e:	1c59      	adds	r1, r3, #1
 8007c20:	9107      	str	r1, [sp, #28]
 8007c22:	701a      	strb	r2, [r3, #0]
 8007c24:	e7f0      	b.n	8007c08 <__cvt+0xa0>

08007c26 <__exponent>:
 8007c26:	4603      	mov	r3, r0
 8007c28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c2a:	2900      	cmp	r1, #0
 8007c2c:	f803 2b02 	strb.w	r2, [r3], #2
 8007c30:	bfb6      	itet	lt
 8007c32:	222d      	movlt	r2, #45	; 0x2d
 8007c34:	222b      	movge	r2, #43	; 0x2b
 8007c36:	4249      	neglt	r1, r1
 8007c38:	2909      	cmp	r1, #9
 8007c3a:	7042      	strb	r2, [r0, #1]
 8007c3c:	dd2b      	ble.n	8007c96 <__exponent+0x70>
 8007c3e:	f10d 0407 	add.w	r4, sp, #7
 8007c42:	46a4      	mov	ip, r4
 8007c44:	270a      	movs	r7, #10
 8007c46:	fb91 f6f7 	sdiv	r6, r1, r7
 8007c4a:	460a      	mov	r2, r1
 8007c4c:	46a6      	mov	lr, r4
 8007c4e:	fb07 1516 	mls	r5, r7, r6, r1
 8007c52:	2a63      	cmp	r2, #99	; 0x63
 8007c54:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8007c58:	4631      	mov	r1, r6
 8007c5a:	f104 34ff 	add.w	r4, r4, #4294967295
 8007c5e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007c62:	dcf0      	bgt.n	8007c46 <__exponent+0x20>
 8007c64:	3130      	adds	r1, #48	; 0x30
 8007c66:	f1ae 0502 	sub.w	r5, lr, #2
 8007c6a:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007c6e:	4629      	mov	r1, r5
 8007c70:	1c44      	adds	r4, r0, #1
 8007c72:	4561      	cmp	r1, ip
 8007c74:	d30a      	bcc.n	8007c8c <__exponent+0x66>
 8007c76:	f10d 0209 	add.w	r2, sp, #9
 8007c7a:	eba2 020e 	sub.w	r2, r2, lr
 8007c7e:	4565      	cmp	r5, ip
 8007c80:	bf88      	it	hi
 8007c82:	2200      	movhi	r2, #0
 8007c84:	4413      	add	r3, r2
 8007c86:	1a18      	subs	r0, r3, r0
 8007c88:	b003      	add	sp, #12
 8007c8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c8c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c90:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007c94:	e7ed      	b.n	8007c72 <__exponent+0x4c>
 8007c96:	2330      	movs	r3, #48	; 0x30
 8007c98:	3130      	adds	r1, #48	; 0x30
 8007c9a:	7083      	strb	r3, [r0, #2]
 8007c9c:	70c1      	strb	r1, [r0, #3]
 8007c9e:	1d03      	adds	r3, r0, #4
 8007ca0:	e7f1      	b.n	8007c86 <__exponent+0x60>
	...

08007ca4 <_printf_float>:
 8007ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ca8:	b091      	sub	sp, #68	; 0x44
 8007caa:	460c      	mov	r4, r1
 8007cac:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8007cb0:	4616      	mov	r6, r2
 8007cb2:	461f      	mov	r7, r3
 8007cb4:	4605      	mov	r5, r0
 8007cb6:	f002 feeb 	bl	800aa90 <_localeconv_r>
 8007cba:	6803      	ldr	r3, [r0, #0]
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	9309      	str	r3, [sp, #36]	; 0x24
 8007cc0:	f7f8 fab2 	bl	8000228 <strlen>
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	930e      	str	r3, [sp, #56]	; 0x38
 8007cc8:	f8d8 3000 	ldr.w	r3, [r8]
 8007ccc:	900a      	str	r0, [sp, #40]	; 0x28
 8007cce:	3307      	adds	r3, #7
 8007cd0:	f023 0307 	bic.w	r3, r3, #7
 8007cd4:	f103 0208 	add.w	r2, r3, #8
 8007cd8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007cdc:	f8d4 b000 	ldr.w	fp, [r4]
 8007ce0:	f8c8 2000 	str.w	r2, [r8]
 8007ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ce8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007cec:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8007cf0:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8007cf4:	930b      	str	r3, [sp, #44]	; 0x2c
 8007cf6:	f04f 32ff 	mov.w	r2, #4294967295
 8007cfa:	4640      	mov	r0, r8
 8007cfc:	4b9c      	ldr	r3, [pc, #624]	; (8007f70 <_printf_float+0x2cc>)
 8007cfe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007d00:	f7f8 ffa4 	bl	8000c4c <__aeabi_dcmpun>
 8007d04:	bb70      	cbnz	r0, 8007d64 <_printf_float+0xc0>
 8007d06:	f04f 32ff 	mov.w	r2, #4294967295
 8007d0a:	4640      	mov	r0, r8
 8007d0c:	4b98      	ldr	r3, [pc, #608]	; (8007f70 <_printf_float+0x2cc>)
 8007d0e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007d10:	f7f8 ff7e 	bl	8000c10 <__aeabi_dcmple>
 8007d14:	bb30      	cbnz	r0, 8007d64 <_printf_float+0xc0>
 8007d16:	2200      	movs	r2, #0
 8007d18:	2300      	movs	r3, #0
 8007d1a:	4640      	mov	r0, r8
 8007d1c:	4651      	mov	r1, sl
 8007d1e:	f7f8 ff6d 	bl	8000bfc <__aeabi_dcmplt>
 8007d22:	b110      	cbz	r0, 8007d2a <_printf_float+0x86>
 8007d24:	232d      	movs	r3, #45	; 0x2d
 8007d26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d2a:	4b92      	ldr	r3, [pc, #584]	; (8007f74 <_printf_float+0x2d0>)
 8007d2c:	4892      	ldr	r0, [pc, #584]	; (8007f78 <_printf_float+0x2d4>)
 8007d2e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007d32:	bf94      	ite	ls
 8007d34:	4698      	movls	r8, r3
 8007d36:	4680      	movhi	r8, r0
 8007d38:	2303      	movs	r3, #3
 8007d3a:	f04f 0a00 	mov.w	sl, #0
 8007d3e:	6123      	str	r3, [r4, #16]
 8007d40:	f02b 0304 	bic.w	r3, fp, #4
 8007d44:	6023      	str	r3, [r4, #0]
 8007d46:	4633      	mov	r3, r6
 8007d48:	4621      	mov	r1, r4
 8007d4a:	4628      	mov	r0, r5
 8007d4c:	9700      	str	r7, [sp, #0]
 8007d4e:	aa0f      	add	r2, sp, #60	; 0x3c
 8007d50:	f000 f9d4 	bl	80080fc <_printf_common>
 8007d54:	3001      	adds	r0, #1
 8007d56:	f040 8090 	bne.w	8007e7a <_printf_float+0x1d6>
 8007d5a:	f04f 30ff 	mov.w	r0, #4294967295
 8007d5e:	b011      	add	sp, #68	; 0x44
 8007d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d64:	4642      	mov	r2, r8
 8007d66:	4653      	mov	r3, sl
 8007d68:	4640      	mov	r0, r8
 8007d6a:	4651      	mov	r1, sl
 8007d6c:	f7f8 ff6e 	bl	8000c4c <__aeabi_dcmpun>
 8007d70:	b148      	cbz	r0, 8007d86 <_printf_float+0xe2>
 8007d72:	f1ba 0f00 	cmp.w	sl, #0
 8007d76:	bfb8      	it	lt
 8007d78:	232d      	movlt	r3, #45	; 0x2d
 8007d7a:	4880      	ldr	r0, [pc, #512]	; (8007f7c <_printf_float+0x2d8>)
 8007d7c:	bfb8      	it	lt
 8007d7e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007d82:	4b7f      	ldr	r3, [pc, #508]	; (8007f80 <_printf_float+0x2dc>)
 8007d84:	e7d3      	b.n	8007d2e <_printf_float+0x8a>
 8007d86:	6863      	ldr	r3, [r4, #4]
 8007d88:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8007d8c:	1c5a      	adds	r2, r3, #1
 8007d8e:	d142      	bne.n	8007e16 <_printf_float+0x172>
 8007d90:	2306      	movs	r3, #6
 8007d92:	6063      	str	r3, [r4, #4]
 8007d94:	2200      	movs	r2, #0
 8007d96:	9206      	str	r2, [sp, #24]
 8007d98:	aa0e      	add	r2, sp, #56	; 0x38
 8007d9a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8007d9e:	aa0d      	add	r2, sp, #52	; 0x34
 8007da0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8007da4:	9203      	str	r2, [sp, #12]
 8007da6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8007daa:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007dae:	6023      	str	r3, [r4, #0]
 8007db0:	6863      	ldr	r3, [r4, #4]
 8007db2:	4642      	mov	r2, r8
 8007db4:	9300      	str	r3, [sp, #0]
 8007db6:	4628      	mov	r0, r5
 8007db8:	4653      	mov	r3, sl
 8007dba:	910b      	str	r1, [sp, #44]	; 0x2c
 8007dbc:	f7ff fed4 	bl	8007b68 <__cvt>
 8007dc0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007dc2:	4680      	mov	r8, r0
 8007dc4:	2947      	cmp	r1, #71	; 0x47
 8007dc6:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007dc8:	d108      	bne.n	8007ddc <_printf_float+0x138>
 8007dca:	1cc8      	adds	r0, r1, #3
 8007dcc:	db02      	blt.n	8007dd4 <_printf_float+0x130>
 8007dce:	6863      	ldr	r3, [r4, #4]
 8007dd0:	4299      	cmp	r1, r3
 8007dd2:	dd40      	ble.n	8007e56 <_printf_float+0x1b2>
 8007dd4:	f1a9 0902 	sub.w	r9, r9, #2
 8007dd8:	fa5f f989 	uxtb.w	r9, r9
 8007ddc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007de0:	d81f      	bhi.n	8007e22 <_printf_float+0x17e>
 8007de2:	464a      	mov	r2, r9
 8007de4:	3901      	subs	r1, #1
 8007de6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007dea:	910d      	str	r1, [sp, #52]	; 0x34
 8007dec:	f7ff ff1b 	bl	8007c26 <__exponent>
 8007df0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007df2:	4682      	mov	sl, r0
 8007df4:	1813      	adds	r3, r2, r0
 8007df6:	2a01      	cmp	r2, #1
 8007df8:	6123      	str	r3, [r4, #16]
 8007dfa:	dc02      	bgt.n	8007e02 <_printf_float+0x15e>
 8007dfc:	6822      	ldr	r2, [r4, #0]
 8007dfe:	07d2      	lsls	r2, r2, #31
 8007e00:	d501      	bpl.n	8007e06 <_printf_float+0x162>
 8007e02:	3301      	adds	r3, #1
 8007e04:	6123      	str	r3, [r4, #16]
 8007e06:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d09b      	beq.n	8007d46 <_printf_float+0xa2>
 8007e0e:	232d      	movs	r3, #45	; 0x2d
 8007e10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e14:	e797      	b.n	8007d46 <_printf_float+0xa2>
 8007e16:	2947      	cmp	r1, #71	; 0x47
 8007e18:	d1bc      	bne.n	8007d94 <_printf_float+0xf0>
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d1ba      	bne.n	8007d94 <_printf_float+0xf0>
 8007e1e:	2301      	movs	r3, #1
 8007e20:	e7b7      	b.n	8007d92 <_printf_float+0xee>
 8007e22:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007e26:	d118      	bne.n	8007e5a <_printf_float+0x1b6>
 8007e28:	2900      	cmp	r1, #0
 8007e2a:	6863      	ldr	r3, [r4, #4]
 8007e2c:	dd0b      	ble.n	8007e46 <_printf_float+0x1a2>
 8007e2e:	6121      	str	r1, [r4, #16]
 8007e30:	b913      	cbnz	r3, 8007e38 <_printf_float+0x194>
 8007e32:	6822      	ldr	r2, [r4, #0]
 8007e34:	07d0      	lsls	r0, r2, #31
 8007e36:	d502      	bpl.n	8007e3e <_printf_float+0x19a>
 8007e38:	3301      	adds	r3, #1
 8007e3a:	440b      	add	r3, r1
 8007e3c:	6123      	str	r3, [r4, #16]
 8007e3e:	f04f 0a00 	mov.w	sl, #0
 8007e42:	65a1      	str	r1, [r4, #88]	; 0x58
 8007e44:	e7df      	b.n	8007e06 <_printf_float+0x162>
 8007e46:	b913      	cbnz	r3, 8007e4e <_printf_float+0x1aa>
 8007e48:	6822      	ldr	r2, [r4, #0]
 8007e4a:	07d2      	lsls	r2, r2, #31
 8007e4c:	d501      	bpl.n	8007e52 <_printf_float+0x1ae>
 8007e4e:	3302      	adds	r3, #2
 8007e50:	e7f4      	b.n	8007e3c <_printf_float+0x198>
 8007e52:	2301      	movs	r3, #1
 8007e54:	e7f2      	b.n	8007e3c <_printf_float+0x198>
 8007e56:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007e5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e5c:	4299      	cmp	r1, r3
 8007e5e:	db05      	blt.n	8007e6c <_printf_float+0x1c8>
 8007e60:	6823      	ldr	r3, [r4, #0]
 8007e62:	6121      	str	r1, [r4, #16]
 8007e64:	07d8      	lsls	r0, r3, #31
 8007e66:	d5ea      	bpl.n	8007e3e <_printf_float+0x19a>
 8007e68:	1c4b      	adds	r3, r1, #1
 8007e6a:	e7e7      	b.n	8007e3c <_printf_float+0x198>
 8007e6c:	2900      	cmp	r1, #0
 8007e6e:	bfcc      	ite	gt
 8007e70:	2201      	movgt	r2, #1
 8007e72:	f1c1 0202 	rsble	r2, r1, #2
 8007e76:	4413      	add	r3, r2
 8007e78:	e7e0      	b.n	8007e3c <_printf_float+0x198>
 8007e7a:	6823      	ldr	r3, [r4, #0]
 8007e7c:	055a      	lsls	r2, r3, #21
 8007e7e:	d407      	bmi.n	8007e90 <_printf_float+0x1ec>
 8007e80:	6923      	ldr	r3, [r4, #16]
 8007e82:	4642      	mov	r2, r8
 8007e84:	4631      	mov	r1, r6
 8007e86:	4628      	mov	r0, r5
 8007e88:	47b8      	blx	r7
 8007e8a:	3001      	adds	r0, #1
 8007e8c:	d12b      	bne.n	8007ee6 <_printf_float+0x242>
 8007e8e:	e764      	b.n	8007d5a <_printf_float+0xb6>
 8007e90:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007e94:	f240 80dd 	bls.w	8008052 <_printf_float+0x3ae>
 8007e98:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	f7f8 fea2 	bl	8000be8 <__aeabi_dcmpeq>
 8007ea4:	2800      	cmp	r0, #0
 8007ea6:	d033      	beq.n	8007f10 <_printf_float+0x26c>
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	4631      	mov	r1, r6
 8007eac:	4628      	mov	r0, r5
 8007eae:	4a35      	ldr	r2, [pc, #212]	; (8007f84 <_printf_float+0x2e0>)
 8007eb0:	47b8      	blx	r7
 8007eb2:	3001      	adds	r0, #1
 8007eb4:	f43f af51 	beq.w	8007d5a <_printf_float+0xb6>
 8007eb8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007ebc:	429a      	cmp	r2, r3
 8007ebe:	db02      	blt.n	8007ec6 <_printf_float+0x222>
 8007ec0:	6823      	ldr	r3, [r4, #0]
 8007ec2:	07d8      	lsls	r0, r3, #31
 8007ec4:	d50f      	bpl.n	8007ee6 <_printf_float+0x242>
 8007ec6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007eca:	4631      	mov	r1, r6
 8007ecc:	4628      	mov	r0, r5
 8007ece:	47b8      	blx	r7
 8007ed0:	3001      	adds	r0, #1
 8007ed2:	f43f af42 	beq.w	8007d5a <_printf_float+0xb6>
 8007ed6:	f04f 0800 	mov.w	r8, #0
 8007eda:	f104 091a 	add.w	r9, r4, #26
 8007ede:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007ee0:	3b01      	subs	r3, #1
 8007ee2:	4543      	cmp	r3, r8
 8007ee4:	dc09      	bgt.n	8007efa <_printf_float+0x256>
 8007ee6:	6823      	ldr	r3, [r4, #0]
 8007ee8:	079b      	lsls	r3, r3, #30
 8007eea:	f100 8102 	bmi.w	80080f2 <_printf_float+0x44e>
 8007eee:	68e0      	ldr	r0, [r4, #12]
 8007ef0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007ef2:	4298      	cmp	r0, r3
 8007ef4:	bfb8      	it	lt
 8007ef6:	4618      	movlt	r0, r3
 8007ef8:	e731      	b.n	8007d5e <_printf_float+0xba>
 8007efa:	2301      	movs	r3, #1
 8007efc:	464a      	mov	r2, r9
 8007efe:	4631      	mov	r1, r6
 8007f00:	4628      	mov	r0, r5
 8007f02:	47b8      	blx	r7
 8007f04:	3001      	adds	r0, #1
 8007f06:	f43f af28 	beq.w	8007d5a <_printf_float+0xb6>
 8007f0a:	f108 0801 	add.w	r8, r8, #1
 8007f0e:	e7e6      	b.n	8007ede <_printf_float+0x23a>
 8007f10:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	dc38      	bgt.n	8007f88 <_printf_float+0x2e4>
 8007f16:	2301      	movs	r3, #1
 8007f18:	4631      	mov	r1, r6
 8007f1a:	4628      	mov	r0, r5
 8007f1c:	4a19      	ldr	r2, [pc, #100]	; (8007f84 <_printf_float+0x2e0>)
 8007f1e:	47b8      	blx	r7
 8007f20:	3001      	adds	r0, #1
 8007f22:	f43f af1a 	beq.w	8007d5a <_printf_float+0xb6>
 8007f26:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007f2a:	4313      	orrs	r3, r2
 8007f2c:	d102      	bne.n	8007f34 <_printf_float+0x290>
 8007f2e:	6823      	ldr	r3, [r4, #0]
 8007f30:	07d9      	lsls	r1, r3, #31
 8007f32:	d5d8      	bpl.n	8007ee6 <_printf_float+0x242>
 8007f34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f38:	4631      	mov	r1, r6
 8007f3a:	4628      	mov	r0, r5
 8007f3c:	47b8      	blx	r7
 8007f3e:	3001      	adds	r0, #1
 8007f40:	f43f af0b 	beq.w	8007d5a <_printf_float+0xb6>
 8007f44:	f04f 0900 	mov.w	r9, #0
 8007f48:	f104 0a1a 	add.w	sl, r4, #26
 8007f4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f4e:	425b      	negs	r3, r3
 8007f50:	454b      	cmp	r3, r9
 8007f52:	dc01      	bgt.n	8007f58 <_printf_float+0x2b4>
 8007f54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f56:	e794      	b.n	8007e82 <_printf_float+0x1de>
 8007f58:	2301      	movs	r3, #1
 8007f5a:	4652      	mov	r2, sl
 8007f5c:	4631      	mov	r1, r6
 8007f5e:	4628      	mov	r0, r5
 8007f60:	47b8      	blx	r7
 8007f62:	3001      	adds	r0, #1
 8007f64:	f43f aef9 	beq.w	8007d5a <_printf_float+0xb6>
 8007f68:	f109 0901 	add.w	r9, r9, #1
 8007f6c:	e7ee      	b.n	8007f4c <_printf_float+0x2a8>
 8007f6e:	bf00      	nop
 8007f70:	7fefffff 	.word	0x7fefffff
 8007f74:	0800cce0 	.word	0x0800cce0
 8007f78:	0800cce4 	.word	0x0800cce4
 8007f7c:	0800ccec 	.word	0x0800ccec
 8007f80:	0800cce8 	.word	0x0800cce8
 8007f84:	0800d0e1 	.word	0x0800d0e1
 8007f88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007f8a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007f8c:	429a      	cmp	r2, r3
 8007f8e:	bfa8      	it	ge
 8007f90:	461a      	movge	r2, r3
 8007f92:	2a00      	cmp	r2, #0
 8007f94:	4691      	mov	r9, r2
 8007f96:	dc37      	bgt.n	8008008 <_printf_float+0x364>
 8007f98:	f04f 0b00 	mov.w	fp, #0
 8007f9c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007fa0:	f104 021a 	add.w	r2, r4, #26
 8007fa4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007fa8:	ebaa 0309 	sub.w	r3, sl, r9
 8007fac:	455b      	cmp	r3, fp
 8007fae:	dc33      	bgt.n	8008018 <_printf_float+0x374>
 8007fb0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007fb4:	429a      	cmp	r2, r3
 8007fb6:	db3b      	blt.n	8008030 <_printf_float+0x38c>
 8007fb8:	6823      	ldr	r3, [r4, #0]
 8007fba:	07da      	lsls	r2, r3, #31
 8007fbc:	d438      	bmi.n	8008030 <_printf_float+0x38c>
 8007fbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007fc0:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007fc2:	eba3 020a 	sub.w	r2, r3, sl
 8007fc6:	eba3 0901 	sub.w	r9, r3, r1
 8007fca:	4591      	cmp	r9, r2
 8007fcc:	bfa8      	it	ge
 8007fce:	4691      	movge	r9, r2
 8007fd0:	f1b9 0f00 	cmp.w	r9, #0
 8007fd4:	dc34      	bgt.n	8008040 <_printf_float+0x39c>
 8007fd6:	f04f 0800 	mov.w	r8, #0
 8007fda:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007fde:	f104 0a1a 	add.w	sl, r4, #26
 8007fe2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007fe6:	1a9b      	subs	r3, r3, r2
 8007fe8:	eba3 0309 	sub.w	r3, r3, r9
 8007fec:	4543      	cmp	r3, r8
 8007fee:	f77f af7a 	ble.w	8007ee6 <_printf_float+0x242>
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	4652      	mov	r2, sl
 8007ff6:	4631      	mov	r1, r6
 8007ff8:	4628      	mov	r0, r5
 8007ffa:	47b8      	blx	r7
 8007ffc:	3001      	adds	r0, #1
 8007ffe:	f43f aeac 	beq.w	8007d5a <_printf_float+0xb6>
 8008002:	f108 0801 	add.w	r8, r8, #1
 8008006:	e7ec      	b.n	8007fe2 <_printf_float+0x33e>
 8008008:	4613      	mov	r3, r2
 800800a:	4631      	mov	r1, r6
 800800c:	4642      	mov	r2, r8
 800800e:	4628      	mov	r0, r5
 8008010:	47b8      	blx	r7
 8008012:	3001      	adds	r0, #1
 8008014:	d1c0      	bne.n	8007f98 <_printf_float+0x2f4>
 8008016:	e6a0      	b.n	8007d5a <_printf_float+0xb6>
 8008018:	2301      	movs	r3, #1
 800801a:	4631      	mov	r1, r6
 800801c:	4628      	mov	r0, r5
 800801e:	920b      	str	r2, [sp, #44]	; 0x2c
 8008020:	47b8      	blx	r7
 8008022:	3001      	adds	r0, #1
 8008024:	f43f ae99 	beq.w	8007d5a <_printf_float+0xb6>
 8008028:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800802a:	f10b 0b01 	add.w	fp, fp, #1
 800802e:	e7b9      	b.n	8007fa4 <_printf_float+0x300>
 8008030:	4631      	mov	r1, r6
 8008032:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008036:	4628      	mov	r0, r5
 8008038:	47b8      	blx	r7
 800803a:	3001      	adds	r0, #1
 800803c:	d1bf      	bne.n	8007fbe <_printf_float+0x31a>
 800803e:	e68c      	b.n	8007d5a <_printf_float+0xb6>
 8008040:	464b      	mov	r3, r9
 8008042:	4631      	mov	r1, r6
 8008044:	4628      	mov	r0, r5
 8008046:	eb08 020a 	add.w	r2, r8, sl
 800804a:	47b8      	blx	r7
 800804c:	3001      	adds	r0, #1
 800804e:	d1c2      	bne.n	8007fd6 <_printf_float+0x332>
 8008050:	e683      	b.n	8007d5a <_printf_float+0xb6>
 8008052:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008054:	2a01      	cmp	r2, #1
 8008056:	dc01      	bgt.n	800805c <_printf_float+0x3b8>
 8008058:	07db      	lsls	r3, r3, #31
 800805a:	d537      	bpl.n	80080cc <_printf_float+0x428>
 800805c:	2301      	movs	r3, #1
 800805e:	4642      	mov	r2, r8
 8008060:	4631      	mov	r1, r6
 8008062:	4628      	mov	r0, r5
 8008064:	47b8      	blx	r7
 8008066:	3001      	adds	r0, #1
 8008068:	f43f ae77 	beq.w	8007d5a <_printf_float+0xb6>
 800806c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008070:	4631      	mov	r1, r6
 8008072:	4628      	mov	r0, r5
 8008074:	47b8      	blx	r7
 8008076:	3001      	adds	r0, #1
 8008078:	f43f ae6f 	beq.w	8007d5a <_printf_float+0xb6>
 800807c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008080:	2200      	movs	r2, #0
 8008082:	2300      	movs	r3, #0
 8008084:	f7f8 fdb0 	bl	8000be8 <__aeabi_dcmpeq>
 8008088:	b9d8      	cbnz	r0, 80080c2 <_printf_float+0x41e>
 800808a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800808c:	f108 0201 	add.w	r2, r8, #1
 8008090:	3b01      	subs	r3, #1
 8008092:	4631      	mov	r1, r6
 8008094:	4628      	mov	r0, r5
 8008096:	47b8      	blx	r7
 8008098:	3001      	adds	r0, #1
 800809a:	d10e      	bne.n	80080ba <_printf_float+0x416>
 800809c:	e65d      	b.n	8007d5a <_printf_float+0xb6>
 800809e:	2301      	movs	r3, #1
 80080a0:	464a      	mov	r2, r9
 80080a2:	4631      	mov	r1, r6
 80080a4:	4628      	mov	r0, r5
 80080a6:	47b8      	blx	r7
 80080a8:	3001      	adds	r0, #1
 80080aa:	f43f ae56 	beq.w	8007d5a <_printf_float+0xb6>
 80080ae:	f108 0801 	add.w	r8, r8, #1
 80080b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80080b4:	3b01      	subs	r3, #1
 80080b6:	4543      	cmp	r3, r8
 80080b8:	dcf1      	bgt.n	800809e <_printf_float+0x3fa>
 80080ba:	4653      	mov	r3, sl
 80080bc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80080c0:	e6e0      	b.n	8007e84 <_printf_float+0x1e0>
 80080c2:	f04f 0800 	mov.w	r8, #0
 80080c6:	f104 091a 	add.w	r9, r4, #26
 80080ca:	e7f2      	b.n	80080b2 <_printf_float+0x40e>
 80080cc:	2301      	movs	r3, #1
 80080ce:	4642      	mov	r2, r8
 80080d0:	e7df      	b.n	8008092 <_printf_float+0x3ee>
 80080d2:	2301      	movs	r3, #1
 80080d4:	464a      	mov	r2, r9
 80080d6:	4631      	mov	r1, r6
 80080d8:	4628      	mov	r0, r5
 80080da:	47b8      	blx	r7
 80080dc:	3001      	adds	r0, #1
 80080de:	f43f ae3c 	beq.w	8007d5a <_printf_float+0xb6>
 80080e2:	f108 0801 	add.w	r8, r8, #1
 80080e6:	68e3      	ldr	r3, [r4, #12]
 80080e8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80080ea:	1a5b      	subs	r3, r3, r1
 80080ec:	4543      	cmp	r3, r8
 80080ee:	dcf0      	bgt.n	80080d2 <_printf_float+0x42e>
 80080f0:	e6fd      	b.n	8007eee <_printf_float+0x24a>
 80080f2:	f04f 0800 	mov.w	r8, #0
 80080f6:	f104 0919 	add.w	r9, r4, #25
 80080fa:	e7f4      	b.n	80080e6 <_printf_float+0x442>

080080fc <_printf_common>:
 80080fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008100:	4616      	mov	r6, r2
 8008102:	4699      	mov	r9, r3
 8008104:	688a      	ldr	r2, [r1, #8]
 8008106:	690b      	ldr	r3, [r1, #16]
 8008108:	4607      	mov	r7, r0
 800810a:	4293      	cmp	r3, r2
 800810c:	bfb8      	it	lt
 800810e:	4613      	movlt	r3, r2
 8008110:	6033      	str	r3, [r6, #0]
 8008112:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008116:	460c      	mov	r4, r1
 8008118:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800811c:	b10a      	cbz	r2, 8008122 <_printf_common+0x26>
 800811e:	3301      	adds	r3, #1
 8008120:	6033      	str	r3, [r6, #0]
 8008122:	6823      	ldr	r3, [r4, #0]
 8008124:	0699      	lsls	r1, r3, #26
 8008126:	bf42      	ittt	mi
 8008128:	6833      	ldrmi	r3, [r6, #0]
 800812a:	3302      	addmi	r3, #2
 800812c:	6033      	strmi	r3, [r6, #0]
 800812e:	6825      	ldr	r5, [r4, #0]
 8008130:	f015 0506 	ands.w	r5, r5, #6
 8008134:	d106      	bne.n	8008144 <_printf_common+0x48>
 8008136:	f104 0a19 	add.w	sl, r4, #25
 800813a:	68e3      	ldr	r3, [r4, #12]
 800813c:	6832      	ldr	r2, [r6, #0]
 800813e:	1a9b      	subs	r3, r3, r2
 8008140:	42ab      	cmp	r3, r5
 8008142:	dc28      	bgt.n	8008196 <_printf_common+0x9a>
 8008144:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008148:	1e13      	subs	r3, r2, #0
 800814a:	6822      	ldr	r2, [r4, #0]
 800814c:	bf18      	it	ne
 800814e:	2301      	movne	r3, #1
 8008150:	0692      	lsls	r2, r2, #26
 8008152:	d42d      	bmi.n	80081b0 <_printf_common+0xb4>
 8008154:	4649      	mov	r1, r9
 8008156:	4638      	mov	r0, r7
 8008158:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800815c:	47c0      	blx	r8
 800815e:	3001      	adds	r0, #1
 8008160:	d020      	beq.n	80081a4 <_printf_common+0xa8>
 8008162:	6823      	ldr	r3, [r4, #0]
 8008164:	68e5      	ldr	r5, [r4, #12]
 8008166:	f003 0306 	and.w	r3, r3, #6
 800816a:	2b04      	cmp	r3, #4
 800816c:	bf18      	it	ne
 800816e:	2500      	movne	r5, #0
 8008170:	6832      	ldr	r2, [r6, #0]
 8008172:	f04f 0600 	mov.w	r6, #0
 8008176:	68a3      	ldr	r3, [r4, #8]
 8008178:	bf08      	it	eq
 800817a:	1aad      	subeq	r5, r5, r2
 800817c:	6922      	ldr	r2, [r4, #16]
 800817e:	bf08      	it	eq
 8008180:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008184:	4293      	cmp	r3, r2
 8008186:	bfc4      	itt	gt
 8008188:	1a9b      	subgt	r3, r3, r2
 800818a:	18ed      	addgt	r5, r5, r3
 800818c:	341a      	adds	r4, #26
 800818e:	42b5      	cmp	r5, r6
 8008190:	d11a      	bne.n	80081c8 <_printf_common+0xcc>
 8008192:	2000      	movs	r0, #0
 8008194:	e008      	b.n	80081a8 <_printf_common+0xac>
 8008196:	2301      	movs	r3, #1
 8008198:	4652      	mov	r2, sl
 800819a:	4649      	mov	r1, r9
 800819c:	4638      	mov	r0, r7
 800819e:	47c0      	blx	r8
 80081a0:	3001      	adds	r0, #1
 80081a2:	d103      	bne.n	80081ac <_printf_common+0xb0>
 80081a4:	f04f 30ff 	mov.w	r0, #4294967295
 80081a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081ac:	3501      	adds	r5, #1
 80081ae:	e7c4      	b.n	800813a <_printf_common+0x3e>
 80081b0:	2030      	movs	r0, #48	; 0x30
 80081b2:	18e1      	adds	r1, r4, r3
 80081b4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80081b8:	1c5a      	adds	r2, r3, #1
 80081ba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80081be:	4422      	add	r2, r4
 80081c0:	3302      	adds	r3, #2
 80081c2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80081c6:	e7c5      	b.n	8008154 <_printf_common+0x58>
 80081c8:	2301      	movs	r3, #1
 80081ca:	4622      	mov	r2, r4
 80081cc:	4649      	mov	r1, r9
 80081ce:	4638      	mov	r0, r7
 80081d0:	47c0      	blx	r8
 80081d2:	3001      	adds	r0, #1
 80081d4:	d0e6      	beq.n	80081a4 <_printf_common+0xa8>
 80081d6:	3601      	adds	r6, #1
 80081d8:	e7d9      	b.n	800818e <_printf_common+0x92>
	...

080081dc <_printf_i>:
 80081dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80081e0:	7e0f      	ldrb	r7, [r1, #24]
 80081e2:	4691      	mov	r9, r2
 80081e4:	2f78      	cmp	r7, #120	; 0x78
 80081e6:	4680      	mov	r8, r0
 80081e8:	460c      	mov	r4, r1
 80081ea:	469a      	mov	sl, r3
 80081ec:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80081ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80081f2:	d807      	bhi.n	8008204 <_printf_i+0x28>
 80081f4:	2f62      	cmp	r7, #98	; 0x62
 80081f6:	d80a      	bhi.n	800820e <_printf_i+0x32>
 80081f8:	2f00      	cmp	r7, #0
 80081fa:	f000 80d9 	beq.w	80083b0 <_printf_i+0x1d4>
 80081fe:	2f58      	cmp	r7, #88	; 0x58
 8008200:	f000 80a4 	beq.w	800834c <_printf_i+0x170>
 8008204:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008208:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800820c:	e03a      	b.n	8008284 <_printf_i+0xa8>
 800820e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008212:	2b15      	cmp	r3, #21
 8008214:	d8f6      	bhi.n	8008204 <_printf_i+0x28>
 8008216:	a101      	add	r1, pc, #4	; (adr r1, 800821c <_printf_i+0x40>)
 8008218:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800821c:	08008275 	.word	0x08008275
 8008220:	08008289 	.word	0x08008289
 8008224:	08008205 	.word	0x08008205
 8008228:	08008205 	.word	0x08008205
 800822c:	08008205 	.word	0x08008205
 8008230:	08008205 	.word	0x08008205
 8008234:	08008289 	.word	0x08008289
 8008238:	08008205 	.word	0x08008205
 800823c:	08008205 	.word	0x08008205
 8008240:	08008205 	.word	0x08008205
 8008244:	08008205 	.word	0x08008205
 8008248:	08008397 	.word	0x08008397
 800824c:	080082b9 	.word	0x080082b9
 8008250:	08008379 	.word	0x08008379
 8008254:	08008205 	.word	0x08008205
 8008258:	08008205 	.word	0x08008205
 800825c:	080083b9 	.word	0x080083b9
 8008260:	08008205 	.word	0x08008205
 8008264:	080082b9 	.word	0x080082b9
 8008268:	08008205 	.word	0x08008205
 800826c:	08008205 	.word	0x08008205
 8008270:	08008381 	.word	0x08008381
 8008274:	682b      	ldr	r3, [r5, #0]
 8008276:	1d1a      	adds	r2, r3, #4
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	602a      	str	r2, [r5, #0]
 800827c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008280:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008284:	2301      	movs	r3, #1
 8008286:	e0a4      	b.n	80083d2 <_printf_i+0x1f6>
 8008288:	6820      	ldr	r0, [r4, #0]
 800828a:	6829      	ldr	r1, [r5, #0]
 800828c:	0606      	lsls	r6, r0, #24
 800828e:	f101 0304 	add.w	r3, r1, #4
 8008292:	d50a      	bpl.n	80082aa <_printf_i+0xce>
 8008294:	680e      	ldr	r6, [r1, #0]
 8008296:	602b      	str	r3, [r5, #0]
 8008298:	2e00      	cmp	r6, #0
 800829a:	da03      	bge.n	80082a4 <_printf_i+0xc8>
 800829c:	232d      	movs	r3, #45	; 0x2d
 800829e:	4276      	negs	r6, r6
 80082a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80082a4:	230a      	movs	r3, #10
 80082a6:	485e      	ldr	r0, [pc, #376]	; (8008420 <_printf_i+0x244>)
 80082a8:	e019      	b.n	80082de <_printf_i+0x102>
 80082aa:	680e      	ldr	r6, [r1, #0]
 80082ac:	f010 0f40 	tst.w	r0, #64	; 0x40
 80082b0:	602b      	str	r3, [r5, #0]
 80082b2:	bf18      	it	ne
 80082b4:	b236      	sxthne	r6, r6
 80082b6:	e7ef      	b.n	8008298 <_printf_i+0xbc>
 80082b8:	682b      	ldr	r3, [r5, #0]
 80082ba:	6820      	ldr	r0, [r4, #0]
 80082bc:	1d19      	adds	r1, r3, #4
 80082be:	6029      	str	r1, [r5, #0]
 80082c0:	0601      	lsls	r1, r0, #24
 80082c2:	d501      	bpl.n	80082c8 <_printf_i+0xec>
 80082c4:	681e      	ldr	r6, [r3, #0]
 80082c6:	e002      	b.n	80082ce <_printf_i+0xf2>
 80082c8:	0646      	lsls	r6, r0, #25
 80082ca:	d5fb      	bpl.n	80082c4 <_printf_i+0xe8>
 80082cc:	881e      	ldrh	r6, [r3, #0]
 80082ce:	2f6f      	cmp	r7, #111	; 0x6f
 80082d0:	bf0c      	ite	eq
 80082d2:	2308      	moveq	r3, #8
 80082d4:	230a      	movne	r3, #10
 80082d6:	4852      	ldr	r0, [pc, #328]	; (8008420 <_printf_i+0x244>)
 80082d8:	2100      	movs	r1, #0
 80082da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80082de:	6865      	ldr	r5, [r4, #4]
 80082e0:	2d00      	cmp	r5, #0
 80082e2:	bfa8      	it	ge
 80082e4:	6821      	ldrge	r1, [r4, #0]
 80082e6:	60a5      	str	r5, [r4, #8]
 80082e8:	bfa4      	itt	ge
 80082ea:	f021 0104 	bicge.w	r1, r1, #4
 80082ee:	6021      	strge	r1, [r4, #0]
 80082f0:	b90e      	cbnz	r6, 80082f6 <_printf_i+0x11a>
 80082f2:	2d00      	cmp	r5, #0
 80082f4:	d04d      	beq.n	8008392 <_printf_i+0x1b6>
 80082f6:	4615      	mov	r5, r2
 80082f8:	fbb6 f1f3 	udiv	r1, r6, r3
 80082fc:	fb03 6711 	mls	r7, r3, r1, r6
 8008300:	5dc7      	ldrb	r7, [r0, r7]
 8008302:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008306:	4637      	mov	r7, r6
 8008308:	42bb      	cmp	r3, r7
 800830a:	460e      	mov	r6, r1
 800830c:	d9f4      	bls.n	80082f8 <_printf_i+0x11c>
 800830e:	2b08      	cmp	r3, #8
 8008310:	d10b      	bne.n	800832a <_printf_i+0x14e>
 8008312:	6823      	ldr	r3, [r4, #0]
 8008314:	07de      	lsls	r6, r3, #31
 8008316:	d508      	bpl.n	800832a <_printf_i+0x14e>
 8008318:	6923      	ldr	r3, [r4, #16]
 800831a:	6861      	ldr	r1, [r4, #4]
 800831c:	4299      	cmp	r1, r3
 800831e:	bfde      	ittt	le
 8008320:	2330      	movle	r3, #48	; 0x30
 8008322:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008326:	f105 35ff 	addle.w	r5, r5, #4294967295
 800832a:	1b52      	subs	r2, r2, r5
 800832c:	6122      	str	r2, [r4, #16]
 800832e:	464b      	mov	r3, r9
 8008330:	4621      	mov	r1, r4
 8008332:	4640      	mov	r0, r8
 8008334:	f8cd a000 	str.w	sl, [sp]
 8008338:	aa03      	add	r2, sp, #12
 800833a:	f7ff fedf 	bl	80080fc <_printf_common>
 800833e:	3001      	adds	r0, #1
 8008340:	d14c      	bne.n	80083dc <_printf_i+0x200>
 8008342:	f04f 30ff 	mov.w	r0, #4294967295
 8008346:	b004      	add	sp, #16
 8008348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800834c:	4834      	ldr	r0, [pc, #208]	; (8008420 <_printf_i+0x244>)
 800834e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008352:	6829      	ldr	r1, [r5, #0]
 8008354:	6823      	ldr	r3, [r4, #0]
 8008356:	f851 6b04 	ldr.w	r6, [r1], #4
 800835a:	6029      	str	r1, [r5, #0]
 800835c:	061d      	lsls	r5, r3, #24
 800835e:	d514      	bpl.n	800838a <_printf_i+0x1ae>
 8008360:	07df      	lsls	r7, r3, #31
 8008362:	bf44      	itt	mi
 8008364:	f043 0320 	orrmi.w	r3, r3, #32
 8008368:	6023      	strmi	r3, [r4, #0]
 800836a:	b91e      	cbnz	r6, 8008374 <_printf_i+0x198>
 800836c:	6823      	ldr	r3, [r4, #0]
 800836e:	f023 0320 	bic.w	r3, r3, #32
 8008372:	6023      	str	r3, [r4, #0]
 8008374:	2310      	movs	r3, #16
 8008376:	e7af      	b.n	80082d8 <_printf_i+0xfc>
 8008378:	6823      	ldr	r3, [r4, #0]
 800837a:	f043 0320 	orr.w	r3, r3, #32
 800837e:	6023      	str	r3, [r4, #0]
 8008380:	2378      	movs	r3, #120	; 0x78
 8008382:	4828      	ldr	r0, [pc, #160]	; (8008424 <_printf_i+0x248>)
 8008384:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008388:	e7e3      	b.n	8008352 <_printf_i+0x176>
 800838a:	0659      	lsls	r1, r3, #25
 800838c:	bf48      	it	mi
 800838e:	b2b6      	uxthmi	r6, r6
 8008390:	e7e6      	b.n	8008360 <_printf_i+0x184>
 8008392:	4615      	mov	r5, r2
 8008394:	e7bb      	b.n	800830e <_printf_i+0x132>
 8008396:	682b      	ldr	r3, [r5, #0]
 8008398:	6826      	ldr	r6, [r4, #0]
 800839a:	1d18      	adds	r0, r3, #4
 800839c:	6961      	ldr	r1, [r4, #20]
 800839e:	6028      	str	r0, [r5, #0]
 80083a0:	0635      	lsls	r5, r6, #24
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	d501      	bpl.n	80083aa <_printf_i+0x1ce>
 80083a6:	6019      	str	r1, [r3, #0]
 80083a8:	e002      	b.n	80083b0 <_printf_i+0x1d4>
 80083aa:	0670      	lsls	r0, r6, #25
 80083ac:	d5fb      	bpl.n	80083a6 <_printf_i+0x1ca>
 80083ae:	8019      	strh	r1, [r3, #0]
 80083b0:	2300      	movs	r3, #0
 80083b2:	4615      	mov	r5, r2
 80083b4:	6123      	str	r3, [r4, #16]
 80083b6:	e7ba      	b.n	800832e <_printf_i+0x152>
 80083b8:	682b      	ldr	r3, [r5, #0]
 80083ba:	2100      	movs	r1, #0
 80083bc:	1d1a      	adds	r2, r3, #4
 80083be:	602a      	str	r2, [r5, #0]
 80083c0:	681d      	ldr	r5, [r3, #0]
 80083c2:	6862      	ldr	r2, [r4, #4]
 80083c4:	4628      	mov	r0, r5
 80083c6:	f002 fb93 	bl	800aaf0 <memchr>
 80083ca:	b108      	cbz	r0, 80083d0 <_printf_i+0x1f4>
 80083cc:	1b40      	subs	r0, r0, r5
 80083ce:	6060      	str	r0, [r4, #4]
 80083d0:	6863      	ldr	r3, [r4, #4]
 80083d2:	6123      	str	r3, [r4, #16]
 80083d4:	2300      	movs	r3, #0
 80083d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083da:	e7a8      	b.n	800832e <_printf_i+0x152>
 80083dc:	462a      	mov	r2, r5
 80083de:	4649      	mov	r1, r9
 80083e0:	4640      	mov	r0, r8
 80083e2:	6923      	ldr	r3, [r4, #16]
 80083e4:	47d0      	blx	sl
 80083e6:	3001      	adds	r0, #1
 80083e8:	d0ab      	beq.n	8008342 <_printf_i+0x166>
 80083ea:	6823      	ldr	r3, [r4, #0]
 80083ec:	079b      	lsls	r3, r3, #30
 80083ee:	d413      	bmi.n	8008418 <_printf_i+0x23c>
 80083f0:	68e0      	ldr	r0, [r4, #12]
 80083f2:	9b03      	ldr	r3, [sp, #12]
 80083f4:	4298      	cmp	r0, r3
 80083f6:	bfb8      	it	lt
 80083f8:	4618      	movlt	r0, r3
 80083fa:	e7a4      	b.n	8008346 <_printf_i+0x16a>
 80083fc:	2301      	movs	r3, #1
 80083fe:	4632      	mov	r2, r6
 8008400:	4649      	mov	r1, r9
 8008402:	4640      	mov	r0, r8
 8008404:	47d0      	blx	sl
 8008406:	3001      	adds	r0, #1
 8008408:	d09b      	beq.n	8008342 <_printf_i+0x166>
 800840a:	3501      	adds	r5, #1
 800840c:	68e3      	ldr	r3, [r4, #12]
 800840e:	9903      	ldr	r1, [sp, #12]
 8008410:	1a5b      	subs	r3, r3, r1
 8008412:	42ab      	cmp	r3, r5
 8008414:	dcf2      	bgt.n	80083fc <_printf_i+0x220>
 8008416:	e7eb      	b.n	80083f0 <_printf_i+0x214>
 8008418:	2500      	movs	r5, #0
 800841a:	f104 0619 	add.w	r6, r4, #25
 800841e:	e7f5      	b.n	800840c <_printf_i+0x230>
 8008420:	0800ccf0 	.word	0x0800ccf0
 8008424:	0800cd01 	.word	0x0800cd01

08008428 <_scanf_float>:
 8008428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800842c:	b087      	sub	sp, #28
 800842e:	9303      	str	r3, [sp, #12]
 8008430:	688b      	ldr	r3, [r1, #8]
 8008432:	4617      	mov	r7, r2
 8008434:	1e5a      	subs	r2, r3, #1
 8008436:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800843a:	bf85      	ittet	hi
 800843c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008440:	195b      	addhi	r3, r3, r5
 8008442:	2300      	movls	r3, #0
 8008444:	9302      	strhi	r3, [sp, #8]
 8008446:	bf88      	it	hi
 8008448:	f240 135d 	movwhi	r3, #349	; 0x15d
 800844c:	468b      	mov	fp, r1
 800844e:	f04f 0500 	mov.w	r5, #0
 8008452:	bf8c      	ite	hi
 8008454:	608b      	strhi	r3, [r1, #8]
 8008456:	9302      	strls	r3, [sp, #8]
 8008458:	680b      	ldr	r3, [r1, #0]
 800845a:	4680      	mov	r8, r0
 800845c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008460:	f84b 3b1c 	str.w	r3, [fp], #28
 8008464:	460c      	mov	r4, r1
 8008466:	465e      	mov	r6, fp
 8008468:	46aa      	mov	sl, r5
 800846a:	46a9      	mov	r9, r5
 800846c:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008470:	9501      	str	r5, [sp, #4]
 8008472:	68a2      	ldr	r2, [r4, #8]
 8008474:	b152      	cbz	r2, 800848c <_scanf_float+0x64>
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	781b      	ldrb	r3, [r3, #0]
 800847a:	2b4e      	cmp	r3, #78	; 0x4e
 800847c:	d864      	bhi.n	8008548 <_scanf_float+0x120>
 800847e:	2b40      	cmp	r3, #64	; 0x40
 8008480:	d83c      	bhi.n	80084fc <_scanf_float+0xd4>
 8008482:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008486:	b2c8      	uxtb	r0, r1
 8008488:	280e      	cmp	r0, #14
 800848a:	d93a      	bls.n	8008502 <_scanf_float+0xda>
 800848c:	f1b9 0f00 	cmp.w	r9, #0
 8008490:	d003      	beq.n	800849a <_scanf_float+0x72>
 8008492:	6823      	ldr	r3, [r4, #0]
 8008494:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008498:	6023      	str	r3, [r4, #0]
 800849a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800849e:	f1ba 0f01 	cmp.w	sl, #1
 80084a2:	f200 8113 	bhi.w	80086cc <_scanf_float+0x2a4>
 80084a6:	455e      	cmp	r6, fp
 80084a8:	f200 8105 	bhi.w	80086b6 <_scanf_float+0x28e>
 80084ac:	2501      	movs	r5, #1
 80084ae:	4628      	mov	r0, r5
 80084b0:	b007      	add	sp, #28
 80084b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084b6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80084ba:	2a0d      	cmp	r2, #13
 80084bc:	d8e6      	bhi.n	800848c <_scanf_float+0x64>
 80084be:	a101      	add	r1, pc, #4	; (adr r1, 80084c4 <_scanf_float+0x9c>)
 80084c0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80084c4:	08008603 	.word	0x08008603
 80084c8:	0800848d 	.word	0x0800848d
 80084cc:	0800848d 	.word	0x0800848d
 80084d0:	0800848d 	.word	0x0800848d
 80084d4:	08008663 	.word	0x08008663
 80084d8:	0800863b 	.word	0x0800863b
 80084dc:	0800848d 	.word	0x0800848d
 80084e0:	0800848d 	.word	0x0800848d
 80084e4:	08008611 	.word	0x08008611
 80084e8:	0800848d 	.word	0x0800848d
 80084ec:	0800848d 	.word	0x0800848d
 80084f0:	0800848d 	.word	0x0800848d
 80084f4:	0800848d 	.word	0x0800848d
 80084f8:	080085c9 	.word	0x080085c9
 80084fc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008500:	e7db      	b.n	80084ba <_scanf_float+0x92>
 8008502:	290e      	cmp	r1, #14
 8008504:	d8c2      	bhi.n	800848c <_scanf_float+0x64>
 8008506:	a001      	add	r0, pc, #4	; (adr r0, 800850c <_scanf_float+0xe4>)
 8008508:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800850c:	080085bb 	.word	0x080085bb
 8008510:	0800848d 	.word	0x0800848d
 8008514:	080085bb 	.word	0x080085bb
 8008518:	0800864f 	.word	0x0800864f
 800851c:	0800848d 	.word	0x0800848d
 8008520:	08008569 	.word	0x08008569
 8008524:	080085a5 	.word	0x080085a5
 8008528:	080085a5 	.word	0x080085a5
 800852c:	080085a5 	.word	0x080085a5
 8008530:	080085a5 	.word	0x080085a5
 8008534:	080085a5 	.word	0x080085a5
 8008538:	080085a5 	.word	0x080085a5
 800853c:	080085a5 	.word	0x080085a5
 8008540:	080085a5 	.word	0x080085a5
 8008544:	080085a5 	.word	0x080085a5
 8008548:	2b6e      	cmp	r3, #110	; 0x6e
 800854a:	d809      	bhi.n	8008560 <_scanf_float+0x138>
 800854c:	2b60      	cmp	r3, #96	; 0x60
 800854e:	d8b2      	bhi.n	80084b6 <_scanf_float+0x8e>
 8008550:	2b54      	cmp	r3, #84	; 0x54
 8008552:	d077      	beq.n	8008644 <_scanf_float+0x21c>
 8008554:	2b59      	cmp	r3, #89	; 0x59
 8008556:	d199      	bne.n	800848c <_scanf_float+0x64>
 8008558:	2d07      	cmp	r5, #7
 800855a:	d197      	bne.n	800848c <_scanf_float+0x64>
 800855c:	2508      	movs	r5, #8
 800855e:	e029      	b.n	80085b4 <_scanf_float+0x18c>
 8008560:	2b74      	cmp	r3, #116	; 0x74
 8008562:	d06f      	beq.n	8008644 <_scanf_float+0x21c>
 8008564:	2b79      	cmp	r3, #121	; 0x79
 8008566:	e7f6      	b.n	8008556 <_scanf_float+0x12e>
 8008568:	6821      	ldr	r1, [r4, #0]
 800856a:	05c8      	lsls	r0, r1, #23
 800856c:	d51a      	bpl.n	80085a4 <_scanf_float+0x17c>
 800856e:	9b02      	ldr	r3, [sp, #8]
 8008570:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008574:	6021      	str	r1, [r4, #0]
 8008576:	f109 0901 	add.w	r9, r9, #1
 800857a:	b11b      	cbz	r3, 8008584 <_scanf_float+0x15c>
 800857c:	3b01      	subs	r3, #1
 800857e:	3201      	adds	r2, #1
 8008580:	9302      	str	r3, [sp, #8]
 8008582:	60a2      	str	r2, [r4, #8]
 8008584:	68a3      	ldr	r3, [r4, #8]
 8008586:	3b01      	subs	r3, #1
 8008588:	60a3      	str	r3, [r4, #8]
 800858a:	6923      	ldr	r3, [r4, #16]
 800858c:	3301      	adds	r3, #1
 800858e:	6123      	str	r3, [r4, #16]
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	3b01      	subs	r3, #1
 8008594:	2b00      	cmp	r3, #0
 8008596:	607b      	str	r3, [r7, #4]
 8008598:	f340 8084 	ble.w	80086a4 <_scanf_float+0x27c>
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	3301      	adds	r3, #1
 80085a0:	603b      	str	r3, [r7, #0]
 80085a2:	e766      	b.n	8008472 <_scanf_float+0x4a>
 80085a4:	eb1a 0f05 	cmn.w	sl, r5
 80085a8:	f47f af70 	bne.w	800848c <_scanf_float+0x64>
 80085ac:	6822      	ldr	r2, [r4, #0]
 80085ae:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80085b2:	6022      	str	r2, [r4, #0]
 80085b4:	f806 3b01 	strb.w	r3, [r6], #1
 80085b8:	e7e4      	b.n	8008584 <_scanf_float+0x15c>
 80085ba:	6822      	ldr	r2, [r4, #0]
 80085bc:	0610      	lsls	r0, r2, #24
 80085be:	f57f af65 	bpl.w	800848c <_scanf_float+0x64>
 80085c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80085c6:	e7f4      	b.n	80085b2 <_scanf_float+0x18a>
 80085c8:	f1ba 0f00 	cmp.w	sl, #0
 80085cc:	d10e      	bne.n	80085ec <_scanf_float+0x1c4>
 80085ce:	f1b9 0f00 	cmp.w	r9, #0
 80085d2:	d10e      	bne.n	80085f2 <_scanf_float+0x1ca>
 80085d4:	6822      	ldr	r2, [r4, #0]
 80085d6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80085da:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80085de:	d108      	bne.n	80085f2 <_scanf_float+0x1ca>
 80085e0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80085e4:	f04f 0a01 	mov.w	sl, #1
 80085e8:	6022      	str	r2, [r4, #0]
 80085ea:	e7e3      	b.n	80085b4 <_scanf_float+0x18c>
 80085ec:	f1ba 0f02 	cmp.w	sl, #2
 80085f0:	d055      	beq.n	800869e <_scanf_float+0x276>
 80085f2:	2d01      	cmp	r5, #1
 80085f4:	d002      	beq.n	80085fc <_scanf_float+0x1d4>
 80085f6:	2d04      	cmp	r5, #4
 80085f8:	f47f af48 	bne.w	800848c <_scanf_float+0x64>
 80085fc:	3501      	adds	r5, #1
 80085fe:	b2ed      	uxtb	r5, r5
 8008600:	e7d8      	b.n	80085b4 <_scanf_float+0x18c>
 8008602:	f1ba 0f01 	cmp.w	sl, #1
 8008606:	f47f af41 	bne.w	800848c <_scanf_float+0x64>
 800860a:	f04f 0a02 	mov.w	sl, #2
 800860e:	e7d1      	b.n	80085b4 <_scanf_float+0x18c>
 8008610:	b97d      	cbnz	r5, 8008632 <_scanf_float+0x20a>
 8008612:	f1b9 0f00 	cmp.w	r9, #0
 8008616:	f47f af3c 	bne.w	8008492 <_scanf_float+0x6a>
 800861a:	6822      	ldr	r2, [r4, #0]
 800861c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008620:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008624:	f47f af39 	bne.w	800849a <_scanf_float+0x72>
 8008628:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800862c:	2501      	movs	r5, #1
 800862e:	6022      	str	r2, [r4, #0]
 8008630:	e7c0      	b.n	80085b4 <_scanf_float+0x18c>
 8008632:	2d03      	cmp	r5, #3
 8008634:	d0e2      	beq.n	80085fc <_scanf_float+0x1d4>
 8008636:	2d05      	cmp	r5, #5
 8008638:	e7de      	b.n	80085f8 <_scanf_float+0x1d0>
 800863a:	2d02      	cmp	r5, #2
 800863c:	f47f af26 	bne.w	800848c <_scanf_float+0x64>
 8008640:	2503      	movs	r5, #3
 8008642:	e7b7      	b.n	80085b4 <_scanf_float+0x18c>
 8008644:	2d06      	cmp	r5, #6
 8008646:	f47f af21 	bne.w	800848c <_scanf_float+0x64>
 800864a:	2507      	movs	r5, #7
 800864c:	e7b2      	b.n	80085b4 <_scanf_float+0x18c>
 800864e:	6822      	ldr	r2, [r4, #0]
 8008650:	0591      	lsls	r1, r2, #22
 8008652:	f57f af1b 	bpl.w	800848c <_scanf_float+0x64>
 8008656:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800865a:	6022      	str	r2, [r4, #0]
 800865c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008660:	e7a8      	b.n	80085b4 <_scanf_float+0x18c>
 8008662:	6822      	ldr	r2, [r4, #0]
 8008664:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008668:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800866c:	d006      	beq.n	800867c <_scanf_float+0x254>
 800866e:	0550      	lsls	r0, r2, #21
 8008670:	f57f af0c 	bpl.w	800848c <_scanf_float+0x64>
 8008674:	f1b9 0f00 	cmp.w	r9, #0
 8008678:	f43f af0f 	beq.w	800849a <_scanf_float+0x72>
 800867c:	0591      	lsls	r1, r2, #22
 800867e:	bf58      	it	pl
 8008680:	9901      	ldrpl	r1, [sp, #4]
 8008682:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008686:	bf58      	it	pl
 8008688:	eba9 0101 	subpl.w	r1, r9, r1
 800868c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008690:	f04f 0900 	mov.w	r9, #0
 8008694:	bf58      	it	pl
 8008696:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800869a:	6022      	str	r2, [r4, #0]
 800869c:	e78a      	b.n	80085b4 <_scanf_float+0x18c>
 800869e:	f04f 0a03 	mov.w	sl, #3
 80086a2:	e787      	b.n	80085b4 <_scanf_float+0x18c>
 80086a4:	4639      	mov	r1, r7
 80086a6:	4640      	mov	r0, r8
 80086a8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80086ac:	4798      	blx	r3
 80086ae:	2800      	cmp	r0, #0
 80086b0:	f43f aedf 	beq.w	8008472 <_scanf_float+0x4a>
 80086b4:	e6ea      	b.n	800848c <_scanf_float+0x64>
 80086b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80086ba:	463a      	mov	r2, r7
 80086bc:	4640      	mov	r0, r8
 80086be:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80086c2:	4798      	blx	r3
 80086c4:	6923      	ldr	r3, [r4, #16]
 80086c6:	3b01      	subs	r3, #1
 80086c8:	6123      	str	r3, [r4, #16]
 80086ca:	e6ec      	b.n	80084a6 <_scanf_float+0x7e>
 80086cc:	1e6b      	subs	r3, r5, #1
 80086ce:	2b06      	cmp	r3, #6
 80086d0:	d825      	bhi.n	800871e <_scanf_float+0x2f6>
 80086d2:	2d02      	cmp	r5, #2
 80086d4:	d836      	bhi.n	8008744 <_scanf_float+0x31c>
 80086d6:	455e      	cmp	r6, fp
 80086d8:	f67f aee8 	bls.w	80084ac <_scanf_float+0x84>
 80086dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80086e0:	463a      	mov	r2, r7
 80086e2:	4640      	mov	r0, r8
 80086e4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80086e8:	4798      	blx	r3
 80086ea:	6923      	ldr	r3, [r4, #16]
 80086ec:	3b01      	subs	r3, #1
 80086ee:	6123      	str	r3, [r4, #16]
 80086f0:	e7f1      	b.n	80086d6 <_scanf_float+0x2ae>
 80086f2:	9802      	ldr	r0, [sp, #8]
 80086f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80086f8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80086fc:	463a      	mov	r2, r7
 80086fe:	9002      	str	r0, [sp, #8]
 8008700:	4640      	mov	r0, r8
 8008702:	4798      	blx	r3
 8008704:	6923      	ldr	r3, [r4, #16]
 8008706:	3b01      	subs	r3, #1
 8008708:	6123      	str	r3, [r4, #16]
 800870a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800870e:	fa5f fa8a 	uxtb.w	sl, sl
 8008712:	f1ba 0f02 	cmp.w	sl, #2
 8008716:	d1ec      	bne.n	80086f2 <_scanf_float+0x2ca>
 8008718:	3d03      	subs	r5, #3
 800871a:	b2ed      	uxtb	r5, r5
 800871c:	1b76      	subs	r6, r6, r5
 800871e:	6823      	ldr	r3, [r4, #0]
 8008720:	05da      	lsls	r2, r3, #23
 8008722:	d52f      	bpl.n	8008784 <_scanf_float+0x35c>
 8008724:	055b      	lsls	r3, r3, #21
 8008726:	d510      	bpl.n	800874a <_scanf_float+0x322>
 8008728:	455e      	cmp	r6, fp
 800872a:	f67f aebf 	bls.w	80084ac <_scanf_float+0x84>
 800872e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008732:	463a      	mov	r2, r7
 8008734:	4640      	mov	r0, r8
 8008736:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800873a:	4798      	blx	r3
 800873c:	6923      	ldr	r3, [r4, #16]
 800873e:	3b01      	subs	r3, #1
 8008740:	6123      	str	r3, [r4, #16]
 8008742:	e7f1      	b.n	8008728 <_scanf_float+0x300>
 8008744:	46aa      	mov	sl, r5
 8008746:	9602      	str	r6, [sp, #8]
 8008748:	e7df      	b.n	800870a <_scanf_float+0x2e2>
 800874a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800874e:	6923      	ldr	r3, [r4, #16]
 8008750:	2965      	cmp	r1, #101	; 0x65
 8008752:	f103 33ff 	add.w	r3, r3, #4294967295
 8008756:	f106 35ff 	add.w	r5, r6, #4294967295
 800875a:	6123      	str	r3, [r4, #16]
 800875c:	d00c      	beq.n	8008778 <_scanf_float+0x350>
 800875e:	2945      	cmp	r1, #69	; 0x45
 8008760:	d00a      	beq.n	8008778 <_scanf_float+0x350>
 8008762:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008766:	463a      	mov	r2, r7
 8008768:	4640      	mov	r0, r8
 800876a:	4798      	blx	r3
 800876c:	6923      	ldr	r3, [r4, #16]
 800876e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008772:	3b01      	subs	r3, #1
 8008774:	1eb5      	subs	r5, r6, #2
 8008776:	6123      	str	r3, [r4, #16]
 8008778:	463a      	mov	r2, r7
 800877a:	4640      	mov	r0, r8
 800877c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008780:	4798      	blx	r3
 8008782:	462e      	mov	r6, r5
 8008784:	6825      	ldr	r5, [r4, #0]
 8008786:	f015 0510 	ands.w	r5, r5, #16
 800878a:	d155      	bne.n	8008838 <_scanf_float+0x410>
 800878c:	7035      	strb	r5, [r6, #0]
 800878e:	6823      	ldr	r3, [r4, #0]
 8008790:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008794:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008798:	d11b      	bne.n	80087d2 <_scanf_float+0x3aa>
 800879a:	9b01      	ldr	r3, [sp, #4]
 800879c:	454b      	cmp	r3, r9
 800879e:	eba3 0209 	sub.w	r2, r3, r9
 80087a2:	d123      	bne.n	80087ec <_scanf_float+0x3c4>
 80087a4:	2200      	movs	r2, #0
 80087a6:	4659      	mov	r1, fp
 80087a8:	4640      	mov	r0, r8
 80087aa:	f000 fee9 	bl	8009580 <_strtod_r>
 80087ae:	6822      	ldr	r2, [r4, #0]
 80087b0:	9b03      	ldr	r3, [sp, #12]
 80087b2:	f012 0f02 	tst.w	r2, #2
 80087b6:	4606      	mov	r6, r0
 80087b8:	460f      	mov	r7, r1
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	d021      	beq.n	8008802 <_scanf_float+0x3da>
 80087be:	1d1a      	adds	r2, r3, #4
 80087c0:	9903      	ldr	r1, [sp, #12]
 80087c2:	600a      	str	r2, [r1, #0]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	e9c3 6700 	strd	r6, r7, [r3]
 80087ca:	68e3      	ldr	r3, [r4, #12]
 80087cc:	3301      	adds	r3, #1
 80087ce:	60e3      	str	r3, [r4, #12]
 80087d0:	e66d      	b.n	80084ae <_scanf_float+0x86>
 80087d2:	9b04      	ldr	r3, [sp, #16]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d0e5      	beq.n	80087a4 <_scanf_float+0x37c>
 80087d8:	9905      	ldr	r1, [sp, #20]
 80087da:	230a      	movs	r3, #10
 80087dc:	462a      	mov	r2, r5
 80087de:	4640      	mov	r0, r8
 80087e0:	3101      	adds	r1, #1
 80087e2:	f000 ff4f 	bl	8009684 <_strtol_r>
 80087e6:	9b04      	ldr	r3, [sp, #16]
 80087e8:	9e05      	ldr	r6, [sp, #20]
 80087ea:	1ac2      	subs	r2, r0, r3
 80087ec:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80087f0:	429e      	cmp	r6, r3
 80087f2:	bf28      	it	cs
 80087f4:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80087f8:	4630      	mov	r0, r6
 80087fa:	4910      	ldr	r1, [pc, #64]	; (800883c <_scanf_float+0x414>)
 80087fc:	f000 f826 	bl	800884c <siprintf>
 8008800:	e7d0      	b.n	80087a4 <_scanf_float+0x37c>
 8008802:	f012 0f04 	tst.w	r2, #4
 8008806:	f103 0204 	add.w	r2, r3, #4
 800880a:	d1d9      	bne.n	80087c0 <_scanf_float+0x398>
 800880c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8008810:	f8cc 2000 	str.w	r2, [ip]
 8008814:	f8d3 8000 	ldr.w	r8, [r3]
 8008818:	4602      	mov	r2, r0
 800881a:	460b      	mov	r3, r1
 800881c:	f7f8 fa16 	bl	8000c4c <__aeabi_dcmpun>
 8008820:	b128      	cbz	r0, 800882e <_scanf_float+0x406>
 8008822:	4807      	ldr	r0, [pc, #28]	; (8008840 <_scanf_float+0x418>)
 8008824:	f000 f80e 	bl	8008844 <nanf>
 8008828:	f8c8 0000 	str.w	r0, [r8]
 800882c:	e7cd      	b.n	80087ca <_scanf_float+0x3a2>
 800882e:	4630      	mov	r0, r6
 8008830:	4639      	mov	r1, r7
 8008832:	f7f8 fa69 	bl	8000d08 <__aeabi_d2f>
 8008836:	e7f7      	b.n	8008828 <_scanf_float+0x400>
 8008838:	2500      	movs	r5, #0
 800883a:	e638      	b.n	80084ae <_scanf_float+0x86>
 800883c:	0800cd12 	.word	0x0800cd12
 8008840:	0800d133 	.word	0x0800d133

08008844 <nanf>:
 8008844:	4800      	ldr	r0, [pc, #0]	; (8008848 <nanf+0x4>)
 8008846:	4770      	bx	lr
 8008848:	7fc00000 	.word	0x7fc00000

0800884c <siprintf>:
 800884c:	b40e      	push	{r1, r2, r3}
 800884e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008852:	b500      	push	{lr}
 8008854:	b09c      	sub	sp, #112	; 0x70
 8008856:	ab1d      	add	r3, sp, #116	; 0x74
 8008858:	9002      	str	r0, [sp, #8]
 800885a:	9006      	str	r0, [sp, #24]
 800885c:	9107      	str	r1, [sp, #28]
 800885e:	9104      	str	r1, [sp, #16]
 8008860:	4808      	ldr	r0, [pc, #32]	; (8008884 <siprintf+0x38>)
 8008862:	4909      	ldr	r1, [pc, #36]	; (8008888 <siprintf+0x3c>)
 8008864:	f853 2b04 	ldr.w	r2, [r3], #4
 8008868:	9105      	str	r1, [sp, #20]
 800886a:	6800      	ldr	r0, [r0, #0]
 800886c:	a902      	add	r1, sp, #8
 800886e:	9301      	str	r3, [sp, #4]
 8008870:	f002 ff50 	bl	800b714 <_svfiprintf_r>
 8008874:	2200      	movs	r2, #0
 8008876:	9b02      	ldr	r3, [sp, #8]
 8008878:	701a      	strb	r2, [r3, #0]
 800887a:	b01c      	add	sp, #112	; 0x70
 800887c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008880:	b003      	add	sp, #12
 8008882:	4770      	bx	lr
 8008884:	20000010 	.word	0x20000010
 8008888:	ffff0208 	.word	0xffff0208

0800888c <siscanf>:
 800888c:	b40e      	push	{r1, r2, r3}
 800888e:	f44f 7201 	mov.w	r2, #516	; 0x204
 8008892:	b530      	push	{r4, r5, lr}
 8008894:	b09c      	sub	sp, #112	; 0x70
 8008896:	ac1f      	add	r4, sp, #124	; 0x7c
 8008898:	f854 5b04 	ldr.w	r5, [r4], #4
 800889c:	f8ad 2014 	strh.w	r2, [sp, #20]
 80088a0:	9002      	str	r0, [sp, #8]
 80088a2:	9006      	str	r0, [sp, #24]
 80088a4:	f7f7 fcc0 	bl	8000228 <strlen>
 80088a8:	4b0b      	ldr	r3, [pc, #44]	; (80088d8 <siscanf+0x4c>)
 80088aa:	9003      	str	r0, [sp, #12]
 80088ac:	930b      	str	r3, [sp, #44]	; 0x2c
 80088ae:	2300      	movs	r3, #0
 80088b0:	930f      	str	r3, [sp, #60]	; 0x3c
 80088b2:	9314      	str	r3, [sp, #80]	; 0x50
 80088b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80088b8:	9007      	str	r0, [sp, #28]
 80088ba:	4808      	ldr	r0, [pc, #32]	; (80088dc <siscanf+0x50>)
 80088bc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80088c0:	462a      	mov	r2, r5
 80088c2:	4623      	mov	r3, r4
 80088c4:	a902      	add	r1, sp, #8
 80088c6:	6800      	ldr	r0, [r0, #0]
 80088c8:	9401      	str	r4, [sp, #4]
 80088ca:	f003 f87d 	bl	800b9c8 <__ssvfiscanf_r>
 80088ce:	b01c      	add	sp, #112	; 0x70
 80088d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80088d4:	b003      	add	sp, #12
 80088d6:	4770      	bx	lr
 80088d8:	08008903 	.word	0x08008903
 80088dc:	20000010 	.word	0x20000010

080088e0 <__sread>:
 80088e0:	b510      	push	{r4, lr}
 80088e2:	460c      	mov	r4, r1
 80088e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088e8:	f003 fb3a 	bl	800bf60 <_read_r>
 80088ec:	2800      	cmp	r0, #0
 80088ee:	bfab      	itete	ge
 80088f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80088f2:	89a3      	ldrhlt	r3, [r4, #12]
 80088f4:	181b      	addge	r3, r3, r0
 80088f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80088fa:	bfac      	ite	ge
 80088fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80088fe:	81a3      	strhlt	r3, [r4, #12]
 8008900:	bd10      	pop	{r4, pc}

08008902 <__seofread>:
 8008902:	2000      	movs	r0, #0
 8008904:	4770      	bx	lr

08008906 <__swrite>:
 8008906:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800890a:	461f      	mov	r7, r3
 800890c:	898b      	ldrh	r3, [r1, #12]
 800890e:	4605      	mov	r5, r0
 8008910:	05db      	lsls	r3, r3, #23
 8008912:	460c      	mov	r4, r1
 8008914:	4616      	mov	r6, r2
 8008916:	d505      	bpl.n	8008924 <__swrite+0x1e>
 8008918:	2302      	movs	r3, #2
 800891a:	2200      	movs	r2, #0
 800891c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008920:	f002 f8ba 	bl	800aa98 <_lseek_r>
 8008924:	89a3      	ldrh	r3, [r4, #12]
 8008926:	4632      	mov	r2, r6
 8008928:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800892c:	81a3      	strh	r3, [r4, #12]
 800892e:	4628      	mov	r0, r5
 8008930:	463b      	mov	r3, r7
 8008932:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008936:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800893a:	f000 bea5 	b.w	8009688 <_write_r>

0800893e <__sseek>:
 800893e:	b510      	push	{r4, lr}
 8008940:	460c      	mov	r4, r1
 8008942:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008946:	f002 f8a7 	bl	800aa98 <_lseek_r>
 800894a:	1c43      	adds	r3, r0, #1
 800894c:	89a3      	ldrh	r3, [r4, #12]
 800894e:	bf15      	itete	ne
 8008950:	6560      	strne	r0, [r4, #84]	; 0x54
 8008952:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008956:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800895a:	81a3      	strheq	r3, [r4, #12]
 800895c:	bf18      	it	ne
 800895e:	81a3      	strhne	r3, [r4, #12]
 8008960:	bd10      	pop	{r4, pc}

08008962 <__sclose>:
 8008962:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008966:	f000 bea1 	b.w	80096ac <_close_r>

0800896a <sulp>:
 800896a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800896e:	460f      	mov	r7, r1
 8008970:	4690      	mov	r8, r2
 8008972:	f002 fc3b 	bl	800b1ec <__ulp>
 8008976:	4604      	mov	r4, r0
 8008978:	460d      	mov	r5, r1
 800897a:	f1b8 0f00 	cmp.w	r8, #0
 800897e:	d011      	beq.n	80089a4 <sulp+0x3a>
 8008980:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8008984:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008988:	2b00      	cmp	r3, #0
 800898a:	dd0b      	ble.n	80089a4 <sulp+0x3a>
 800898c:	2400      	movs	r4, #0
 800898e:	051b      	lsls	r3, r3, #20
 8008990:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008994:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008998:	4622      	mov	r2, r4
 800899a:	462b      	mov	r3, r5
 800899c:	f7f7 febc 	bl	8000718 <__aeabi_dmul>
 80089a0:	4604      	mov	r4, r0
 80089a2:	460d      	mov	r5, r1
 80089a4:	4620      	mov	r0, r4
 80089a6:	4629      	mov	r1, r5
 80089a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089ac:	0000      	movs	r0, r0
	...

080089b0 <_strtod_l>:
 80089b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089b4:	469b      	mov	fp, r3
 80089b6:	2300      	movs	r3, #0
 80089b8:	b09f      	sub	sp, #124	; 0x7c
 80089ba:	931a      	str	r3, [sp, #104]	; 0x68
 80089bc:	4b9e      	ldr	r3, [pc, #632]	; (8008c38 <_strtod_l+0x288>)
 80089be:	4682      	mov	sl, r0
 80089c0:	681f      	ldr	r7, [r3, #0]
 80089c2:	460e      	mov	r6, r1
 80089c4:	4638      	mov	r0, r7
 80089c6:	9215      	str	r2, [sp, #84]	; 0x54
 80089c8:	f7f7 fc2e 	bl	8000228 <strlen>
 80089cc:	f04f 0800 	mov.w	r8, #0
 80089d0:	4604      	mov	r4, r0
 80089d2:	f04f 0900 	mov.w	r9, #0
 80089d6:	9619      	str	r6, [sp, #100]	; 0x64
 80089d8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80089da:	781a      	ldrb	r2, [r3, #0]
 80089dc:	2a2b      	cmp	r2, #43	; 0x2b
 80089de:	d04c      	beq.n	8008a7a <_strtod_l+0xca>
 80089e0:	d83a      	bhi.n	8008a58 <_strtod_l+0xa8>
 80089e2:	2a0d      	cmp	r2, #13
 80089e4:	d833      	bhi.n	8008a4e <_strtod_l+0x9e>
 80089e6:	2a08      	cmp	r2, #8
 80089e8:	d833      	bhi.n	8008a52 <_strtod_l+0xa2>
 80089ea:	2a00      	cmp	r2, #0
 80089ec:	d03d      	beq.n	8008a6a <_strtod_l+0xba>
 80089ee:	2300      	movs	r3, #0
 80089f0:	930a      	str	r3, [sp, #40]	; 0x28
 80089f2:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80089f4:	782b      	ldrb	r3, [r5, #0]
 80089f6:	2b30      	cmp	r3, #48	; 0x30
 80089f8:	f040 80aa 	bne.w	8008b50 <_strtod_l+0x1a0>
 80089fc:	786b      	ldrb	r3, [r5, #1]
 80089fe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008a02:	2b58      	cmp	r3, #88	; 0x58
 8008a04:	d166      	bne.n	8008ad4 <_strtod_l+0x124>
 8008a06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a08:	4650      	mov	r0, sl
 8008a0a:	9301      	str	r3, [sp, #4]
 8008a0c:	ab1a      	add	r3, sp, #104	; 0x68
 8008a0e:	9300      	str	r3, [sp, #0]
 8008a10:	4a8a      	ldr	r2, [pc, #552]	; (8008c3c <_strtod_l+0x28c>)
 8008a12:	f8cd b008 	str.w	fp, [sp, #8]
 8008a16:	ab1b      	add	r3, sp, #108	; 0x6c
 8008a18:	a919      	add	r1, sp, #100	; 0x64
 8008a1a:	f001 fd3b 	bl	800a494 <__gethex>
 8008a1e:	f010 0607 	ands.w	r6, r0, #7
 8008a22:	4604      	mov	r4, r0
 8008a24:	d005      	beq.n	8008a32 <_strtod_l+0x82>
 8008a26:	2e06      	cmp	r6, #6
 8008a28:	d129      	bne.n	8008a7e <_strtod_l+0xce>
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	3501      	adds	r5, #1
 8008a2e:	9519      	str	r5, [sp, #100]	; 0x64
 8008a30:	930a      	str	r3, [sp, #40]	; 0x28
 8008a32:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	f040 858a 	bne.w	800954e <_strtod_l+0xb9e>
 8008a3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a3c:	b1d3      	cbz	r3, 8008a74 <_strtod_l+0xc4>
 8008a3e:	4642      	mov	r2, r8
 8008a40:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008a44:	4610      	mov	r0, r2
 8008a46:	4619      	mov	r1, r3
 8008a48:	b01f      	add	sp, #124	; 0x7c
 8008a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a4e:	2a20      	cmp	r2, #32
 8008a50:	d1cd      	bne.n	80089ee <_strtod_l+0x3e>
 8008a52:	3301      	adds	r3, #1
 8008a54:	9319      	str	r3, [sp, #100]	; 0x64
 8008a56:	e7bf      	b.n	80089d8 <_strtod_l+0x28>
 8008a58:	2a2d      	cmp	r2, #45	; 0x2d
 8008a5a:	d1c8      	bne.n	80089ee <_strtod_l+0x3e>
 8008a5c:	2201      	movs	r2, #1
 8008a5e:	920a      	str	r2, [sp, #40]	; 0x28
 8008a60:	1c5a      	adds	r2, r3, #1
 8008a62:	9219      	str	r2, [sp, #100]	; 0x64
 8008a64:	785b      	ldrb	r3, [r3, #1]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d1c3      	bne.n	80089f2 <_strtod_l+0x42>
 8008a6a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008a6c:	9619      	str	r6, [sp, #100]	; 0x64
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	f040 856b 	bne.w	800954a <_strtod_l+0xb9a>
 8008a74:	4642      	mov	r2, r8
 8008a76:	464b      	mov	r3, r9
 8008a78:	e7e4      	b.n	8008a44 <_strtod_l+0x94>
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	e7ef      	b.n	8008a5e <_strtod_l+0xae>
 8008a7e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008a80:	b13a      	cbz	r2, 8008a92 <_strtod_l+0xe2>
 8008a82:	2135      	movs	r1, #53	; 0x35
 8008a84:	a81c      	add	r0, sp, #112	; 0x70
 8008a86:	f002 fcb5 	bl	800b3f4 <__copybits>
 8008a8a:	4650      	mov	r0, sl
 8008a8c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008a8e:	f002 f87d 	bl	800ab8c <_Bfree>
 8008a92:	3e01      	subs	r6, #1
 8008a94:	2e04      	cmp	r6, #4
 8008a96:	d806      	bhi.n	8008aa6 <_strtod_l+0xf6>
 8008a98:	e8df f006 	tbb	[pc, r6]
 8008a9c:	1714030a 	.word	0x1714030a
 8008aa0:	0a          	.byte	0x0a
 8008aa1:	00          	.byte	0x00
 8008aa2:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8008aa6:	0721      	lsls	r1, r4, #28
 8008aa8:	d5c3      	bpl.n	8008a32 <_strtod_l+0x82>
 8008aaa:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8008aae:	e7c0      	b.n	8008a32 <_strtod_l+0x82>
 8008ab0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008ab2:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8008ab6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008aba:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008abe:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8008ac2:	e7f0      	b.n	8008aa6 <_strtod_l+0xf6>
 8008ac4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008c40 <_strtod_l+0x290>
 8008ac8:	e7ed      	b.n	8008aa6 <_strtod_l+0xf6>
 8008aca:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008ace:	f04f 38ff 	mov.w	r8, #4294967295
 8008ad2:	e7e8      	b.n	8008aa6 <_strtod_l+0xf6>
 8008ad4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008ad6:	1c5a      	adds	r2, r3, #1
 8008ad8:	9219      	str	r2, [sp, #100]	; 0x64
 8008ada:	785b      	ldrb	r3, [r3, #1]
 8008adc:	2b30      	cmp	r3, #48	; 0x30
 8008ade:	d0f9      	beq.n	8008ad4 <_strtod_l+0x124>
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d0a6      	beq.n	8008a32 <_strtod_l+0x82>
 8008ae4:	2301      	movs	r3, #1
 8008ae6:	9307      	str	r3, [sp, #28]
 8008ae8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008aea:	220a      	movs	r2, #10
 8008aec:	9308      	str	r3, [sp, #32]
 8008aee:	2300      	movs	r3, #0
 8008af0:	469b      	mov	fp, r3
 8008af2:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8008af6:	9819      	ldr	r0, [sp, #100]	; 0x64
 8008af8:	7805      	ldrb	r5, [r0, #0]
 8008afa:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8008afe:	b2d9      	uxtb	r1, r3
 8008b00:	2909      	cmp	r1, #9
 8008b02:	d927      	bls.n	8008b54 <_strtod_l+0x1a4>
 8008b04:	4622      	mov	r2, r4
 8008b06:	4639      	mov	r1, r7
 8008b08:	f003 fa8a 	bl	800c020 <strncmp>
 8008b0c:	2800      	cmp	r0, #0
 8008b0e:	d033      	beq.n	8008b78 <_strtod_l+0x1c8>
 8008b10:	2000      	movs	r0, #0
 8008b12:	462a      	mov	r2, r5
 8008b14:	465c      	mov	r4, fp
 8008b16:	4603      	mov	r3, r0
 8008b18:	9004      	str	r0, [sp, #16]
 8008b1a:	2a65      	cmp	r2, #101	; 0x65
 8008b1c:	d001      	beq.n	8008b22 <_strtod_l+0x172>
 8008b1e:	2a45      	cmp	r2, #69	; 0x45
 8008b20:	d114      	bne.n	8008b4c <_strtod_l+0x19c>
 8008b22:	b91c      	cbnz	r4, 8008b2c <_strtod_l+0x17c>
 8008b24:	9a07      	ldr	r2, [sp, #28]
 8008b26:	4302      	orrs	r2, r0
 8008b28:	d09f      	beq.n	8008a6a <_strtod_l+0xba>
 8008b2a:	2400      	movs	r4, #0
 8008b2c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8008b2e:	1c72      	adds	r2, r6, #1
 8008b30:	9219      	str	r2, [sp, #100]	; 0x64
 8008b32:	7872      	ldrb	r2, [r6, #1]
 8008b34:	2a2b      	cmp	r2, #43	; 0x2b
 8008b36:	d079      	beq.n	8008c2c <_strtod_l+0x27c>
 8008b38:	2a2d      	cmp	r2, #45	; 0x2d
 8008b3a:	f000 8083 	beq.w	8008c44 <_strtod_l+0x294>
 8008b3e:	2700      	movs	r7, #0
 8008b40:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008b44:	2909      	cmp	r1, #9
 8008b46:	f240 8083 	bls.w	8008c50 <_strtod_l+0x2a0>
 8008b4a:	9619      	str	r6, [sp, #100]	; 0x64
 8008b4c:	2500      	movs	r5, #0
 8008b4e:	e09f      	b.n	8008c90 <_strtod_l+0x2e0>
 8008b50:	2300      	movs	r3, #0
 8008b52:	e7c8      	b.n	8008ae6 <_strtod_l+0x136>
 8008b54:	f1bb 0f08 	cmp.w	fp, #8
 8008b58:	bfd5      	itete	le
 8008b5a:	9906      	ldrle	r1, [sp, #24]
 8008b5c:	9905      	ldrgt	r1, [sp, #20]
 8008b5e:	fb02 3301 	mlale	r3, r2, r1, r3
 8008b62:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008b66:	f100 0001 	add.w	r0, r0, #1
 8008b6a:	bfd4      	ite	le
 8008b6c:	9306      	strle	r3, [sp, #24]
 8008b6e:	9305      	strgt	r3, [sp, #20]
 8008b70:	f10b 0b01 	add.w	fp, fp, #1
 8008b74:	9019      	str	r0, [sp, #100]	; 0x64
 8008b76:	e7be      	b.n	8008af6 <_strtod_l+0x146>
 8008b78:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008b7a:	191a      	adds	r2, r3, r4
 8008b7c:	9219      	str	r2, [sp, #100]	; 0x64
 8008b7e:	5d1a      	ldrb	r2, [r3, r4]
 8008b80:	f1bb 0f00 	cmp.w	fp, #0
 8008b84:	d036      	beq.n	8008bf4 <_strtod_l+0x244>
 8008b86:	465c      	mov	r4, fp
 8008b88:	9004      	str	r0, [sp, #16]
 8008b8a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008b8e:	2b09      	cmp	r3, #9
 8008b90:	d912      	bls.n	8008bb8 <_strtod_l+0x208>
 8008b92:	2301      	movs	r3, #1
 8008b94:	e7c1      	b.n	8008b1a <_strtod_l+0x16a>
 8008b96:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008b98:	3001      	adds	r0, #1
 8008b9a:	1c5a      	adds	r2, r3, #1
 8008b9c:	9219      	str	r2, [sp, #100]	; 0x64
 8008b9e:	785a      	ldrb	r2, [r3, #1]
 8008ba0:	2a30      	cmp	r2, #48	; 0x30
 8008ba2:	d0f8      	beq.n	8008b96 <_strtod_l+0x1e6>
 8008ba4:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008ba8:	2b08      	cmp	r3, #8
 8008baa:	f200 84d5 	bhi.w	8009558 <_strtod_l+0xba8>
 8008bae:	9004      	str	r0, [sp, #16]
 8008bb0:	2000      	movs	r0, #0
 8008bb2:	4604      	mov	r4, r0
 8008bb4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008bb6:	9308      	str	r3, [sp, #32]
 8008bb8:	3a30      	subs	r2, #48	; 0x30
 8008bba:	f100 0301 	add.w	r3, r0, #1
 8008bbe:	d013      	beq.n	8008be8 <_strtod_l+0x238>
 8008bc0:	9904      	ldr	r1, [sp, #16]
 8008bc2:	1905      	adds	r5, r0, r4
 8008bc4:	4419      	add	r1, r3
 8008bc6:	9104      	str	r1, [sp, #16]
 8008bc8:	4623      	mov	r3, r4
 8008bca:	210a      	movs	r1, #10
 8008bcc:	42ab      	cmp	r3, r5
 8008bce:	d113      	bne.n	8008bf8 <_strtod_l+0x248>
 8008bd0:	1823      	adds	r3, r4, r0
 8008bd2:	2b08      	cmp	r3, #8
 8008bd4:	f104 0401 	add.w	r4, r4, #1
 8008bd8:	4404      	add	r4, r0
 8008bda:	dc1b      	bgt.n	8008c14 <_strtod_l+0x264>
 8008bdc:	230a      	movs	r3, #10
 8008bde:	9906      	ldr	r1, [sp, #24]
 8008be0:	fb03 2301 	mla	r3, r3, r1, r2
 8008be4:	9306      	str	r3, [sp, #24]
 8008be6:	2300      	movs	r3, #0
 8008be8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008bea:	4618      	mov	r0, r3
 8008bec:	1c51      	adds	r1, r2, #1
 8008bee:	9119      	str	r1, [sp, #100]	; 0x64
 8008bf0:	7852      	ldrb	r2, [r2, #1]
 8008bf2:	e7ca      	b.n	8008b8a <_strtod_l+0x1da>
 8008bf4:	4658      	mov	r0, fp
 8008bf6:	e7d3      	b.n	8008ba0 <_strtod_l+0x1f0>
 8008bf8:	2b08      	cmp	r3, #8
 8008bfa:	dc04      	bgt.n	8008c06 <_strtod_l+0x256>
 8008bfc:	9f06      	ldr	r7, [sp, #24]
 8008bfe:	434f      	muls	r7, r1
 8008c00:	9706      	str	r7, [sp, #24]
 8008c02:	3301      	adds	r3, #1
 8008c04:	e7e2      	b.n	8008bcc <_strtod_l+0x21c>
 8008c06:	1c5f      	adds	r7, r3, #1
 8008c08:	2f10      	cmp	r7, #16
 8008c0a:	bfde      	ittt	le
 8008c0c:	9f05      	ldrle	r7, [sp, #20]
 8008c0e:	434f      	mulle	r7, r1
 8008c10:	9705      	strle	r7, [sp, #20]
 8008c12:	e7f6      	b.n	8008c02 <_strtod_l+0x252>
 8008c14:	2c10      	cmp	r4, #16
 8008c16:	bfdf      	itttt	le
 8008c18:	230a      	movle	r3, #10
 8008c1a:	9905      	ldrle	r1, [sp, #20]
 8008c1c:	fb03 2301 	mlale	r3, r3, r1, r2
 8008c20:	9305      	strle	r3, [sp, #20]
 8008c22:	e7e0      	b.n	8008be6 <_strtod_l+0x236>
 8008c24:	2300      	movs	r3, #0
 8008c26:	9304      	str	r3, [sp, #16]
 8008c28:	2301      	movs	r3, #1
 8008c2a:	e77b      	b.n	8008b24 <_strtod_l+0x174>
 8008c2c:	2700      	movs	r7, #0
 8008c2e:	1cb2      	adds	r2, r6, #2
 8008c30:	9219      	str	r2, [sp, #100]	; 0x64
 8008c32:	78b2      	ldrb	r2, [r6, #2]
 8008c34:	e784      	b.n	8008b40 <_strtod_l+0x190>
 8008c36:	bf00      	nop
 8008c38:	0800cf60 	.word	0x0800cf60
 8008c3c:	0800cd18 	.word	0x0800cd18
 8008c40:	7ff00000 	.word	0x7ff00000
 8008c44:	2701      	movs	r7, #1
 8008c46:	e7f2      	b.n	8008c2e <_strtod_l+0x27e>
 8008c48:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008c4a:	1c51      	adds	r1, r2, #1
 8008c4c:	9119      	str	r1, [sp, #100]	; 0x64
 8008c4e:	7852      	ldrb	r2, [r2, #1]
 8008c50:	2a30      	cmp	r2, #48	; 0x30
 8008c52:	d0f9      	beq.n	8008c48 <_strtod_l+0x298>
 8008c54:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008c58:	2908      	cmp	r1, #8
 8008c5a:	f63f af77 	bhi.w	8008b4c <_strtod_l+0x19c>
 8008c5e:	f04f 0e0a 	mov.w	lr, #10
 8008c62:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8008c66:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008c68:	9209      	str	r2, [sp, #36]	; 0x24
 8008c6a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008c6c:	1c51      	adds	r1, r2, #1
 8008c6e:	9119      	str	r1, [sp, #100]	; 0x64
 8008c70:	7852      	ldrb	r2, [r2, #1]
 8008c72:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8008c76:	2d09      	cmp	r5, #9
 8008c78:	d935      	bls.n	8008ce6 <_strtod_l+0x336>
 8008c7a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008c7c:	1b49      	subs	r1, r1, r5
 8008c7e:	2908      	cmp	r1, #8
 8008c80:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8008c84:	dc02      	bgt.n	8008c8c <_strtod_l+0x2dc>
 8008c86:	4565      	cmp	r5, ip
 8008c88:	bfa8      	it	ge
 8008c8a:	4665      	movge	r5, ip
 8008c8c:	b107      	cbz	r7, 8008c90 <_strtod_l+0x2e0>
 8008c8e:	426d      	negs	r5, r5
 8008c90:	2c00      	cmp	r4, #0
 8008c92:	d14c      	bne.n	8008d2e <_strtod_l+0x37e>
 8008c94:	9907      	ldr	r1, [sp, #28]
 8008c96:	4301      	orrs	r1, r0
 8008c98:	f47f aecb 	bne.w	8008a32 <_strtod_l+0x82>
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	f47f aee4 	bne.w	8008a6a <_strtod_l+0xba>
 8008ca2:	2a69      	cmp	r2, #105	; 0x69
 8008ca4:	d026      	beq.n	8008cf4 <_strtod_l+0x344>
 8008ca6:	dc23      	bgt.n	8008cf0 <_strtod_l+0x340>
 8008ca8:	2a49      	cmp	r2, #73	; 0x49
 8008caa:	d023      	beq.n	8008cf4 <_strtod_l+0x344>
 8008cac:	2a4e      	cmp	r2, #78	; 0x4e
 8008cae:	f47f aedc 	bne.w	8008a6a <_strtod_l+0xba>
 8008cb2:	499d      	ldr	r1, [pc, #628]	; (8008f28 <_strtod_l+0x578>)
 8008cb4:	a819      	add	r0, sp, #100	; 0x64
 8008cb6:	f001 fe3b 	bl	800a930 <__match>
 8008cba:	2800      	cmp	r0, #0
 8008cbc:	f43f aed5 	beq.w	8008a6a <_strtod_l+0xba>
 8008cc0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008cc2:	781b      	ldrb	r3, [r3, #0]
 8008cc4:	2b28      	cmp	r3, #40	; 0x28
 8008cc6:	d12c      	bne.n	8008d22 <_strtod_l+0x372>
 8008cc8:	4998      	ldr	r1, [pc, #608]	; (8008f2c <_strtod_l+0x57c>)
 8008cca:	aa1c      	add	r2, sp, #112	; 0x70
 8008ccc:	a819      	add	r0, sp, #100	; 0x64
 8008cce:	f001 fe43 	bl	800a958 <__hexnan>
 8008cd2:	2805      	cmp	r0, #5
 8008cd4:	d125      	bne.n	8008d22 <_strtod_l+0x372>
 8008cd6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008cd8:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8008cdc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008ce0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8008ce4:	e6a5      	b.n	8008a32 <_strtod_l+0x82>
 8008ce6:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8008cea:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8008cee:	e7bc      	b.n	8008c6a <_strtod_l+0x2ba>
 8008cf0:	2a6e      	cmp	r2, #110	; 0x6e
 8008cf2:	e7dc      	b.n	8008cae <_strtod_l+0x2fe>
 8008cf4:	498e      	ldr	r1, [pc, #568]	; (8008f30 <_strtod_l+0x580>)
 8008cf6:	a819      	add	r0, sp, #100	; 0x64
 8008cf8:	f001 fe1a 	bl	800a930 <__match>
 8008cfc:	2800      	cmp	r0, #0
 8008cfe:	f43f aeb4 	beq.w	8008a6a <_strtod_l+0xba>
 8008d02:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008d04:	498b      	ldr	r1, [pc, #556]	; (8008f34 <_strtod_l+0x584>)
 8008d06:	3b01      	subs	r3, #1
 8008d08:	a819      	add	r0, sp, #100	; 0x64
 8008d0a:	9319      	str	r3, [sp, #100]	; 0x64
 8008d0c:	f001 fe10 	bl	800a930 <__match>
 8008d10:	b910      	cbnz	r0, 8008d18 <_strtod_l+0x368>
 8008d12:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008d14:	3301      	adds	r3, #1
 8008d16:	9319      	str	r3, [sp, #100]	; 0x64
 8008d18:	f04f 0800 	mov.w	r8, #0
 8008d1c:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8008f38 <_strtod_l+0x588>
 8008d20:	e687      	b.n	8008a32 <_strtod_l+0x82>
 8008d22:	4886      	ldr	r0, [pc, #536]	; (8008f3c <_strtod_l+0x58c>)
 8008d24:	f003 f92e 	bl	800bf84 <nan>
 8008d28:	4680      	mov	r8, r0
 8008d2a:	4689      	mov	r9, r1
 8008d2c:	e681      	b.n	8008a32 <_strtod_l+0x82>
 8008d2e:	9b04      	ldr	r3, [sp, #16]
 8008d30:	f1bb 0f00 	cmp.w	fp, #0
 8008d34:	bf08      	it	eq
 8008d36:	46a3      	moveq	fp, r4
 8008d38:	1aeb      	subs	r3, r5, r3
 8008d3a:	2c10      	cmp	r4, #16
 8008d3c:	9806      	ldr	r0, [sp, #24]
 8008d3e:	4626      	mov	r6, r4
 8008d40:	9307      	str	r3, [sp, #28]
 8008d42:	bfa8      	it	ge
 8008d44:	2610      	movge	r6, #16
 8008d46:	f7f7 fc6d 	bl	8000624 <__aeabi_ui2d>
 8008d4a:	2c09      	cmp	r4, #9
 8008d4c:	4680      	mov	r8, r0
 8008d4e:	4689      	mov	r9, r1
 8008d50:	dd13      	ble.n	8008d7a <_strtod_l+0x3ca>
 8008d52:	4b7b      	ldr	r3, [pc, #492]	; (8008f40 <_strtod_l+0x590>)
 8008d54:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008d58:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008d5c:	f7f7 fcdc 	bl	8000718 <__aeabi_dmul>
 8008d60:	4680      	mov	r8, r0
 8008d62:	9805      	ldr	r0, [sp, #20]
 8008d64:	4689      	mov	r9, r1
 8008d66:	f7f7 fc5d 	bl	8000624 <__aeabi_ui2d>
 8008d6a:	4602      	mov	r2, r0
 8008d6c:	460b      	mov	r3, r1
 8008d6e:	4640      	mov	r0, r8
 8008d70:	4649      	mov	r1, r9
 8008d72:	f7f7 fb1b 	bl	80003ac <__adddf3>
 8008d76:	4680      	mov	r8, r0
 8008d78:	4689      	mov	r9, r1
 8008d7a:	2c0f      	cmp	r4, #15
 8008d7c:	dc36      	bgt.n	8008dec <_strtod_l+0x43c>
 8008d7e:	9b07      	ldr	r3, [sp, #28]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	f43f ae56 	beq.w	8008a32 <_strtod_l+0x82>
 8008d86:	dd22      	ble.n	8008dce <_strtod_l+0x41e>
 8008d88:	2b16      	cmp	r3, #22
 8008d8a:	dc09      	bgt.n	8008da0 <_strtod_l+0x3f0>
 8008d8c:	496c      	ldr	r1, [pc, #432]	; (8008f40 <_strtod_l+0x590>)
 8008d8e:	4642      	mov	r2, r8
 8008d90:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008d94:	464b      	mov	r3, r9
 8008d96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d9a:	f7f7 fcbd 	bl	8000718 <__aeabi_dmul>
 8008d9e:	e7c3      	b.n	8008d28 <_strtod_l+0x378>
 8008da0:	9a07      	ldr	r2, [sp, #28]
 8008da2:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8008da6:	4293      	cmp	r3, r2
 8008da8:	db20      	blt.n	8008dec <_strtod_l+0x43c>
 8008daa:	4d65      	ldr	r5, [pc, #404]	; (8008f40 <_strtod_l+0x590>)
 8008dac:	f1c4 040f 	rsb	r4, r4, #15
 8008db0:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8008db4:	4642      	mov	r2, r8
 8008db6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008dba:	464b      	mov	r3, r9
 8008dbc:	f7f7 fcac 	bl	8000718 <__aeabi_dmul>
 8008dc0:	9b07      	ldr	r3, [sp, #28]
 8008dc2:	1b1c      	subs	r4, r3, r4
 8008dc4:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8008dc8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008dcc:	e7e5      	b.n	8008d9a <_strtod_l+0x3ea>
 8008dce:	9b07      	ldr	r3, [sp, #28]
 8008dd0:	3316      	adds	r3, #22
 8008dd2:	db0b      	blt.n	8008dec <_strtod_l+0x43c>
 8008dd4:	9b04      	ldr	r3, [sp, #16]
 8008dd6:	4640      	mov	r0, r8
 8008dd8:	1b5d      	subs	r5, r3, r5
 8008dda:	4b59      	ldr	r3, [pc, #356]	; (8008f40 <_strtod_l+0x590>)
 8008ddc:	4649      	mov	r1, r9
 8008dde:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8008de2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008de6:	f7f7 fdc1 	bl	800096c <__aeabi_ddiv>
 8008dea:	e79d      	b.n	8008d28 <_strtod_l+0x378>
 8008dec:	9b07      	ldr	r3, [sp, #28]
 8008dee:	1ba6      	subs	r6, r4, r6
 8008df0:	441e      	add	r6, r3
 8008df2:	2e00      	cmp	r6, #0
 8008df4:	dd74      	ble.n	8008ee0 <_strtod_l+0x530>
 8008df6:	f016 030f 	ands.w	r3, r6, #15
 8008dfa:	d00a      	beq.n	8008e12 <_strtod_l+0x462>
 8008dfc:	4950      	ldr	r1, [pc, #320]	; (8008f40 <_strtod_l+0x590>)
 8008dfe:	4642      	mov	r2, r8
 8008e00:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008e04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e08:	464b      	mov	r3, r9
 8008e0a:	f7f7 fc85 	bl	8000718 <__aeabi_dmul>
 8008e0e:	4680      	mov	r8, r0
 8008e10:	4689      	mov	r9, r1
 8008e12:	f036 060f 	bics.w	r6, r6, #15
 8008e16:	d052      	beq.n	8008ebe <_strtod_l+0x50e>
 8008e18:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8008e1c:	dd27      	ble.n	8008e6e <_strtod_l+0x4be>
 8008e1e:	f04f 0b00 	mov.w	fp, #0
 8008e22:	f8cd b010 	str.w	fp, [sp, #16]
 8008e26:	f8cd b020 	str.w	fp, [sp, #32]
 8008e2a:	f8cd b018 	str.w	fp, [sp, #24]
 8008e2e:	2322      	movs	r3, #34	; 0x22
 8008e30:	f04f 0800 	mov.w	r8, #0
 8008e34:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8008f38 <_strtod_l+0x588>
 8008e38:	f8ca 3000 	str.w	r3, [sl]
 8008e3c:	9b08      	ldr	r3, [sp, #32]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	f43f adf7 	beq.w	8008a32 <_strtod_l+0x82>
 8008e44:	4650      	mov	r0, sl
 8008e46:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008e48:	f001 fea0 	bl	800ab8c <_Bfree>
 8008e4c:	4650      	mov	r0, sl
 8008e4e:	9906      	ldr	r1, [sp, #24]
 8008e50:	f001 fe9c 	bl	800ab8c <_Bfree>
 8008e54:	4650      	mov	r0, sl
 8008e56:	9904      	ldr	r1, [sp, #16]
 8008e58:	f001 fe98 	bl	800ab8c <_Bfree>
 8008e5c:	4650      	mov	r0, sl
 8008e5e:	9908      	ldr	r1, [sp, #32]
 8008e60:	f001 fe94 	bl	800ab8c <_Bfree>
 8008e64:	4659      	mov	r1, fp
 8008e66:	4650      	mov	r0, sl
 8008e68:	f001 fe90 	bl	800ab8c <_Bfree>
 8008e6c:	e5e1      	b.n	8008a32 <_strtod_l+0x82>
 8008e6e:	4b35      	ldr	r3, [pc, #212]	; (8008f44 <_strtod_l+0x594>)
 8008e70:	4640      	mov	r0, r8
 8008e72:	9305      	str	r3, [sp, #20]
 8008e74:	2300      	movs	r3, #0
 8008e76:	4649      	mov	r1, r9
 8008e78:	461f      	mov	r7, r3
 8008e7a:	1136      	asrs	r6, r6, #4
 8008e7c:	2e01      	cmp	r6, #1
 8008e7e:	dc21      	bgt.n	8008ec4 <_strtod_l+0x514>
 8008e80:	b10b      	cbz	r3, 8008e86 <_strtod_l+0x4d6>
 8008e82:	4680      	mov	r8, r0
 8008e84:	4689      	mov	r9, r1
 8008e86:	4b2f      	ldr	r3, [pc, #188]	; (8008f44 <_strtod_l+0x594>)
 8008e88:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8008e8c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008e90:	4642      	mov	r2, r8
 8008e92:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008e96:	464b      	mov	r3, r9
 8008e98:	f7f7 fc3e 	bl	8000718 <__aeabi_dmul>
 8008e9c:	4b26      	ldr	r3, [pc, #152]	; (8008f38 <_strtod_l+0x588>)
 8008e9e:	460a      	mov	r2, r1
 8008ea0:	400b      	ands	r3, r1
 8008ea2:	4929      	ldr	r1, [pc, #164]	; (8008f48 <_strtod_l+0x598>)
 8008ea4:	4680      	mov	r8, r0
 8008ea6:	428b      	cmp	r3, r1
 8008ea8:	d8b9      	bhi.n	8008e1e <_strtod_l+0x46e>
 8008eaa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008eae:	428b      	cmp	r3, r1
 8008eb0:	bf86      	itte	hi
 8008eb2:	f04f 38ff 	movhi.w	r8, #4294967295
 8008eb6:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8008f4c <_strtod_l+0x59c>
 8008eba:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	9305      	str	r3, [sp, #20]
 8008ec2:	e07f      	b.n	8008fc4 <_strtod_l+0x614>
 8008ec4:	07f2      	lsls	r2, r6, #31
 8008ec6:	d505      	bpl.n	8008ed4 <_strtod_l+0x524>
 8008ec8:	9b05      	ldr	r3, [sp, #20]
 8008eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ece:	f7f7 fc23 	bl	8000718 <__aeabi_dmul>
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	9a05      	ldr	r2, [sp, #20]
 8008ed6:	3701      	adds	r7, #1
 8008ed8:	3208      	adds	r2, #8
 8008eda:	1076      	asrs	r6, r6, #1
 8008edc:	9205      	str	r2, [sp, #20]
 8008ede:	e7cd      	b.n	8008e7c <_strtod_l+0x4cc>
 8008ee0:	d0ed      	beq.n	8008ebe <_strtod_l+0x50e>
 8008ee2:	4276      	negs	r6, r6
 8008ee4:	f016 020f 	ands.w	r2, r6, #15
 8008ee8:	d00a      	beq.n	8008f00 <_strtod_l+0x550>
 8008eea:	4b15      	ldr	r3, [pc, #84]	; (8008f40 <_strtod_l+0x590>)
 8008eec:	4640      	mov	r0, r8
 8008eee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ef2:	4649      	mov	r1, r9
 8008ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ef8:	f7f7 fd38 	bl	800096c <__aeabi_ddiv>
 8008efc:	4680      	mov	r8, r0
 8008efe:	4689      	mov	r9, r1
 8008f00:	1136      	asrs	r6, r6, #4
 8008f02:	d0dc      	beq.n	8008ebe <_strtod_l+0x50e>
 8008f04:	2e1f      	cmp	r6, #31
 8008f06:	dd23      	ble.n	8008f50 <_strtod_l+0x5a0>
 8008f08:	f04f 0b00 	mov.w	fp, #0
 8008f0c:	f8cd b010 	str.w	fp, [sp, #16]
 8008f10:	f8cd b020 	str.w	fp, [sp, #32]
 8008f14:	f8cd b018 	str.w	fp, [sp, #24]
 8008f18:	2322      	movs	r3, #34	; 0x22
 8008f1a:	f04f 0800 	mov.w	r8, #0
 8008f1e:	f04f 0900 	mov.w	r9, #0
 8008f22:	f8ca 3000 	str.w	r3, [sl]
 8008f26:	e789      	b.n	8008e3c <_strtod_l+0x48c>
 8008f28:	0800cced 	.word	0x0800cced
 8008f2c:	0800cd2c 	.word	0x0800cd2c
 8008f30:	0800cce5 	.word	0x0800cce5
 8008f34:	0800ce6c 	.word	0x0800ce6c
 8008f38:	7ff00000 	.word	0x7ff00000
 8008f3c:	0800d133 	.word	0x0800d133
 8008f40:	0800cff8 	.word	0x0800cff8
 8008f44:	0800cfd0 	.word	0x0800cfd0
 8008f48:	7ca00000 	.word	0x7ca00000
 8008f4c:	7fefffff 	.word	0x7fefffff
 8008f50:	f016 0310 	ands.w	r3, r6, #16
 8008f54:	bf18      	it	ne
 8008f56:	236a      	movne	r3, #106	; 0x6a
 8008f58:	4640      	mov	r0, r8
 8008f5a:	9305      	str	r3, [sp, #20]
 8008f5c:	4649      	mov	r1, r9
 8008f5e:	2300      	movs	r3, #0
 8008f60:	4fb0      	ldr	r7, [pc, #704]	; (8009224 <_strtod_l+0x874>)
 8008f62:	07f2      	lsls	r2, r6, #31
 8008f64:	d504      	bpl.n	8008f70 <_strtod_l+0x5c0>
 8008f66:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f6a:	f7f7 fbd5 	bl	8000718 <__aeabi_dmul>
 8008f6e:	2301      	movs	r3, #1
 8008f70:	1076      	asrs	r6, r6, #1
 8008f72:	f107 0708 	add.w	r7, r7, #8
 8008f76:	d1f4      	bne.n	8008f62 <_strtod_l+0x5b2>
 8008f78:	b10b      	cbz	r3, 8008f7e <_strtod_l+0x5ce>
 8008f7a:	4680      	mov	r8, r0
 8008f7c:	4689      	mov	r9, r1
 8008f7e:	9b05      	ldr	r3, [sp, #20]
 8008f80:	b1c3      	cbz	r3, 8008fb4 <_strtod_l+0x604>
 8008f82:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8008f86:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	4649      	mov	r1, r9
 8008f8e:	dd11      	ble.n	8008fb4 <_strtod_l+0x604>
 8008f90:	2b1f      	cmp	r3, #31
 8008f92:	f340 8127 	ble.w	80091e4 <_strtod_l+0x834>
 8008f96:	2b34      	cmp	r3, #52	; 0x34
 8008f98:	bfd8      	it	le
 8008f9a:	f04f 33ff 	movle.w	r3, #4294967295
 8008f9e:	f04f 0800 	mov.w	r8, #0
 8008fa2:	bfcf      	iteee	gt
 8008fa4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8008fa8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8008fac:	fa03 f202 	lslle.w	r2, r3, r2
 8008fb0:	ea02 0901 	andle.w	r9, r2, r1
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	4640      	mov	r0, r8
 8008fba:	4649      	mov	r1, r9
 8008fbc:	f7f7 fe14 	bl	8000be8 <__aeabi_dcmpeq>
 8008fc0:	2800      	cmp	r0, #0
 8008fc2:	d1a1      	bne.n	8008f08 <_strtod_l+0x558>
 8008fc4:	9b06      	ldr	r3, [sp, #24]
 8008fc6:	465a      	mov	r2, fp
 8008fc8:	9300      	str	r3, [sp, #0]
 8008fca:	4650      	mov	r0, sl
 8008fcc:	4623      	mov	r3, r4
 8008fce:	9908      	ldr	r1, [sp, #32]
 8008fd0:	f001 fe44 	bl	800ac5c <__s2b>
 8008fd4:	9008      	str	r0, [sp, #32]
 8008fd6:	2800      	cmp	r0, #0
 8008fd8:	f43f af21 	beq.w	8008e1e <_strtod_l+0x46e>
 8008fdc:	9b04      	ldr	r3, [sp, #16]
 8008fde:	f04f 0b00 	mov.w	fp, #0
 8008fe2:	1b5d      	subs	r5, r3, r5
 8008fe4:	9b07      	ldr	r3, [sp, #28]
 8008fe6:	f8cd b010 	str.w	fp, [sp, #16]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	bfb4      	ite	lt
 8008fee:	462b      	movlt	r3, r5
 8008ff0:	2300      	movge	r3, #0
 8008ff2:	930e      	str	r3, [sp, #56]	; 0x38
 8008ff4:	9b07      	ldr	r3, [sp, #28]
 8008ff6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008ffa:	9314      	str	r3, [sp, #80]	; 0x50
 8008ffc:	9b08      	ldr	r3, [sp, #32]
 8008ffe:	4650      	mov	r0, sl
 8009000:	6859      	ldr	r1, [r3, #4]
 8009002:	f001 fd83 	bl	800ab0c <_Balloc>
 8009006:	9006      	str	r0, [sp, #24]
 8009008:	2800      	cmp	r0, #0
 800900a:	f43f af10 	beq.w	8008e2e <_strtod_l+0x47e>
 800900e:	9b08      	ldr	r3, [sp, #32]
 8009010:	300c      	adds	r0, #12
 8009012:	691a      	ldr	r2, [r3, #16]
 8009014:	f103 010c 	add.w	r1, r3, #12
 8009018:	3202      	adds	r2, #2
 800901a:	0092      	lsls	r2, r2, #2
 800901c:	f7fe fd8e 	bl	8007b3c <memcpy>
 8009020:	ab1c      	add	r3, sp, #112	; 0x70
 8009022:	9301      	str	r3, [sp, #4]
 8009024:	ab1b      	add	r3, sp, #108	; 0x6c
 8009026:	9300      	str	r3, [sp, #0]
 8009028:	4642      	mov	r2, r8
 800902a:	464b      	mov	r3, r9
 800902c:	4650      	mov	r0, sl
 800902e:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8009032:	f002 f955 	bl	800b2e0 <__d2b>
 8009036:	901a      	str	r0, [sp, #104]	; 0x68
 8009038:	2800      	cmp	r0, #0
 800903a:	f43f aef8 	beq.w	8008e2e <_strtod_l+0x47e>
 800903e:	2101      	movs	r1, #1
 8009040:	4650      	mov	r0, sl
 8009042:	f001 fea3 	bl	800ad8c <__i2b>
 8009046:	4603      	mov	r3, r0
 8009048:	9004      	str	r0, [sp, #16]
 800904a:	2800      	cmp	r0, #0
 800904c:	f43f aeef 	beq.w	8008e2e <_strtod_l+0x47e>
 8009050:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8009052:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009054:	2d00      	cmp	r5, #0
 8009056:	bfab      	itete	ge
 8009058:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800905a:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 800905c:	18ee      	addge	r6, r5, r3
 800905e:	1b5c      	sublt	r4, r3, r5
 8009060:	9b05      	ldr	r3, [sp, #20]
 8009062:	bfa8      	it	ge
 8009064:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8009066:	eba5 0503 	sub.w	r5, r5, r3
 800906a:	4415      	add	r5, r2
 800906c:	4b6e      	ldr	r3, [pc, #440]	; (8009228 <_strtod_l+0x878>)
 800906e:	f105 35ff 	add.w	r5, r5, #4294967295
 8009072:	bfb8      	it	lt
 8009074:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8009076:	429d      	cmp	r5, r3
 8009078:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800907c:	f280 80c4 	bge.w	8009208 <_strtod_l+0x858>
 8009080:	1b5b      	subs	r3, r3, r5
 8009082:	2b1f      	cmp	r3, #31
 8009084:	f04f 0701 	mov.w	r7, #1
 8009088:	eba2 0203 	sub.w	r2, r2, r3
 800908c:	f300 80b1 	bgt.w	80091f2 <_strtod_l+0x842>
 8009090:	2500      	movs	r5, #0
 8009092:	fa07 f303 	lsl.w	r3, r7, r3
 8009096:	930f      	str	r3, [sp, #60]	; 0x3c
 8009098:	18b7      	adds	r7, r6, r2
 800909a:	9b05      	ldr	r3, [sp, #20]
 800909c:	42be      	cmp	r6, r7
 800909e:	4414      	add	r4, r2
 80090a0:	441c      	add	r4, r3
 80090a2:	4633      	mov	r3, r6
 80090a4:	bfa8      	it	ge
 80090a6:	463b      	movge	r3, r7
 80090a8:	42a3      	cmp	r3, r4
 80090aa:	bfa8      	it	ge
 80090ac:	4623      	movge	r3, r4
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	bfc2      	ittt	gt
 80090b2:	1aff      	subgt	r7, r7, r3
 80090b4:	1ae4      	subgt	r4, r4, r3
 80090b6:	1af6      	subgt	r6, r6, r3
 80090b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	dd17      	ble.n	80090ee <_strtod_l+0x73e>
 80090be:	461a      	mov	r2, r3
 80090c0:	4650      	mov	r0, sl
 80090c2:	9904      	ldr	r1, [sp, #16]
 80090c4:	f001 ff20 	bl	800af08 <__pow5mult>
 80090c8:	9004      	str	r0, [sp, #16]
 80090ca:	2800      	cmp	r0, #0
 80090cc:	f43f aeaf 	beq.w	8008e2e <_strtod_l+0x47e>
 80090d0:	4601      	mov	r1, r0
 80090d2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80090d4:	4650      	mov	r0, sl
 80090d6:	f001 fe6f 	bl	800adb8 <__multiply>
 80090da:	9009      	str	r0, [sp, #36]	; 0x24
 80090dc:	2800      	cmp	r0, #0
 80090de:	f43f aea6 	beq.w	8008e2e <_strtod_l+0x47e>
 80090e2:	4650      	mov	r0, sl
 80090e4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80090e6:	f001 fd51 	bl	800ab8c <_Bfree>
 80090ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090ec:	931a      	str	r3, [sp, #104]	; 0x68
 80090ee:	2f00      	cmp	r7, #0
 80090f0:	f300 808e 	bgt.w	8009210 <_strtod_l+0x860>
 80090f4:	9b07      	ldr	r3, [sp, #28]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	dd08      	ble.n	800910c <_strtod_l+0x75c>
 80090fa:	4650      	mov	r0, sl
 80090fc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80090fe:	9906      	ldr	r1, [sp, #24]
 8009100:	f001 ff02 	bl	800af08 <__pow5mult>
 8009104:	9006      	str	r0, [sp, #24]
 8009106:	2800      	cmp	r0, #0
 8009108:	f43f ae91 	beq.w	8008e2e <_strtod_l+0x47e>
 800910c:	2c00      	cmp	r4, #0
 800910e:	dd08      	ble.n	8009122 <_strtod_l+0x772>
 8009110:	4622      	mov	r2, r4
 8009112:	4650      	mov	r0, sl
 8009114:	9906      	ldr	r1, [sp, #24]
 8009116:	f001 ff51 	bl	800afbc <__lshift>
 800911a:	9006      	str	r0, [sp, #24]
 800911c:	2800      	cmp	r0, #0
 800911e:	f43f ae86 	beq.w	8008e2e <_strtod_l+0x47e>
 8009122:	2e00      	cmp	r6, #0
 8009124:	dd08      	ble.n	8009138 <_strtod_l+0x788>
 8009126:	4632      	mov	r2, r6
 8009128:	4650      	mov	r0, sl
 800912a:	9904      	ldr	r1, [sp, #16]
 800912c:	f001 ff46 	bl	800afbc <__lshift>
 8009130:	9004      	str	r0, [sp, #16]
 8009132:	2800      	cmp	r0, #0
 8009134:	f43f ae7b 	beq.w	8008e2e <_strtod_l+0x47e>
 8009138:	4650      	mov	r0, sl
 800913a:	9a06      	ldr	r2, [sp, #24]
 800913c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800913e:	f001 ffc9 	bl	800b0d4 <__mdiff>
 8009142:	4683      	mov	fp, r0
 8009144:	2800      	cmp	r0, #0
 8009146:	f43f ae72 	beq.w	8008e2e <_strtod_l+0x47e>
 800914a:	2400      	movs	r4, #0
 800914c:	68c3      	ldr	r3, [r0, #12]
 800914e:	9904      	ldr	r1, [sp, #16]
 8009150:	60c4      	str	r4, [r0, #12]
 8009152:	930b      	str	r3, [sp, #44]	; 0x2c
 8009154:	f001 ffa2 	bl	800b09c <__mcmp>
 8009158:	42a0      	cmp	r0, r4
 800915a:	da6b      	bge.n	8009234 <_strtod_l+0x884>
 800915c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800915e:	ea53 0308 	orrs.w	r3, r3, r8
 8009162:	f040 8091 	bne.w	8009288 <_strtod_l+0x8d8>
 8009166:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800916a:	2b00      	cmp	r3, #0
 800916c:	f040 808c 	bne.w	8009288 <_strtod_l+0x8d8>
 8009170:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009174:	0d1b      	lsrs	r3, r3, #20
 8009176:	051b      	lsls	r3, r3, #20
 8009178:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800917c:	f240 8084 	bls.w	8009288 <_strtod_l+0x8d8>
 8009180:	f8db 3014 	ldr.w	r3, [fp, #20]
 8009184:	b91b      	cbnz	r3, 800918e <_strtod_l+0x7de>
 8009186:	f8db 3010 	ldr.w	r3, [fp, #16]
 800918a:	2b01      	cmp	r3, #1
 800918c:	dd7c      	ble.n	8009288 <_strtod_l+0x8d8>
 800918e:	4659      	mov	r1, fp
 8009190:	2201      	movs	r2, #1
 8009192:	4650      	mov	r0, sl
 8009194:	f001 ff12 	bl	800afbc <__lshift>
 8009198:	9904      	ldr	r1, [sp, #16]
 800919a:	4683      	mov	fp, r0
 800919c:	f001 ff7e 	bl	800b09c <__mcmp>
 80091a0:	2800      	cmp	r0, #0
 80091a2:	dd71      	ble.n	8009288 <_strtod_l+0x8d8>
 80091a4:	9905      	ldr	r1, [sp, #20]
 80091a6:	464b      	mov	r3, r9
 80091a8:	4a20      	ldr	r2, [pc, #128]	; (800922c <_strtod_l+0x87c>)
 80091aa:	2900      	cmp	r1, #0
 80091ac:	f000 808c 	beq.w	80092c8 <_strtod_l+0x918>
 80091b0:	ea02 0109 	and.w	r1, r2, r9
 80091b4:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80091b8:	f300 8086 	bgt.w	80092c8 <_strtod_l+0x918>
 80091bc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80091c0:	f77f aeaa 	ble.w	8008f18 <_strtod_l+0x568>
 80091c4:	4640      	mov	r0, r8
 80091c6:	4649      	mov	r1, r9
 80091c8:	4b19      	ldr	r3, [pc, #100]	; (8009230 <_strtod_l+0x880>)
 80091ca:	2200      	movs	r2, #0
 80091cc:	f7f7 faa4 	bl	8000718 <__aeabi_dmul>
 80091d0:	460b      	mov	r3, r1
 80091d2:	4303      	orrs	r3, r0
 80091d4:	bf08      	it	eq
 80091d6:	2322      	moveq	r3, #34	; 0x22
 80091d8:	4680      	mov	r8, r0
 80091da:	4689      	mov	r9, r1
 80091dc:	bf08      	it	eq
 80091de:	f8ca 3000 	streq.w	r3, [sl]
 80091e2:	e62f      	b.n	8008e44 <_strtod_l+0x494>
 80091e4:	f04f 32ff 	mov.w	r2, #4294967295
 80091e8:	fa02 f303 	lsl.w	r3, r2, r3
 80091ec:	ea03 0808 	and.w	r8, r3, r8
 80091f0:	e6e0      	b.n	8008fb4 <_strtod_l+0x604>
 80091f2:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80091f6:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80091fa:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80091fe:	35e2      	adds	r5, #226	; 0xe2
 8009200:	fa07 f505 	lsl.w	r5, r7, r5
 8009204:	970f      	str	r7, [sp, #60]	; 0x3c
 8009206:	e747      	b.n	8009098 <_strtod_l+0x6e8>
 8009208:	2301      	movs	r3, #1
 800920a:	2500      	movs	r5, #0
 800920c:	930f      	str	r3, [sp, #60]	; 0x3c
 800920e:	e743      	b.n	8009098 <_strtod_l+0x6e8>
 8009210:	463a      	mov	r2, r7
 8009212:	4650      	mov	r0, sl
 8009214:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009216:	f001 fed1 	bl	800afbc <__lshift>
 800921a:	901a      	str	r0, [sp, #104]	; 0x68
 800921c:	2800      	cmp	r0, #0
 800921e:	f47f af69 	bne.w	80090f4 <_strtod_l+0x744>
 8009222:	e604      	b.n	8008e2e <_strtod_l+0x47e>
 8009224:	0800cd40 	.word	0x0800cd40
 8009228:	fffffc02 	.word	0xfffffc02
 800922c:	7ff00000 	.word	0x7ff00000
 8009230:	39500000 	.word	0x39500000
 8009234:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009238:	d165      	bne.n	8009306 <_strtod_l+0x956>
 800923a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800923c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009240:	b35a      	cbz	r2, 800929a <_strtod_l+0x8ea>
 8009242:	4a99      	ldr	r2, [pc, #612]	; (80094a8 <_strtod_l+0xaf8>)
 8009244:	4293      	cmp	r3, r2
 8009246:	d12b      	bne.n	80092a0 <_strtod_l+0x8f0>
 8009248:	9b05      	ldr	r3, [sp, #20]
 800924a:	4641      	mov	r1, r8
 800924c:	b303      	cbz	r3, 8009290 <_strtod_l+0x8e0>
 800924e:	464a      	mov	r2, r9
 8009250:	4b96      	ldr	r3, [pc, #600]	; (80094ac <_strtod_l+0xafc>)
 8009252:	4013      	ands	r3, r2
 8009254:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009258:	f04f 32ff 	mov.w	r2, #4294967295
 800925c:	d81b      	bhi.n	8009296 <_strtod_l+0x8e6>
 800925e:	0d1b      	lsrs	r3, r3, #20
 8009260:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009264:	fa02 f303 	lsl.w	r3, r2, r3
 8009268:	4299      	cmp	r1, r3
 800926a:	d119      	bne.n	80092a0 <_strtod_l+0x8f0>
 800926c:	4b90      	ldr	r3, [pc, #576]	; (80094b0 <_strtod_l+0xb00>)
 800926e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009270:	429a      	cmp	r2, r3
 8009272:	d102      	bne.n	800927a <_strtod_l+0x8ca>
 8009274:	3101      	adds	r1, #1
 8009276:	f43f adda 	beq.w	8008e2e <_strtod_l+0x47e>
 800927a:	f04f 0800 	mov.w	r8, #0
 800927e:	4b8b      	ldr	r3, [pc, #556]	; (80094ac <_strtod_l+0xafc>)
 8009280:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009282:	401a      	ands	r2, r3
 8009284:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8009288:	9b05      	ldr	r3, [sp, #20]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d19a      	bne.n	80091c4 <_strtod_l+0x814>
 800928e:	e5d9      	b.n	8008e44 <_strtod_l+0x494>
 8009290:	f04f 33ff 	mov.w	r3, #4294967295
 8009294:	e7e8      	b.n	8009268 <_strtod_l+0x8b8>
 8009296:	4613      	mov	r3, r2
 8009298:	e7e6      	b.n	8009268 <_strtod_l+0x8b8>
 800929a:	ea53 0308 	orrs.w	r3, r3, r8
 800929e:	d081      	beq.n	80091a4 <_strtod_l+0x7f4>
 80092a0:	b1e5      	cbz	r5, 80092dc <_strtod_l+0x92c>
 80092a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092a4:	421d      	tst	r5, r3
 80092a6:	d0ef      	beq.n	8009288 <_strtod_l+0x8d8>
 80092a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092aa:	4640      	mov	r0, r8
 80092ac:	4649      	mov	r1, r9
 80092ae:	9a05      	ldr	r2, [sp, #20]
 80092b0:	b1c3      	cbz	r3, 80092e4 <_strtod_l+0x934>
 80092b2:	f7ff fb5a 	bl	800896a <sulp>
 80092b6:	4602      	mov	r2, r0
 80092b8:	460b      	mov	r3, r1
 80092ba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80092be:	f7f7 f875 	bl	80003ac <__adddf3>
 80092c2:	4680      	mov	r8, r0
 80092c4:	4689      	mov	r9, r1
 80092c6:	e7df      	b.n	8009288 <_strtod_l+0x8d8>
 80092c8:	4013      	ands	r3, r2
 80092ca:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80092ce:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80092d2:	f04f 38ff 	mov.w	r8, #4294967295
 80092d6:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80092da:	e7d5      	b.n	8009288 <_strtod_l+0x8d8>
 80092dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80092de:	ea13 0f08 	tst.w	r3, r8
 80092e2:	e7e0      	b.n	80092a6 <_strtod_l+0x8f6>
 80092e4:	f7ff fb41 	bl	800896a <sulp>
 80092e8:	4602      	mov	r2, r0
 80092ea:	460b      	mov	r3, r1
 80092ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80092f0:	f7f7 f85a 	bl	80003a8 <__aeabi_dsub>
 80092f4:	2200      	movs	r2, #0
 80092f6:	2300      	movs	r3, #0
 80092f8:	4680      	mov	r8, r0
 80092fa:	4689      	mov	r9, r1
 80092fc:	f7f7 fc74 	bl	8000be8 <__aeabi_dcmpeq>
 8009300:	2800      	cmp	r0, #0
 8009302:	d0c1      	beq.n	8009288 <_strtod_l+0x8d8>
 8009304:	e608      	b.n	8008f18 <_strtod_l+0x568>
 8009306:	4658      	mov	r0, fp
 8009308:	9904      	ldr	r1, [sp, #16]
 800930a:	f002 f845 	bl	800b398 <__ratio>
 800930e:	2200      	movs	r2, #0
 8009310:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009314:	4606      	mov	r6, r0
 8009316:	460f      	mov	r7, r1
 8009318:	f7f7 fc7a 	bl	8000c10 <__aeabi_dcmple>
 800931c:	2800      	cmp	r0, #0
 800931e:	d070      	beq.n	8009402 <_strtod_l+0xa52>
 8009320:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009322:	2b00      	cmp	r3, #0
 8009324:	d042      	beq.n	80093ac <_strtod_l+0x9fc>
 8009326:	2600      	movs	r6, #0
 8009328:	4f62      	ldr	r7, [pc, #392]	; (80094b4 <_strtod_l+0xb04>)
 800932a:	4d62      	ldr	r5, [pc, #392]	; (80094b4 <_strtod_l+0xb04>)
 800932c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800932e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009332:	0d1b      	lsrs	r3, r3, #20
 8009334:	051b      	lsls	r3, r3, #20
 8009336:	930f      	str	r3, [sp, #60]	; 0x3c
 8009338:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800933a:	4b5f      	ldr	r3, [pc, #380]	; (80094b8 <_strtod_l+0xb08>)
 800933c:	429a      	cmp	r2, r3
 800933e:	f040 80c3 	bne.w	80094c8 <_strtod_l+0xb18>
 8009342:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009344:	4640      	mov	r0, r8
 8009346:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800934a:	4649      	mov	r1, r9
 800934c:	f001 ff4e 	bl	800b1ec <__ulp>
 8009350:	4602      	mov	r2, r0
 8009352:	460b      	mov	r3, r1
 8009354:	4630      	mov	r0, r6
 8009356:	4639      	mov	r1, r7
 8009358:	f7f7 f9de 	bl	8000718 <__aeabi_dmul>
 800935c:	4642      	mov	r2, r8
 800935e:	464b      	mov	r3, r9
 8009360:	f7f7 f824 	bl	80003ac <__adddf3>
 8009364:	460b      	mov	r3, r1
 8009366:	4951      	ldr	r1, [pc, #324]	; (80094ac <_strtod_l+0xafc>)
 8009368:	4a54      	ldr	r2, [pc, #336]	; (80094bc <_strtod_l+0xb0c>)
 800936a:	4019      	ands	r1, r3
 800936c:	4291      	cmp	r1, r2
 800936e:	4680      	mov	r8, r0
 8009370:	d95d      	bls.n	800942e <_strtod_l+0xa7e>
 8009372:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009374:	4b4e      	ldr	r3, [pc, #312]	; (80094b0 <_strtod_l+0xb00>)
 8009376:	429a      	cmp	r2, r3
 8009378:	d103      	bne.n	8009382 <_strtod_l+0x9d2>
 800937a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800937c:	3301      	adds	r3, #1
 800937e:	f43f ad56 	beq.w	8008e2e <_strtod_l+0x47e>
 8009382:	f04f 38ff 	mov.w	r8, #4294967295
 8009386:	f8df 9128 	ldr.w	r9, [pc, #296]	; 80094b0 <_strtod_l+0xb00>
 800938a:	4650      	mov	r0, sl
 800938c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800938e:	f001 fbfd 	bl	800ab8c <_Bfree>
 8009392:	4650      	mov	r0, sl
 8009394:	9906      	ldr	r1, [sp, #24]
 8009396:	f001 fbf9 	bl	800ab8c <_Bfree>
 800939a:	4650      	mov	r0, sl
 800939c:	9904      	ldr	r1, [sp, #16]
 800939e:	f001 fbf5 	bl	800ab8c <_Bfree>
 80093a2:	4659      	mov	r1, fp
 80093a4:	4650      	mov	r0, sl
 80093a6:	f001 fbf1 	bl	800ab8c <_Bfree>
 80093aa:	e627      	b.n	8008ffc <_strtod_l+0x64c>
 80093ac:	f1b8 0f00 	cmp.w	r8, #0
 80093b0:	d119      	bne.n	80093e6 <_strtod_l+0xa36>
 80093b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80093b8:	b9e3      	cbnz	r3, 80093f4 <_strtod_l+0xa44>
 80093ba:	2200      	movs	r2, #0
 80093bc:	4630      	mov	r0, r6
 80093be:	4639      	mov	r1, r7
 80093c0:	4b3c      	ldr	r3, [pc, #240]	; (80094b4 <_strtod_l+0xb04>)
 80093c2:	f7f7 fc1b 	bl	8000bfc <__aeabi_dcmplt>
 80093c6:	b9c8      	cbnz	r0, 80093fc <_strtod_l+0xa4c>
 80093c8:	2200      	movs	r2, #0
 80093ca:	4630      	mov	r0, r6
 80093cc:	4639      	mov	r1, r7
 80093ce:	4b3c      	ldr	r3, [pc, #240]	; (80094c0 <_strtod_l+0xb10>)
 80093d0:	f7f7 f9a2 	bl	8000718 <__aeabi_dmul>
 80093d4:	4604      	mov	r4, r0
 80093d6:	460d      	mov	r5, r1
 80093d8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80093dc:	9416      	str	r4, [sp, #88]	; 0x58
 80093de:	9317      	str	r3, [sp, #92]	; 0x5c
 80093e0:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 80093e4:	e7a2      	b.n	800932c <_strtod_l+0x97c>
 80093e6:	f1b8 0f01 	cmp.w	r8, #1
 80093ea:	d103      	bne.n	80093f4 <_strtod_l+0xa44>
 80093ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	f43f ad92 	beq.w	8008f18 <_strtod_l+0x568>
 80093f4:	2600      	movs	r6, #0
 80093f6:	2400      	movs	r4, #0
 80093f8:	4f32      	ldr	r7, [pc, #200]	; (80094c4 <_strtod_l+0xb14>)
 80093fa:	e796      	b.n	800932a <_strtod_l+0x97a>
 80093fc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80093fe:	4d30      	ldr	r5, [pc, #192]	; (80094c0 <_strtod_l+0xb10>)
 8009400:	e7ea      	b.n	80093d8 <_strtod_l+0xa28>
 8009402:	4b2f      	ldr	r3, [pc, #188]	; (80094c0 <_strtod_l+0xb10>)
 8009404:	2200      	movs	r2, #0
 8009406:	4630      	mov	r0, r6
 8009408:	4639      	mov	r1, r7
 800940a:	f7f7 f985 	bl	8000718 <__aeabi_dmul>
 800940e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009410:	4604      	mov	r4, r0
 8009412:	460d      	mov	r5, r1
 8009414:	b933      	cbnz	r3, 8009424 <_strtod_l+0xa74>
 8009416:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800941a:	9010      	str	r0, [sp, #64]	; 0x40
 800941c:	9311      	str	r3, [sp, #68]	; 0x44
 800941e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8009422:	e783      	b.n	800932c <_strtod_l+0x97c>
 8009424:	4602      	mov	r2, r0
 8009426:	460b      	mov	r3, r1
 8009428:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800942c:	e7f7      	b.n	800941e <_strtod_l+0xa6e>
 800942e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8009432:	9b05      	ldr	r3, [sp, #20]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d1a8      	bne.n	800938a <_strtod_l+0x9da>
 8009438:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800943c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800943e:	0d1b      	lsrs	r3, r3, #20
 8009440:	051b      	lsls	r3, r3, #20
 8009442:	429a      	cmp	r2, r3
 8009444:	d1a1      	bne.n	800938a <_strtod_l+0x9da>
 8009446:	4620      	mov	r0, r4
 8009448:	4629      	mov	r1, r5
 800944a:	f7f7 fde1 	bl	8001010 <__aeabi_d2lz>
 800944e:	f7f7 f935 	bl	80006bc <__aeabi_l2d>
 8009452:	4602      	mov	r2, r0
 8009454:	460b      	mov	r3, r1
 8009456:	4620      	mov	r0, r4
 8009458:	4629      	mov	r1, r5
 800945a:	f7f6 ffa5 	bl	80003a8 <__aeabi_dsub>
 800945e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009460:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009464:	ea43 0308 	orr.w	r3, r3, r8
 8009468:	4313      	orrs	r3, r2
 800946a:	4604      	mov	r4, r0
 800946c:	460d      	mov	r5, r1
 800946e:	d066      	beq.n	800953e <_strtod_l+0xb8e>
 8009470:	a309      	add	r3, pc, #36	; (adr r3, 8009498 <_strtod_l+0xae8>)
 8009472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009476:	f7f7 fbc1 	bl	8000bfc <__aeabi_dcmplt>
 800947a:	2800      	cmp	r0, #0
 800947c:	f47f ace2 	bne.w	8008e44 <_strtod_l+0x494>
 8009480:	a307      	add	r3, pc, #28	; (adr r3, 80094a0 <_strtod_l+0xaf0>)
 8009482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009486:	4620      	mov	r0, r4
 8009488:	4629      	mov	r1, r5
 800948a:	f7f7 fbd5 	bl	8000c38 <__aeabi_dcmpgt>
 800948e:	2800      	cmp	r0, #0
 8009490:	f43f af7b 	beq.w	800938a <_strtod_l+0x9da>
 8009494:	e4d6      	b.n	8008e44 <_strtod_l+0x494>
 8009496:	bf00      	nop
 8009498:	94a03595 	.word	0x94a03595
 800949c:	3fdfffff 	.word	0x3fdfffff
 80094a0:	35afe535 	.word	0x35afe535
 80094a4:	3fe00000 	.word	0x3fe00000
 80094a8:	000fffff 	.word	0x000fffff
 80094ac:	7ff00000 	.word	0x7ff00000
 80094b0:	7fefffff 	.word	0x7fefffff
 80094b4:	3ff00000 	.word	0x3ff00000
 80094b8:	7fe00000 	.word	0x7fe00000
 80094bc:	7c9fffff 	.word	0x7c9fffff
 80094c0:	3fe00000 	.word	0x3fe00000
 80094c4:	bff00000 	.word	0xbff00000
 80094c8:	9b05      	ldr	r3, [sp, #20]
 80094ca:	b313      	cbz	r3, 8009512 <_strtod_l+0xb62>
 80094cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80094ce:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80094d2:	d81e      	bhi.n	8009512 <_strtod_l+0xb62>
 80094d4:	a326      	add	r3, pc, #152	; (adr r3, 8009570 <_strtod_l+0xbc0>)
 80094d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094da:	4620      	mov	r0, r4
 80094dc:	4629      	mov	r1, r5
 80094de:	f7f7 fb97 	bl	8000c10 <__aeabi_dcmple>
 80094e2:	b190      	cbz	r0, 800950a <_strtod_l+0xb5a>
 80094e4:	4629      	mov	r1, r5
 80094e6:	4620      	mov	r0, r4
 80094e8:	f7f7 fbee 	bl	8000cc8 <__aeabi_d2uiz>
 80094ec:	2801      	cmp	r0, #1
 80094ee:	bf38      	it	cc
 80094f0:	2001      	movcc	r0, #1
 80094f2:	f7f7 f897 	bl	8000624 <__aeabi_ui2d>
 80094f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80094f8:	4604      	mov	r4, r0
 80094fa:	460d      	mov	r5, r1
 80094fc:	b9d3      	cbnz	r3, 8009534 <_strtod_l+0xb84>
 80094fe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009502:	9012      	str	r0, [sp, #72]	; 0x48
 8009504:	9313      	str	r3, [sp, #76]	; 0x4c
 8009506:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800950a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800950c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8009510:	1a9f      	subs	r7, r3, r2
 8009512:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009516:	f001 fe69 	bl	800b1ec <__ulp>
 800951a:	4602      	mov	r2, r0
 800951c:	460b      	mov	r3, r1
 800951e:	4630      	mov	r0, r6
 8009520:	4639      	mov	r1, r7
 8009522:	f7f7 f8f9 	bl	8000718 <__aeabi_dmul>
 8009526:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800952a:	f7f6 ff3f 	bl	80003ac <__adddf3>
 800952e:	4680      	mov	r8, r0
 8009530:	4689      	mov	r9, r1
 8009532:	e77e      	b.n	8009432 <_strtod_l+0xa82>
 8009534:	4602      	mov	r2, r0
 8009536:	460b      	mov	r3, r1
 8009538:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800953c:	e7e3      	b.n	8009506 <_strtod_l+0xb56>
 800953e:	a30e      	add	r3, pc, #56	; (adr r3, 8009578 <_strtod_l+0xbc8>)
 8009540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009544:	f7f7 fb5a 	bl	8000bfc <__aeabi_dcmplt>
 8009548:	e7a1      	b.n	800948e <_strtod_l+0xade>
 800954a:	2300      	movs	r3, #0
 800954c:	930a      	str	r3, [sp, #40]	; 0x28
 800954e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009550:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009552:	6013      	str	r3, [r2, #0]
 8009554:	f7ff ba71 	b.w	8008a3a <_strtod_l+0x8a>
 8009558:	2a65      	cmp	r2, #101	; 0x65
 800955a:	f43f ab63 	beq.w	8008c24 <_strtod_l+0x274>
 800955e:	2a45      	cmp	r2, #69	; 0x45
 8009560:	f43f ab60 	beq.w	8008c24 <_strtod_l+0x274>
 8009564:	2301      	movs	r3, #1
 8009566:	f7ff bb95 	b.w	8008c94 <_strtod_l+0x2e4>
 800956a:	bf00      	nop
 800956c:	f3af 8000 	nop.w
 8009570:	ffc00000 	.word	0xffc00000
 8009574:	41dfffff 	.word	0x41dfffff
 8009578:	94a03595 	.word	0x94a03595
 800957c:	3fcfffff 	.word	0x3fcfffff

08009580 <_strtod_r>:
 8009580:	4b01      	ldr	r3, [pc, #4]	; (8009588 <_strtod_r+0x8>)
 8009582:	f7ff ba15 	b.w	80089b0 <_strtod_l>
 8009586:	bf00      	nop
 8009588:	20000078 	.word	0x20000078

0800958c <_strtol_l.constprop.0>:
 800958c:	2b01      	cmp	r3, #1
 800958e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009592:	4680      	mov	r8, r0
 8009594:	d001      	beq.n	800959a <_strtol_l.constprop.0+0xe>
 8009596:	2b24      	cmp	r3, #36	; 0x24
 8009598:	d906      	bls.n	80095a8 <_strtol_l.constprop.0+0x1c>
 800959a:	f7fe faa5 	bl	8007ae8 <__errno>
 800959e:	2316      	movs	r3, #22
 80095a0:	6003      	str	r3, [r0, #0]
 80095a2:	2000      	movs	r0, #0
 80095a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095a8:	460d      	mov	r5, r1
 80095aa:	4f35      	ldr	r7, [pc, #212]	; (8009680 <_strtol_l.constprop.0+0xf4>)
 80095ac:	4628      	mov	r0, r5
 80095ae:	f815 4b01 	ldrb.w	r4, [r5], #1
 80095b2:	5de6      	ldrb	r6, [r4, r7]
 80095b4:	f016 0608 	ands.w	r6, r6, #8
 80095b8:	d1f8      	bne.n	80095ac <_strtol_l.constprop.0+0x20>
 80095ba:	2c2d      	cmp	r4, #45	; 0x2d
 80095bc:	d12f      	bne.n	800961e <_strtol_l.constprop.0+0x92>
 80095be:	2601      	movs	r6, #1
 80095c0:	782c      	ldrb	r4, [r5, #0]
 80095c2:	1c85      	adds	r5, r0, #2
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d057      	beq.n	8009678 <_strtol_l.constprop.0+0xec>
 80095c8:	2b10      	cmp	r3, #16
 80095ca:	d109      	bne.n	80095e0 <_strtol_l.constprop.0+0x54>
 80095cc:	2c30      	cmp	r4, #48	; 0x30
 80095ce:	d107      	bne.n	80095e0 <_strtol_l.constprop.0+0x54>
 80095d0:	7828      	ldrb	r0, [r5, #0]
 80095d2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80095d6:	2858      	cmp	r0, #88	; 0x58
 80095d8:	d149      	bne.n	800966e <_strtol_l.constprop.0+0xe2>
 80095da:	2310      	movs	r3, #16
 80095dc:	786c      	ldrb	r4, [r5, #1]
 80095de:	3502      	adds	r5, #2
 80095e0:	2700      	movs	r7, #0
 80095e2:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 80095e6:	f10e 3eff 	add.w	lr, lr, #4294967295
 80095ea:	fbbe f9f3 	udiv	r9, lr, r3
 80095ee:	4638      	mov	r0, r7
 80095f0:	fb03 ea19 	mls	sl, r3, r9, lr
 80095f4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80095f8:	f1bc 0f09 	cmp.w	ip, #9
 80095fc:	d814      	bhi.n	8009628 <_strtol_l.constprop.0+0x9c>
 80095fe:	4664      	mov	r4, ip
 8009600:	42a3      	cmp	r3, r4
 8009602:	dd22      	ble.n	800964a <_strtol_l.constprop.0+0xbe>
 8009604:	2f00      	cmp	r7, #0
 8009606:	db1d      	blt.n	8009644 <_strtol_l.constprop.0+0xb8>
 8009608:	4581      	cmp	r9, r0
 800960a:	d31b      	bcc.n	8009644 <_strtol_l.constprop.0+0xb8>
 800960c:	d101      	bne.n	8009612 <_strtol_l.constprop.0+0x86>
 800960e:	45a2      	cmp	sl, r4
 8009610:	db18      	blt.n	8009644 <_strtol_l.constprop.0+0xb8>
 8009612:	2701      	movs	r7, #1
 8009614:	fb00 4003 	mla	r0, r0, r3, r4
 8009618:	f815 4b01 	ldrb.w	r4, [r5], #1
 800961c:	e7ea      	b.n	80095f4 <_strtol_l.constprop.0+0x68>
 800961e:	2c2b      	cmp	r4, #43	; 0x2b
 8009620:	bf04      	itt	eq
 8009622:	782c      	ldrbeq	r4, [r5, #0]
 8009624:	1c85      	addeq	r5, r0, #2
 8009626:	e7cd      	b.n	80095c4 <_strtol_l.constprop.0+0x38>
 8009628:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800962c:	f1bc 0f19 	cmp.w	ip, #25
 8009630:	d801      	bhi.n	8009636 <_strtol_l.constprop.0+0xaa>
 8009632:	3c37      	subs	r4, #55	; 0x37
 8009634:	e7e4      	b.n	8009600 <_strtol_l.constprop.0+0x74>
 8009636:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800963a:	f1bc 0f19 	cmp.w	ip, #25
 800963e:	d804      	bhi.n	800964a <_strtol_l.constprop.0+0xbe>
 8009640:	3c57      	subs	r4, #87	; 0x57
 8009642:	e7dd      	b.n	8009600 <_strtol_l.constprop.0+0x74>
 8009644:	f04f 37ff 	mov.w	r7, #4294967295
 8009648:	e7e6      	b.n	8009618 <_strtol_l.constprop.0+0x8c>
 800964a:	2f00      	cmp	r7, #0
 800964c:	da07      	bge.n	800965e <_strtol_l.constprop.0+0xd2>
 800964e:	2322      	movs	r3, #34	; 0x22
 8009650:	4670      	mov	r0, lr
 8009652:	f8c8 3000 	str.w	r3, [r8]
 8009656:	2a00      	cmp	r2, #0
 8009658:	d0a4      	beq.n	80095a4 <_strtol_l.constprop.0+0x18>
 800965a:	1e69      	subs	r1, r5, #1
 800965c:	e005      	b.n	800966a <_strtol_l.constprop.0+0xde>
 800965e:	b106      	cbz	r6, 8009662 <_strtol_l.constprop.0+0xd6>
 8009660:	4240      	negs	r0, r0
 8009662:	2a00      	cmp	r2, #0
 8009664:	d09e      	beq.n	80095a4 <_strtol_l.constprop.0+0x18>
 8009666:	2f00      	cmp	r7, #0
 8009668:	d1f7      	bne.n	800965a <_strtol_l.constprop.0+0xce>
 800966a:	6011      	str	r1, [r2, #0]
 800966c:	e79a      	b.n	80095a4 <_strtol_l.constprop.0+0x18>
 800966e:	2430      	movs	r4, #48	; 0x30
 8009670:	2b00      	cmp	r3, #0
 8009672:	d1b5      	bne.n	80095e0 <_strtol_l.constprop.0+0x54>
 8009674:	2308      	movs	r3, #8
 8009676:	e7b3      	b.n	80095e0 <_strtol_l.constprop.0+0x54>
 8009678:	2c30      	cmp	r4, #48	; 0x30
 800967a:	d0a9      	beq.n	80095d0 <_strtol_l.constprop.0+0x44>
 800967c:	230a      	movs	r3, #10
 800967e:	e7af      	b.n	80095e0 <_strtol_l.constprop.0+0x54>
 8009680:	0800cd69 	.word	0x0800cd69

08009684 <_strtol_r>:
 8009684:	f7ff bf82 	b.w	800958c <_strtol_l.constprop.0>

08009688 <_write_r>:
 8009688:	b538      	push	{r3, r4, r5, lr}
 800968a:	4604      	mov	r4, r0
 800968c:	4608      	mov	r0, r1
 800968e:	4611      	mov	r1, r2
 8009690:	2200      	movs	r2, #0
 8009692:	4d05      	ldr	r5, [pc, #20]	; (80096a8 <_write_r+0x20>)
 8009694:	602a      	str	r2, [r5, #0]
 8009696:	461a      	mov	r2, r3
 8009698:	f7f9 fd54 	bl	8003144 <_write>
 800969c:	1c43      	adds	r3, r0, #1
 800969e:	d102      	bne.n	80096a6 <_write_r+0x1e>
 80096a0:	682b      	ldr	r3, [r5, #0]
 80096a2:	b103      	cbz	r3, 80096a6 <_write_r+0x1e>
 80096a4:	6023      	str	r3, [r4, #0]
 80096a6:	bd38      	pop	{r3, r4, r5, pc}
 80096a8:	20000738 	.word	0x20000738

080096ac <_close_r>:
 80096ac:	b538      	push	{r3, r4, r5, lr}
 80096ae:	2300      	movs	r3, #0
 80096b0:	4d05      	ldr	r5, [pc, #20]	; (80096c8 <_close_r+0x1c>)
 80096b2:	4604      	mov	r4, r0
 80096b4:	4608      	mov	r0, r1
 80096b6:	602b      	str	r3, [r5, #0]
 80096b8:	f7f9 fd60 	bl	800317c <_close>
 80096bc:	1c43      	adds	r3, r0, #1
 80096be:	d102      	bne.n	80096c6 <_close_r+0x1a>
 80096c0:	682b      	ldr	r3, [r5, #0]
 80096c2:	b103      	cbz	r3, 80096c6 <_close_r+0x1a>
 80096c4:	6023      	str	r3, [r4, #0]
 80096c6:	bd38      	pop	{r3, r4, r5, pc}
 80096c8:	20000738 	.word	0x20000738

080096cc <quorem>:
 80096cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096d0:	6903      	ldr	r3, [r0, #16]
 80096d2:	690c      	ldr	r4, [r1, #16]
 80096d4:	4607      	mov	r7, r0
 80096d6:	42a3      	cmp	r3, r4
 80096d8:	f2c0 8082 	blt.w	80097e0 <quorem+0x114>
 80096dc:	3c01      	subs	r4, #1
 80096de:	f100 0514 	add.w	r5, r0, #20
 80096e2:	f101 0814 	add.w	r8, r1, #20
 80096e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80096ea:	9301      	str	r3, [sp, #4]
 80096ec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80096f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80096f4:	3301      	adds	r3, #1
 80096f6:	429a      	cmp	r2, r3
 80096f8:	fbb2 f6f3 	udiv	r6, r2, r3
 80096fc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009700:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009704:	d331      	bcc.n	800976a <quorem+0x9e>
 8009706:	f04f 0e00 	mov.w	lr, #0
 800970a:	4640      	mov	r0, r8
 800970c:	46ac      	mov	ip, r5
 800970e:	46f2      	mov	sl, lr
 8009710:	f850 2b04 	ldr.w	r2, [r0], #4
 8009714:	b293      	uxth	r3, r2
 8009716:	fb06 e303 	mla	r3, r6, r3, lr
 800971a:	0c12      	lsrs	r2, r2, #16
 800971c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009720:	b29b      	uxth	r3, r3
 8009722:	fb06 e202 	mla	r2, r6, r2, lr
 8009726:	ebaa 0303 	sub.w	r3, sl, r3
 800972a:	f8dc a000 	ldr.w	sl, [ip]
 800972e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009732:	fa1f fa8a 	uxth.w	sl, sl
 8009736:	4453      	add	r3, sl
 8009738:	f8dc a000 	ldr.w	sl, [ip]
 800973c:	b292      	uxth	r2, r2
 800973e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009742:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009746:	b29b      	uxth	r3, r3
 8009748:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800974c:	4581      	cmp	r9, r0
 800974e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009752:	f84c 3b04 	str.w	r3, [ip], #4
 8009756:	d2db      	bcs.n	8009710 <quorem+0x44>
 8009758:	f855 300b 	ldr.w	r3, [r5, fp]
 800975c:	b92b      	cbnz	r3, 800976a <quorem+0x9e>
 800975e:	9b01      	ldr	r3, [sp, #4]
 8009760:	3b04      	subs	r3, #4
 8009762:	429d      	cmp	r5, r3
 8009764:	461a      	mov	r2, r3
 8009766:	d32f      	bcc.n	80097c8 <quorem+0xfc>
 8009768:	613c      	str	r4, [r7, #16]
 800976a:	4638      	mov	r0, r7
 800976c:	f001 fc96 	bl	800b09c <__mcmp>
 8009770:	2800      	cmp	r0, #0
 8009772:	db25      	blt.n	80097c0 <quorem+0xf4>
 8009774:	4628      	mov	r0, r5
 8009776:	f04f 0c00 	mov.w	ip, #0
 800977a:	3601      	adds	r6, #1
 800977c:	f858 1b04 	ldr.w	r1, [r8], #4
 8009780:	f8d0 e000 	ldr.w	lr, [r0]
 8009784:	b28b      	uxth	r3, r1
 8009786:	ebac 0303 	sub.w	r3, ip, r3
 800978a:	fa1f f28e 	uxth.w	r2, lr
 800978e:	4413      	add	r3, r2
 8009790:	0c0a      	lsrs	r2, r1, #16
 8009792:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009796:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800979a:	b29b      	uxth	r3, r3
 800979c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80097a0:	45c1      	cmp	r9, r8
 80097a2:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80097a6:	f840 3b04 	str.w	r3, [r0], #4
 80097aa:	d2e7      	bcs.n	800977c <quorem+0xb0>
 80097ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80097b0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80097b4:	b922      	cbnz	r2, 80097c0 <quorem+0xf4>
 80097b6:	3b04      	subs	r3, #4
 80097b8:	429d      	cmp	r5, r3
 80097ba:	461a      	mov	r2, r3
 80097bc:	d30a      	bcc.n	80097d4 <quorem+0x108>
 80097be:	613c      	str	r4, [r7, #16]
 80097c0:	4630      	mov	r0, r6
 80097c2:	b003      	add	sp, #12
 80097c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097c8:	6812      	ldr	r2, [r2, #0]
 80097ca:	3b04      	subs	r3, #4
 80097cc:	2a00      	cmp	r2, #0
 80097ce:	d1cb      	bne.n	8009768 <quorem+0x9c>
 80097d0:	3c01      	subs	r4, #1
 80097d2:	e7c6      	b.n	8009762 <quorem+0x96>
 80097d4:	6812      	ldr	r2, [r2, #0]
 80097d6:	3b04      	subs	r3, #4
 80097d8:	2a00      	cmp	r2, #0
 80097da:	d1f0      	bne.n	80097be <quorem+0xf2>
 80097dc:	3c01      	subs	r4, #1
 80097de:	e7eb      	b.n	80097b8 <quorem+0xec>
 80097e0:	2000      	movs	r0, #0
 80097e2:	e7ee      	b.n	80097c2 <quorem+0xf6>
 80097e4:	0000      	movs	r0, r0
	...

080097e8 <_dtoa_r>:
 80097e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097ec:	4616      	mov	r6, r2
 80097ee:	461f      	mov	r7, r3
 80097f0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80097f2:	b099      	sub	sp, #100	; 0x64
 80097f4:	4605      	mov	r5, r0
 80097f6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80097fa:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80097fe:	b974      	cbnz	r4, 800981e <_dtoa_r+0x36>
 8009800:	2010      	movs	r0, #16
 8009802:	f001 f95b 	bl	800aabc <malloc>
 8009806:	4602      	mov	r2, r0
 8009808:	6268      	str	r0, [r5, #36]	; 0x24
 800980a:	b920      	cbnz	r0, 8009816 <_dtoa_r+0x2e>
 800980c:	21ea      	movs	r1, #234	; 0xea
 800980e:	4ba8      	ldr	r3, [pc, #672]	; (8009ab0 <_dtoa_r+0x2c8>)
 8009810:	48a8      	ldr	r0, [pc, #672]	; (8009ab4 <_dtoa_r+0x2cc>)
 8009812:	f002 fcd3 	bl	800c1bc <__assert_func>
 8009816:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800981a:	6004      	str	r4, [r0, #0]
 800981c:	60c4      	str	r4, [r0, #12]
 800981e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009820:	6819      	ldr	r1, [r3, #0]
 8009822:	b151      	cbz	r1, 800983a <_dtoa_r+0x52>
 8009824:	685a      	ldr	r2, [r3, #4]
 8009826:	2301      	movs	r3, #1
 8009828:	4093      	lsls	r3, r2
 800982a:	604a      	str	r2, [r1, #4]
 800982c:	608b      	str	r3, [r1, #8]
 800982e:	4628      	mov	r0, r5
 8009830:	f001 f9ac 	bl	800ab8c <_Bfree>
 8009834:	2200      	movs	r2, #0
 8009836:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009838:	601a      	str	r2, [r3, #0]
 800983a:	1e3b      	subs	r3, r7, #0
 800983c:	bfaf      	iteee	ge
 800983e:	2300      	movge	r3, #0
 8009840:	2201      	movlt	r2, #1
 8009842:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009846:	9305      	strlt	r3, [sp, #20]
 8009848:	bfa8      	it	ge
 800984a:	f8c8 3000 	strge.w	r3, [r8]
 800984e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8009852:	4b99      	ldr	r3, [pc, #612]	; (8009ab8 <_dtoa_r+0x2d0>)
 8009854:	bfb8      	it	lt
 8009856:	f8c8 2000 	strlt.w	r2, [r8]
 800985a:	ea33 0309 	bics.w	r3, r3, r9
 800985e:	d119      	bne.n	8009894 <_dtoa_r+0xac>
 8009860:	f242 730f 	movw	r3, #9999	; 0x270f
 8009864:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009866:	6013      	str	r3, [r2, #0]
 8009868:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800986c:	4333      	orrs	r3, r6
 800986e:	f000 857f 	beq.w	800a370 <_dtoa_r+0xb88>
 8009872:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009874:	b953      	cbnz	r3, 800988c <_dtoa_r+0xa4>
 8009876:	4b91      	ldr	r3, [pc, #580]	; (8009abc <_dtoa_r+0x2d4>)
 8009878:	e022      	b.n	80098c0 <_dtoa_r+0xd8>
 800987a:	4b91      	ldr	r3, [pc, #580]	; (8009ac0 <_dtoa_r+0x2d8>)
 800987c:	9303      	str	r3, [sp, #12]
 800987e:	3308      	adds	r3, #8
 8009880:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009882:	6013      	str	r3, [r2, #0]
 8009884:	9803      	ldr	r0, [sp, #12]
 8009886:	b019      	add	sp, #100	; 0x64
 8009888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800988c:	4b8b      	ldr	r3, [pc, #556]	; (8009abc <_dtoa_r+0x2d4>)
 800988e:	9303      	str	r3, [sp, #12]
 8009890:	3303      	adds	r3, #3
 8009892:	e7f5      	b.n	8009880 <_dtoa_r+0x98>
 8009894:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009898:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800989c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80098a0:	2200      	movs	r2, #0
 80098a2:	2300      	movs	r3, #0
 80098a4:	f7f7 f9a0 	bl	8000be8 <__aeabi_dcmpeq>
 80098a8:	4680      	mov	r8, r0
 80098aa:	b158      	cbz	r0, 80098c4 <_dtoa_r+0xdc>
 80098ac:	2301      	movs	r3, #1
 80098ae:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80098b0:	6013      	str	r3, [r2, #0]
 80098b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	f000 8558 	beq.w	800a36a <_dtoa_r+0xb82>
 80098ba:	4882      	ldr	r0, [pc, #520]	; (8009ac4 <_dtoa_r+0x2dc>)
 80098bc:	6018      	str	r0, [r3, #0]
 80098be:	1e43      	subs	r3, r0, #1
 80098c0:	9303      	str	r3, [sp, #12]
 80098c2:	e7df      	b.n	8009884 <_dtoa_r+0x9c>
 80098c4:	ab16      	add	r3, sp, #88	; 0x58
 80098c6:	9301      	str	r3, [sp, #4]
 80098c8:	ab17      	add	r3, sp, #92	; 0x5c
 80098ca:	9300      	str	r3, [sp, #0]
 80098cc:	4628      	mov	r0, r5
 80098ce:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80098d2:	f001 fd05 	bl	800b2e0 <__d2b>
 80098d6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80098da:	4683      	mov	fp, r0
 80098dc:	2c00      	cmp	r4, #0
 80098de:	d07f      	beq.n	80099e0 <_dtoa_r+0x1f8>
 80098e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80098e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80098e6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80098ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80098ee:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80098f2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80098f6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80098fa:	2200      	movs	r2, #0
 80098fc:	4b72      	ldr	r3, [pc, #456]	; (8009ac8 <_dtoa_r+0x2e0>)
 80098fe:	f7f6 fd53 	bl	80003a8 <__aeabi_dsub>
 8009902:	a365      	add	r3, pc, #404	; (adr r3, 8009a98 <_dtoa_r+0x2b0>)
 8009904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009908:	f7f6 ff06 	bl	8000718 <__aeabi_dmul>
 800990c:	a364      	add	r3, pc, #400	; (adr r3, 8009aa0 <_dtoa_r+0x2b8>)
 800990e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009912:	f7f6 fd4b 	bl	80003ac <__adddf3>
 8009916:	4606      	mov	r6, r0
 8009918:	4620      	mov	r0, r4
 800991a:	460f      	mov	r7, r1
 800991c:	f7f6 fe92 	bl	8000644 <__aeabi_i2d>
 8009920:	a361      	add	r3, pc, #388	; (adr r3, 8009aa8 <_dtoa_r+0x2c0>)
 8009922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009926:	f7f6 fef7 	bl	8000718 <__aeabi_dmul>
 800992a:	4602      	mov	r2, r0
 800992c:	460b      	mov	r3, r1
 800992e:	4630      	mov	r0, r6
 8009930:	4639      	mov	r1, r7
 8009932:	f7f6 fd3b 	bl	80003ac <__adddf3>
 8009936:	4606      	mov	r6, r0
 8009938:	460f      	mov	r7, r1
 800993a:	f7f7 f99d 	bl	8000c78 <__aeabi_d2iz>
 800993e:	2200      	movs	r2, #0
 8009940:	4682      	mov	sl, r0
 8009942:	2300      	movs	r3, #0
 8009944:	4630      	mov	r0, r6
 8009946:	4639      	mov	r1, r7
 8009948:	f7f7 f958 	bl	8000bfc <__aeabi_dcmplt>
 800994c:	b148      	cbz	r0, 8009962 <_dtoa_r+0x17a>
 800994e:	4650      	mov	r0, sl
 8009950:	f7f6 fe78 	bl	8000644 <__aeabi_i2d>
 8009954:	4632      	mov	r2, r6
 8009956:	463b      	mov	r3, r7
 8009958:	f7f7 f946 	bl	8000be8 <__aeabi_dcmpeq>
 800995c:	b908      	cbnz	r0, 8009962 <_dtoa_r+0x17a>
 800995e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009962:	f1ba 0f16 	cmp.w	sl, #22
 8009966:	d858      	bhi.n	8009a1a <_dtoa_r+0x232>
 8009968:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800996c:	4b57      	ldr	r3, [pc, #348]	; (8009acc <_dtoa_r+0x2e4>)
 800996e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009976:	f7f7 f941 	bl	8000bfc <__aeabi_dcmplt>
 800997a:	2800      	cmp	r0, #0
 800997c:	d04f      	beq.n	8009a1e <_dtoa_r+0x236>
 800997e:	2300      	movs	r3, #0
 8009980:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009984:	930f      	str	r3, [sp, #60]	; 0x3c
 8009986:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009988:	1b1c      	subs	r4, r3, r4
 800998a:	1e63      	subs	r3, r4, #1
 800998c:	9309      	str	r3, [sp, #36]	; 0x24
 800998e:	bf49      	itett	mi
 8009990:	f1c4 0301 	rsbmi	r3, r4, #1
 8009994:	2300      	movpl	r3, #0
 8009996:	9306      	strmi	r3, [sp, #24]
 8009998:	2300      	movmi	r3, #0
 800999a:	bf54      	ite	pl
 800999c:	9306      	strpl	r3, [sp, #24]
 800999e:	9309      	strmi	r3, [sp, #36]	; 0x24
 80099a0:	f1ba 0f00 	cmp.w	sl, #0
 80099a4:	db3d      	blt.n	8009a22 <_dtoa_r+0x23a>
 80099a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099a8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80099ac:	4453      	add	r3, sl
 80099ae:	9309      	str	r3, [sp, #36]	; 0x24
 80099b0:	2300      	movs	r3, #0
 80099b2:	930a      	str	r3, [sp, #40]	; 0x28
 80099b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80099b6:	2b09      	cmp	r3, #9
 80099b8:	f200 808c 	bhi.w	8009ad4 <_dtoa_r+0x2ec>
 80099bc:	2b05      	cmp	r3, #5
 80099be:	bfc4      	itt	gt
 80099c0:	3b04      	subgt	r3, #4
 80099c2:	9322      	strgt	r3, [sp, #136]	; 0x88
 80099c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80099c6:	bfc8      	it	gt
 80099c8:	2400      	movgt	r4, #0
 80099ca:	f1a3 0302 	sub.w	r3, r3, #2
 80099ce:	bfd8      	it	le
 80099d0:	2401      	movle	r4, #1
 80099d2:	2b03      	cmp	r3, #3
 80099d4:	f200 808a 	bhi.w	8009aec <_dtoa_r+0x304>
 80099d8:	e8df f003 	tbb	[pc, r3]
 80099dc:	5b4d4f2d 	.word	0x5b4d4f2d
 80099e0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80099e4:	441c      	add	r4, r3
 80099e6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80099ea:	2b20      	cmp	r3, #32
 80099ec:	bfc3      	ittte	gt
 80099ee:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80099f2:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80099f6:	fa09 f303 	lslgt.w	r3, r9, r3
 80099fa:	f1c3 0320 	rsble	r3, r3, #32
 80099fe:	bfc6      	itte	gt
 8009a00:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009a04:	4318      	orrgt	r0, r3
 8009a06:	fa06 f003 	lslle.w	r0, r6, r3
 8009a0a:	f7f6 fe0b 	bl	8000624 <__aeabi_ui2d>
 8009a0e:	2301      	movs	r3, #1
 8009a10:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8009a14:	3c01      	subs	r4, #1
 8009a16:	9313      	str	r3, [sp, #76]	; 0x4c
 8009a18:	e76f      	b.n	80098fa <_dtoa_r+0x112>
 8009a1a:	2301      	movs	r3, #1
 8009a1c:	e7b2      	b.n	8009984 <_dtoa_r+0x19c>
 8009a1e:	900f      	str	r0, [sp, #60]	; 0x3c
 8009a20:	e7b1      	b.n	8009986 <_dtoa_r+0x19e>
 8009a22:	9b06      	ldr	r3, [sp, #24]
 8009a24:	eba3 030a 	sub.w	r3, r3, sl
 8009a28:	9306      	str	r3, [sp, #24]
 8009a2a:	f1ca 0300 	rsb	r3, sl, #0
 8009a2e:	930a      	str	r3, [sp, #40]	; 0x28
 8009a30:	2300      	movs	r3, #0
 8009a32:	930e      	str	r3, [sp, #56]	; 0x38
 8009a34:	e7be      	b.n	80099b4 <_dtoa_r+0x1cc>
 8009a36:	2300      	movs	r3, #0
 8009a38:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a3a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	dc58      	bgt.n	8009af2 <_dtoa_r+0x30a>
 8009a40:	f04f 0901 	mov.w	r9, #1
 8009a44:	464b      	mov	r3, r9
 8009a46:	f8cd 9020 	str.w	r9, [sp, #32]
 8009a4a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8009a4e:	2200      	movs	r2, #0
 8009a50:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8009a52:	6042      	str	r2, [r0, #4]
 8009a54:	2204      	movs	r2, #4
 8009a56:	f102 0614 	add.w	r6, r2, #20
 8009a5a:	429e      	cmp	r6, r3
 8009a5c:	6841      	ldr	r1, [r0, #4]
 8009a5e:	d94e      	bls.n	8009afe <_dtoa_r+0x316>
 8009a60:	4628      	mov	r0, r5
 8009a62:	f001 f853 	bl	800ab0c <_Balloc>
 8009a66:	9003      	str	r0, [sp, #12]
 8009a68:	2800      	cmp	r0, #0
 8009a6a:	d14c      	bne.n	8009b06 <_dtoa_r+0x31e>
 8009a6c:	4602      	mov	r2, r0
 8009a6e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009a72:	4b17      	ldr	r3, [pc, #92]	; (8009ad0 <_dtoa_r+0x2e8>)
 8009a74:	e6cc      	b.n	8009810 <_dtoa_r+0x28>
 8009a76:	2301      	movs	r3, #1
 8009a78:	e7de      	b.n	8009a38 <_dtoa_r+0x250>
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a7e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009a80:	eb0a 0903 	add.w	r9, sl, r3
 8009a84:	f109 0301 	add.w	r3, r9, #1
 8009a88:	2b01      	cmp	r3, #1
 8009a8a:	9308      	str	r3, [sp, #32]
 8009a8c:	bfb8      	it	lt
 8009a8e:	2301      	movlt	r3, #1
 8009a90:	e7dd      	b.n	8009a4e <_dtoa_r+0x266>
 8009a92:	2301      	movs	r3, #1
 8009a94:	e7f2      	b.n	8009a7c <_dtoa_r+0x294>
 8009a96:	bf00      	nop
 8009a98:	636f4361 	.word	0x636f4361
 8009a9c:	3fd287a7 	.word	0x3fd287a7
 8009aa0:	8b60c8b3 	.word	0x8b60c8b3
 8009aa4:	3fc68a28 	.word	0x3fc68a28
 8009aa8:	509f79fb 	.word	0x509f79fb
 8009aac:	3fd34413 	.word	0x3fd34413
 8009ab0:	0800ce76 	.word	0x0800ce76
 8009ab4:	0800ce8d 	.word	0x0800ce8d
 8009ab8:	7ff00000 	.word	0x7ff00000
 8009abc:	0800ce72 	.word	0x0800ce72
 8009ac0:	0800ce69 	.word	0x0800ce69
 8009ac4:	0800d0e2 	.word	0x0800d0e2
 8009ac8:	3ff80000 	.word	0x3ff80000
 8009acc:	0800cff8 	.word	0x0800cff8
 8009ad0:	0800cee8 	.word	0x0800cee8
 8009ad4:	2401      	movs	r4, #1
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	940b      	str	r4, [sp, #44]	; 0x2c
 8009ada:	9322      	str	r3, [sp, #136]	; 0x88
 8009adc:	f04f 39ff 	mov.w	r9, #4294967295
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	2312      	movs	r3, #18
 8009ae4:	f8cd 9020 	str.w	r9, [sp, #32]
 8009ae8:	9223      	str	r2, [sp, #140]	; 0x8c
 8009aea:	e7b0      	b.n	8009a4e <_dtoa_r+0x266>
 8009aec:	2301      	movs	r3, #1
 8009aee:	930b      	str	r3, [sp, #44]	; 0x2c
 8009af0:	e7f4      	b.n	8009adc <_dtoa_r+0x2f4>
 8009af2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8009af6:	464b      	mov	r3, r9
 8009af8:	f8cd 9020 	str.w	r9, [sp, #32]
 8009afc:	e7a7      	b.n	8009a4e <_dtoa_r+0x266>
 8009afe:	3101      	adds	r1, #1
 8009b00:	6041      	str	r1, [r0, #4]
 8009b02:	0052      	lsls	r2, r2, #1
 8009b04:	e7a7      	b.n	8009a56 <_dtoa_r+0x26e>
 8009b06:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009b08:	9a03      	ldr	r2, [sp, #12]
 8009b0a:	601a      	str	r2, [r3, #0]
 8009b0c:	9b08      	ldr	r3, [sp, #32]
 8009b0e:	2b0e      	cmp	r3, #14
 8009b10:	f200 80a8 	bhi.w	8009c64 <_dtoa_r+0x47c>
 8009b14:	2c00      	cmp	r4, #0
 8009b16:	f000 80a5 	beq.w	8009c64 <_dtoa_r+0x47c>
 8009b1a:	f1ba 0f00 	cmp.w	sl, #0
 8009b1e:	dd34      	ble.n	8009b8a <_dtoa_r+0x3a2>
 8009b20:	4a9a      	ldr	r2, [pc, #616]	; (8009d8c <_dtoa_r+0x5a4>)
 8009b22:	f00a 030f 	and.w	r3, sl, #15
 8009b26:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009b2a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009b2e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009b32:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009b36:	ea4f 142a 	mov.w	r4, sl, asr #4
 8009b3a:	d016      	beq.n	8009b6a <_dtoa_r+0x382>
 8009b3c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009b40:	4b93      	ldr	r3, [pc, #588]	; (8009d90 <_dtoa_r+0x5a8>)
 8009b42:	2703      	movs	r7, #3
 8009b44:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009b48:	f7f6 ff10 	bl	800096c <__aeabi_ddiv>
 8009b4c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009b50:	f004 040f 	and.w	r4, r4, #15
 8009b54:	4e8e      	ldr	r6, [pc, #568]	; (8009d90 <_dtoa_r+0x5a8>)
 8009b56:	b954      	cbnz	r4, 8009b6e <_dtoa_r+0x386>
 8009b58:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009b5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009b60:	f7f6 ff04 	bl	800096c <__aeabi_ddiv>
 8009b64:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009b68:	e029      	b.n	8009bbe <_dtoa_r+0x3d6>
 8009b6a:	2702      	movs	r7, #2
 8009b6c:	e7f2      	b.n	8009b54 <_dtoa_r+0x36c>
 8009b6e:	07e1      	lsls	r1, r4, #31
 8009b70:	d508      	bpl.n	8009b84 <_dtoa_r+0x39c>
 8009b72:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009b76:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009b7a:	f7f6 fdcd 	bl	8000718 <__aeabi_dmul>
 8009b7e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009b82:	3701      	adds	r7, #1
 8009b84:	1064      	asrs	r4, r4, #1
 8009b86:	3608      	adds	r6, #8
 8009b88:	e7e5      	b.n	8009b56 <_dtoa_r+0x36e>
 8009b8a:	f000 80a5 	beq.w	8009cd8 <_dtoa_r+0x4f0>
 8009b8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009b92:	f1ca 0400 	rsb	r4, sl, #0
 8009b96:	4b7d      	ldr	r3, [pc, #500]	; (8009d8c <_dtoa_r+0x5a4>)
 8009b98:	f004 020f 	and.w	r2, r4, #15
 8009b9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ba4:	f7f6 fdb8 	bl	8000718 <__aeabi_dmul>
 8009ba8:	2702      	movs	r7, #2
 8009baa:	2300      	movs	r3, #0
 8009bac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009bb0:	4e77      	ldr	r6, [pc, #476]	; (8009d90 <_dtoa_r+0x5a8>)
 8009bb2:	1124      	asrs	r4, r4, #4
 8009bb4:	2c00      	cmp	r4, #0
 8009bb6:	f040 8084 	bne.w	8009cc2 <_dtoa_r+0x4da>
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d1d2      	bne.n	8009b64 <_dtoa_r+0x37c>
 8009bbe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	f000 808b 	beq.w	8009cdc <_dtoa_r+0x4f4>
 8009bc6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009bca:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009bce:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	4b6f      	ldr	r3, [pc, #444]	; (8009d94 <_dtoa_r+0x5ac>)
 8009bd6:	f7f7 f811 	bl	8000bfc <__aeabi_dcmplt>
 8009bda:	2800      	cmp	r0, #0
 8009bdc:	d07e      	beq.n	8009cdc <_dtoa_r+0x4f4>
 8009bde:	9b08      	ldr	r3, [sp, #32]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d07b      	beq.n	8009cdc <_dtoa_r+0x4f4>
 8009be4:	f1b9 0f00 	cmp.w	r9, #0
 8009be8:	dd38      	ble.n	8009c5c <_dtoa_r+0x474>
 8009bea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009bee:	2200      	movs	r2, #0
 8009bf0:	4b69      	ldr	r3, [pc, #420]	; (8009d98 <_dtoa_r+0x5b0>)
 8009bf2:	f7f6 fd91 	bl	8000718 <__aeabi_dmul>
 8009bf6:	464c      	mov	r4, r9
 8009bf8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009bfc:	f10a 38ff 	add.w	r8, sl, #4294967295
 8009c00:	3701      	adds	r7, #1
 8009c02:	4638      	mov	r0, r7
 8009c04:	f7f6 fd1e 	bl	8000644 <__aeabi_i2d>
 8009c08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009c0c:	f7f6 fd84 	bl	8000718 <__aeabi_dmul>
 8009c10:	2200      	movs	r2, #0
 8009c12:	4b62      	ldr	r3, [pc, #392]	; (8009d9c <_dtoa_r+0x5b4>)
 8009c14:	f7f6 fbca 	bl	80003ac <__adddf3>
 8009c18:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009c1c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009c20:	9611      	str	r6, [sp, #68]	; 0x44
 8009c22:	2c00      	cmp	r4, #0
 8009c24:	d15d      	bne.n	8009ce2 <_dtoa_r+0x4fa>
 8009c26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	4b5c      	ldr	r3, [pc, #368]	; (8009da0 <_dtoa_r+0x5b8>)
 8009c2e:	f7f6 fbbb 	bl	80003a8 <__aeabi_dsub>
 8009c32:	4602      	mov	r2, r0
 8009c34:	460b      	mov	r3, r1
 8009c36:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009c3a:	4633      	mov	r3, r6
 8009c3c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009c3e:	f7f6 fffb 	bl	8000c38 <__aeabi_dcmpgt>
 8009c42:	2800      	cmp	r0, #0
 8009c44:	f040 829c 	bne.w	800a180 <_dtoa_r+0x998>
 8009c48:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009c4c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009c4e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009c52:	f7f6 ffd3 	bl	8000bfc <__aeabi_dcmplt>
 8009c56:	2800      	cmp	r0, #0
 8009c58:	f040 8290 	bne.w	800a17c <_dtoa_r+0x994>
 8009c5c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8009c60:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009c64:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	f2c0 8152 	blt.w	8009f10 <_dtoa_r+0x728>
 8009c6c:	f1ba 0f0e 	cmp.w	sl, #14
 8009c70:	f300 814e 	bgt.w	8009f10 <_dtoa_r+0x728>
 8009c74:	4b45      	ldr	r3, [pc, #276]	; (8009d8c <_dtoa_r+0x5a4>)
 8009c76:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009c7a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009c7e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8009c82:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	f280 80db 	bge.w	8009e40 <_dtoa_r+0x658>
 8009c8a:	9b08      	ldr	r3, [sp, #32]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	f300 80d7 	bgt.w	8009e40 <_dtoa_r+0x658>
 8009c92:	f040 8272 	bne.w	800a17a <_dtoa_r+0x992>
 8009c96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	4b40      	ldr	r3, [pc, #256]	; (8009da0 <_dtoa_r+0x5b8>)
 8009c9e:	f7f6 fd3b 	bl	8000718 <__aeabi_dmul>
 8009ca2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009ca6:	f7f6 ffbd 	bl	8000c24 <__aeabi_dcmpge>
 8009caa:	9c08      	ldr	r4, [sp, #32]
 8009cac:	4626      	mov	r6, r4
 8009cae:	2800      	cmp	r0, #0
 8009cb0:	f040 8248 	bne.w	800a144 <_dtoa_r+0x95c>
 8009cb4:	2331      	movs	r3, #49	; 0x31
 8009cb6:	9f03      	ldr	r7, [sp, #12]
 8009cb8:	f10a 0a01 	add.w	sl, sl, #1
 8009cbc:	f807 3b01 	strb.w	r3, [r7], #1
 8009cc0:	e244      	b.n	800a14c <_dtoa_r+0x964>
 8009cc2:	07e2      	lsls	r2, r4, #31
 8009cc4:	d505      	bpl.n	8009cd2 <_dtoa_r+0x4ea>
 8009cc6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009cca:	f7f6 fd25 	bl	8000718 <__aeabi_dmul>
 8009cce:	2301      	movs	r3, #1
 8009cd0:	3701      	adds	r7, #1
 8009cd2:	1064      	asrs	r4, r4, #1
 8009cd4:	3608      	adds	r6, #8
 8009cd6:	e76d      	b.n	8009bb4 <_dtoa_r+0x3cc>
 8009cd8:	2702      	movs	r7, #2
 8009cda:	e770      	b.n	8009bbe <_dtoa_r+0x3d6>
 8009cdc:	46d0      	mov	r8, sl
 8009cde:	9c08      	ldr	r4, [sp, #32]
 8009ce0:	e78f      	b.n	8009c02 <_dtoa_r+0x41a>
 8009ce2:	9903      	ldr	r1, [sp, #12]
 8009ce4:	4b29      	ldr	r3, [pc, #164]	; (8009d8c <_dtoa_r+0x5a4>)
 8009ce6:	4421      	add	r1, r4
 8009ce8:	9112      	str	r1, [sp, #72]	; 0x48
 8009cea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009cec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009cf0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8009cf4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009cf8:	2900      	cmp	r1, #0
 8009cfa:	d055      	beq.n	8009da8 <_dtoa_r+0x5c0>
 8009cfc:	2000      	movs	r0, #0
 8009cfe:	4929      	ldr	r1, [pc, #164]	; (8009da4 <_dtoa_r+0x5bc>)
 8009d00:	f7f6 fe34 	bl	800096c <__aeabi_ddiv>
 8009d04:	463b      	mov	r3, r7
 8009d06:	4632      	mov	r2, r6
 8009d08:	f7f6 fb4e 	bl	80003a8 <__aeabi_dsub>
 8009d0c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009d10:	9f03      	ldr	r7, [sp, #12]
 8009d12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009d16:	f7f6 ffaf 	bl	8000c78 <__aeabi_d2iz>
 8009d1a:	4604      	mov	r4, r0
 8009d1c:	f7f6 fc92 	bl	8000644 <__aeabi_i2d>
 8009d20:	4602      	mov	r2, r0
 8009d22:	460b      	mov	r3, r1
 8009d24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009d28:	f7f6 fb3e 	bl	80003a8 <__aeabi_dsub>
 8009d2c:	4602      	mov	r2, r0
 8009d2e:	460b      	mov	r3, r1
 8009d30:	3430      	adds	r4, #48	; 0x30
 8009d32:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009d36:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009d3a:	f807 4b01 	strb.w	r4, [r7], #1
 8009d3e:	f7f6 ff5d 	bl	8000bfc <__aeabi_dcmplt>
 8009d42:	2800      	cmp	r0, #0
 8009d44:	d174      	bne.n	8009e30 <_dtoa_r+0x648>
 8009d46:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d4a:	2000      	movs	r0, #0
 8009d4c:	4911      	ldr	r1, [pc, #68]	; (8009d94 <_dtoa_r+0x5ac>)
 8009d4e:	f7f6 fb2b 	bl	80003a8 <__aeabi_dsub>
 8009d52:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009d56:	f7f6 ff51 	bl	8000bfc <__aeabi_dcmplt>
 8009d5a:	2800      	cmp	r0, #0
 8009d5c:	f040 80b7 	bne.w	8009ece <_dtoa_r+0x6e6>
 8009d60:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009d62:	429f      	cmp	r7, r3
 8009d64:	f43f af7a 	beq.w	8009c5c <_dtoa_r+0x474>
 8009d68:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	4b0a      	ldr	r3, [pc, #40]	; (8009d98 <_dtoa_r+0x5b0>)
 8009d70:	f7f6 fcd2 	bl	8000718 <__aeabi_dmul>
 8009d74:	2200      	movs	r2, #0
 8009d76:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009d7a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009d7e:	4b06      	ldr	r3, [pc, #24]	; (8009d98 <_dtoa_r+0x5b0>)
 8009d80:	f7f6 fcca 	bl	8000718 <__aeabi_dmul>
 8009d84:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009d88:	e7c3      	b.n	8009d12 <_dtoa_r+0x52a>
 8009d8a:	bf00      	nop
 8009d8c:	0800cff8 	.word	0x0800cff8
 8009d90:	0800cfd0 	.word	0x0800cfd0
 8009d94:	3ff00000 	.word	0x3ff00000
 8009d98:	40240000 	.word	0x40240000
 8009d9c:	401c0000 	.word	0x401c0000
 8009da0:	40140000 	.word	0x40140000
 8009da4:	3fe00000 	.word	0x3fe00000
 8009da8:	4630      	mov	r0, r6
 8009daa:	4639      	mov	r1, r7
 8009dac:	f7f6 fcb4 	bl	8000718 <__aeabi_dmul>
 8009db0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009db2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009db6:	9c03      	ldr	r4, [sp, #12]
 8009db8:	9314      	str	r3, [sp, #80]	; 0x50
 8009dba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009dbe:	f7f6 ff5b 	bl	8000c78 <__aeabi_d2iz>
 8009dc2:	9015      	str	r0, [sp, #84]	; 0x54
 8009dc4:	f7f6 fc3e 	bl	8000644 <__aeabi_i2d>
 8009dc8:	4602      	mov	r2, r0
 8009dca:	460b      	mov	r3, r1
 8009dcc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009dd0:	f7f6 faea 	bl	80003a8 <__aeabi_dsub>
 8009dd4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009dd6:	4606      	mov	r6, r0
 8009dd8:	3330      	adds	r3, #48	; 0x30
 8009dda:	f804 3b01 	strb.w	r3, [r4], #1
 8009dde:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009de0:	460f      	mov	r7, r1
 8009de2:	429c      	cmp	r4, r3
 8009de4:	f04f 0200 	mov.w	r2, #0
 8009de8:	d124      	bne.n	8009e34 <_dtoa_r+0x64c>
 8009dea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009dee:	4bb0      	ldr	r3, [pc, #704]	; (800a0b0 <_dtoa_r+0x8c8>)
 8009df0:	f7f6 fadc 	bl	80003ac <__adddf3>
 8009df4:	4602      	mov	r2, r0
 8009df6:	460b      	mov	r3, r1
 8009df8:	4630      	mov	r0, r6
 8009dfa:	4639      	mov	r1, r7
 8009dfc:	f7f6 ff1c 	bl	8000c38 <__aeabi_dcmpgt>
 8009e00:	2800      	cmp	r0, #0
 8009e02:	d163      	bne.n	8009ecc <_dtoa_r+0x6e4>
 8009e04:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009e08:	2000      	movs	r0, #0
 8009e0a:	49a9      	ldr	r1, [pc, #676]	; (800a0b0 <_dtoa_r+0x8c8>)
 8009e0c:	f7f6 facc 	bl	80003a8 <__aeabi_dsub>
 8009e10:	4602      	mov	r2, r0
 8009e12:	460b      	mov	r3, r1
 8009e14:	4630      	mov	r0, r6
 8009e16:	4639      	mov	r1, r7
 8009e18:	f7f6 fef0 	bl	8000bfc <__aeabi_dcmplt>
 8009e1c:	2800      	cmp	r0, #0
 8009e1e:	f43f af1d 	beq.w	8009c5c <_dtoa_r+0x474>
 8009e22:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8009e24:	1e7b      	subs	r3, r7, #1
 8009e26:	9314      	str	r3, [sp, #80]	; 0x50
 8009e28:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8009e2c:	2b30      	cmp	r3, #48	; 0x30
 8009e2e:	d0f8      	beq.n	8009e22 <_dtoa_r+0x63a>
 8009e30:	46c2      	mov	sl, r8
 8009e32:	e03b      	b.n	8009eac <_dtoa_r+0x6c4>
 8009e34:	4b9f      	ldr	r3, [pc, #636]	; (800a0b4 <_dtoa_r+0x8cc>)
 8009e36:	f7f6 fc6f 	bl	8000718 <__aeabi_dmul>
 8009e3a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009e3e:	e7bc      	b.n	8009dba <_dtoa_r+0x5d2>
 8009e40:	9f03      	ldr	r7, [sp, #12]
 8009e42:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009e46:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009e4a:	4640      	mov	r0, r8
 8009e4c:	4649      	mov	r1, r9
 8009e4e:	f7f6 fd8d 	bl	800096c <__aeabi_ddiv>
 8009e52:	f7f6 ff11 	bl	8000c78 <__aeabi_d2iz>
 8009e56:	4604      	mov	r4, r0
 8009e58:	f7f6 fbf4 	bl	8000644 <__aeabi_i2d>
 8009e5c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009e60:	f7f6 fc5a 	bl	8000718 <__aeabi_dmul>
 8009e64:	4602      	mov	r2, r0
 8009e66:	460b      	mov	r3, r1
 8009e68:	4640      	mov	r0, r8
 8009e6a:	4649      	mov	r1, r9
 8009e6c:	f7f6 fa9c 	bl	80003a8 <__aeabi_dsub>
 8009e70:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8009e74:	f807 6b01 	strb.w	r6, [r7], #1
 8009e78:	9e03      	ldr	r6, [sp, #12]
 8009e7a:	f8dd c020 	ldr.w	ip, [sp, #32]
 8009e7e:	1bbe      	subs	r6, r7, r6
 8009e80:	45b4      	cmp	ip, r6
 8009e82:	4602      	mov	r2, r0
 8009e84:	460b      	mov	r3, r1
 8009e86:	d136      	bne.n	8009ef6 <_dtoa_r+0x70e>
 8009e88:	f7f6 fa90 	bl	80003ac <__adddf3>
 8009e8c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009e90:	4680      	mov	r8, r0
 8009e92:	4689      	mov	r9, r1
 8009e94:	f7f6 fed0 	bl	8000c38 <__aeabi_dcmpgt>
 8009e98:	bb58      	cbnz	r0, 8009ef2 <_dtoa_r+0x70a>
 8009e9a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009e9e:	4640      	mov	r0, r8
 8009ea0:	4649      	mov	r1, r9
 8009ea2:	f7f6 fea1 	bl	8000be8 <__aeabi_dcmpeq>
 8009ea6:	b108      	cbz	r0, 8009eac <_dtoa_r+0x6c4>
 8009ea8:	07e1      	lsls	r1, r4, #31
 8009eaa:	d422      	bmi.n	8009ef2 <_dtoa_r+0x70a>
 8009eac:	4628      	mov	r0, r5
 8009eae:	4659      	mov	r1, fp
 8009eb0:	f000 fe6c 	bl	800ab8c <_Bfree>
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	703b      	strb	r3, [r7, #0]
 8009eb8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009eba:	f10a 0001 	add.w	r0, sl, #1
 8009ebe:	6018      	str	r0, [r3, #0]
 8009ec0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	f43f acde 	beq.w	8009884 <_dtoa_r+0x9c>
 8009ec8:	601f      	str	r7, [r3, #0]
 8009eca:	e4db      	b.n	8009884 <_dtoa_r+0x9c>
 8009ecc:	4627      	mov	r7, r4
 8009ece:	463b      	mov	r3, r7
 8009ed0:	461f      	mov	r7, r3
 8009ed2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009ed6:	2a39      	cmp	r2, #57	; 0x39
 8009ed8:	d107      	bne.n	8009eea <_dtoa_r+0x702>
 8009eda:	9a03      	ldr	r2, [sp, #12]
 8009edc:	429a      	cmp	r2, r3
 8009ede:	d1f7      	bne.n	8009ed0 <_dtoa_r+0x6e8>
 8009ee0:	2230      	movs	r2, #48	; 0x30
 8009ee2:	9903      	ldr	r1, [sp, #12]
 8009ee4:	f108 0801 	add.w	r8, r8, #1
 8009ee8:	700a      	strb	r2, [r1, #0]
 8009eea:	781a      	ldrb	r2, [r3, #0]
 8009eec:	3201      	adds	r2, #1
 8009eee:	701a      	strb	r2, [r3, #0]
 8009ef0:	e79e      	b.n	8009e30 <_dtoa_r+0x648>
 8009ef2:	46d0      	mov	r8, sl
 8009ef4:	e7eb      	b.n	8009ece <_dtoa_r+0x6e6>
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	4b6e      	ldr	r3, [pc, #440]	; (800a0b4 <_dtoa_r+0x8cc>)
 8009efa:	f7f6 fc0d 	bl	8000718 <__aeabi_dmul>
 8009efe:	2200      	movs	r2, #0
 8009f00:	2300      	movs	r3, #0
 8009f02:	4680      	mov	r8, r0
 8009f04:	4689      	mov	r9, r1
 8009f06:	f7f6 fe6f 	bl	8000be8 <__aeabi_dcmpeq>
 8009f0a:	2800      	cmp	r0, #0
 8009f0c:	d09b      	beq.n	8009e46 <_dtoa_r+0x65e>
 8009f0e:	e7cd      	b.n	8009eac <_dtoa_r+0x6c4>
 8009f10:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009f12:	2a00      	cmp	r2, #0
 8009f14:	f000 80d0 	beq.w	800a0b8 <_dtoa_r+0x8d0>
 8009f18:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009f1a:	2a01      	cmp	r2, #1
 8009f1c:	f300 80ae 	bgt.w	800a07c <_dtoa_r+0x894>
 8009f20:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009f22:	2a00      	cmp	r2, #0
 8009f24:	f000 80a6 	beq.w	800a074 <_dtoa_r+0x88c>
 8009f28:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009f2c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009f2e:	9f06      	ldr	r7, [sp, #24]
 8009f30:	9a06      	ldr	r2, [sp, #24]
 8009f32:	2101      	movs	r1, #1
 8009f34:	441a      	add	r2, r3
 8009f36:	9206      	str	r2, [sp, #24]
 8009f38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f3a:	4628      	mov	r0, r5
 8009f3c:	441a      	add	r2, r3
 8009f3e:	9209      	str	r2, [sp, #36]	; 0x24
 8009f40:	f000 ff24 	bl	800ad8c <__i2b>
 8009f44:	4606      	mov	r6, r0
 8009f46:	2f00      	cmp	r7, #0
 8009f48:	dd0c      	ble.n	8009f64 <_dtoa_r+0x77c>
 8009f4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	dd09      	ble.n	8009f64 <_dtoa_r+0x77c>
 8009f50:	42bb      	cmp	r3, r7
 8009f52:	bfa8      	it	ge
 8009f54:	463b      	movge	r3, r7
 8009f56:	9a06      	ldr	r2, [sp, #24]
 8009f58:	1aff      	subs	r7, r7, r3
 8009f5a:	1ad2      	subs	r2, r2, r3
 8009f5c:	9206      	str	r2, [sp, #24]
 8009f5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f60:	1ad3      	subs	r3, r2, r3
 8009f62:	9309      	str	r3, [sp, #36]	; 0x24
 8009f64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f66:	b1f3      	cbz	r3, 8009fa6 <_dtoa_r+0x7be>
 8009f68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	f000 80a8 	beq.w	800a0c0 <_dtoa_r+0x8d8>
 8009f70:	2c00      	cmp	r4, #0
 8009f72:	dd10      	ble.n	8009f96 <_dtoa_r+0x7ae>
 8009f74:	4631      	mov	r1, r6
 8009f76:	4622      	mov	r2, r4
 8009f78:	4628      	mov	r0, r5
 8009f7a:	f000 ffc5 	bl	800af08 <__pow5mult>
 8009f7e:	465a      	mov	r2, fp
 8009f80:	4601      	mov	r1, r0
 8009f82:	4606      	mov	r6, r0
 8009f84:	4628      	mov	r0, r5
 8009f86:	f000 ff17 	bl	800adb8 <__multiply>
 8009f8a:	4680      	mov	r8, r0
 8009f8c:	4659      	mov	r1, fp
 8009f8e:	4628      	mov	r0, r5
 8009f90:	f000 fdfc 	bl	800ab8c <_Bfree>
 8009f94:	46c3      	mov	fp, r8
 8009f96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f98:	1b1a      	subs	r2, r3, r4
 8009f9a:	d004      	beq.n	8009fa6 <_dtoa_r+0x7be>
 8009f9c:	4659      	mov	r1, fp
 8009f9e:	4628      	mov	r0, r5
 8009fa0:	f000 ffb2 	bl	800af08 <__pow5mult>
 8009fa4:	4683      	mov	fp, r0
 8009fa6:	2101      	movs	r1, #1
 8009fa8:	4628      	mov	r0, r5
 8009faa:	f000 feef 	bl	800ad8c <__i2b>
 8009fae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009fb0:	4604      	mov	r4, r0
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	f340 8086 	ble.w	800a0c4 <_dtoa_r+0x8dc>
 8009fb8:	461a      	mov	r2, r3
 8009fba:	4601      	mov	r1, r0
 8009fbc:	4628      	mov	r0, r5
 8009fbe:	f000 ffa3 	bl	800af08 <__pow5mult>
 8009fc2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009fc4:	4604      	mov	r4, r0
 8009fc6:	2b01      	cmp	r3, #1
 8009fc8:	dd7f      	ble.n	800a0ca <_dtoa_r+0x8e2>
 8009fca:	f04f 0800 	mov.w	r8, #0
 8009fce:	6923      	ldr	r3, [r4, #16]
 8009fd0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009fd4:	6918      	ldr	r0, [r3, #16]
 8009fd6:	f000 fe8b 	bl	800acf0 <__hi0bits>
 8009fda:	f1c0 0020 	rsb	r0, r0, #32
 8009fde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fe0:	4418      	add	r0, r3
 8009fe2:	f010 001f 	ands.w	r0, r0, #31
 8009fe6:	f000 8092 	beq.w	800a10e <_dtoa_r+0x926>
 8009fea:	f1c0 0320 	rsb	r3, r0, #32
 8009fee:	2b04      	cmp	r3, #4
 8009ff0:	f340 808a 	ble.w	800a108 <_dtoa_r+0x920>
 8009ff4:	f1c0 001c 	rsb	r0, r0, #28
 8009ff8:	9b06      	ldr	r3, [sp, #24]
 8009ffa:	4407      	add	r7, r0
 8009ffc:	4403      	add	r3, r0
 8009ffe:	9306      	str	r3, [sp, #24]
 800a000:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a002:	4403      	add	r3, r0
 800a004:	9309      	str	r3, [sp, #36]	; 0x24
 800a006:	9b06      	ldr	r3, [sp, #24]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	dd05      	ble.n	800a018 <_dtoa_r+0x830>
 800a00c:	4659      	mov	r1, fp
 800a00e:	461a      	mov	r2, r3
 800a010:	4628      	mov	r0, r5
 800a012:	f000 ffd3 	bl	800afbc <__lshift>
 800a016:	4683      	mov	fp, r0
 800a018:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	dd05      	ble.n	800a02a <_dtoa_r+0x842>
 800a01e:	4621      	mov	r1, r4
 800a020:	461a      	mov	r2, r3
 800a022:	4628      	mov	r0, r5
 800a024:	f000 ffca 	bl	800afbc <__lshift>
 800a028:	4604      	mov	r4, r0
 800a02a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d070      	beq.n	800a112 <_dtoa_r+0x92a>
 800a030:	4621      	mov	r1, r4
 800a032:	4658      	mov	r0, fp
 800a034:	f001 f832 	bl	800b09c <__mcmp>
 800a038:	2800      	cmp	r0, #0
 800a03a:	da6a      	bge.n	800a112 <_dtoa_r+0x92a>
 800a03c:	2300      	movs	r3, #0
 800a03e:	4659      	mov	r1, fp
 800a040:	220a      	movs	r2, #10
 800a042:	4628      	mov	r0, r5
 800a044:	f000 fdc4 	bl	800abd0 <__multadd>
 800a048:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a04a:	4683      	mov	fp, r0
 800a04c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a050:	2b00      	cmp	r3, #0
 800a052:	f000 8194 	beq.w	800a37e <_dtoa_r+0xb96>
 800a056:	4631      	mov	r1, r6
 800a058:	2300      	movs	r3, #0
 800a05a:	220a      	movs	r2, #10
 800a05c:	4628      	mov	r0, r5
 800a05e:	f000 fdb7 	bl	800abd0 <__multadd>
 800a062:	f1b9 0f00 	cmp.w	r9, #0
 800a066:	4606      	mov	r6, r0
 800a068:	f300 8093 	bgt.w	800a192 <_dtoa_r+0x9aa>
 800a06c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a06e:	2b02      	cmp	r3, #2
 800a070:	dc57      	bgt.n	800a122 <_dtoa_r+0x93a>
 800a072:	e08e      	b.n	800a192 <_dtoa_r+0x9aa>
 800a074:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a076:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a07a:	e757      	b.n	8009f2c <_dtoa_r+0x744>
 800a07c:	9b08      	ldr	r3, [sp, #32]
 800a07e:	1e5c      	subs	r4, r3, #1
 800a080:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a082:	42a3      	cmp	r3, r4
 800a084:	bfb7      	itett	lt
 800a086:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a088:	1b1c      	subge	r4, r3, r4
 800a08a:	1ae2      	sublt	r2, r4, r3
 800a08c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a08e:	bfbe      	ittt	lt
 800a090:	940a      	strlt	r4, [sp, #40]	; 0x28
 800a092:	189b      	addlt	r3, r3, r2
 800a094:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a096:	9b08      	ldr	r3, [sp, #32]
 800a098:	bfb8      	it	lt
 800a09a:	2400      	movlt	r4, #0
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	bfbb      	ittet	lt
 800a0a0:	9b06      	ldrlt	r3, [sp, #24]
 800a0a2:	9a08      	ldrlt	r2, [sp, #32]
 800a0a4:	9f06      	ldrge	r7, [sp, #24]
 800a0a6:	1a9f      	sublt	r7, r3, r2
 800a0a8:	bfac      	ite	ge
 800a0aa:	9b08      	ldrge	r3, [sp, #32]
 800a0ac:	2300      	movlt	r3, #0
 800a0ae:	e73f      	b.n	8009f30 <_dtoa_r+0x748>
 800a0b0:	3fe00000 	.word	0x3fe00000
 800a0b4:	40240000 	.word	0x40240000
 800a0b8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a0ba:	9f06      	ldr	r7, [sp, #24]
 800a0bc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800a0be:	e742      	b.n	8009f46 <_dtoa_r+0x75e>
 800a0c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a0c2:	e76b      	b.n	8009f9c <_dtoa_r+0x7b4>
 800a0c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a0c6:	2b01      	cmp	r3, #1
 800a0c8:	dc19      	bgt.n	800a0fe <_dtoa_r+0x916>
 800a0ca:	9b04      	ldr	r3, [sp, #16]
 800a0cc:	b9bb      	cbnz	r3, 800a0fe <_dtoa_r+0x916>
 800a0ce:	9b05      	ldr	r3, [sp, #20]
 800a0d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a0d4:	b99b      	cbnz	r3, 800a0fe <_dtoa_r+0x916>
 800a0d6:	9b05      	ldr	r3, [sp, #20]
 800a0d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a0dc:	0d1b      	lsrs	r3, r3, #20
 800a0de:	051b      	lsls	r3, r3, #20
 800a0e0:	b183      	cbz	r3, 800a104 <_dtoa_r+0x91c>
 800a0e2:	f04f 0801 	mov.w	r8, #1
 800a0e6:	9b06      	ldr	r3, [sp, #24]
 800a0e8:	3301      	adds	r3, #1
 800a0ea:	9306      	str	r3, [sp, #24]
 800a0ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0ee:	3301      	adds	r3, #1
 800a0f0:	9309      	str	r3, [sp, #36]	; 0x24
 800a0f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	f47f af6a 	bne.w	8009fce <_dtoa_r+0x7e6>
 800a0fa:	2001      	movs	r0, #1
 800a0fc:	e76f      	b.n	8009fde <_dtoa_r+0x7f6>
 800a0fe:	f04f 0800 	mov.w	r8, #0
 800a102:	e7f6      	b.n	800a0f2 <_dtoa_r+0x90a>
 800a104:	4698      	mov	r8, r3
 800a106:	e7f4      	b.n	800a0f2 <_dtoa_r+0x90a>
 800a108:	f43f af7d 	beq.w	800a006 <_dtoa_r+0x81e>
 800a10c:	4618      	mov	r0, r3
 800a10e:	301c      	adds	r0, #28
 800a110:	e772      	b.n	8009ff8 <_dtoa_r+0x810>
 800a112:	9b08      	ldr	r3, [sp, #32]
 800a114:	2b00      	cmp	r3, #0
 800a116:	dc36      	bgt.n	800a186 <_dtoa_r+0x99e>
 800a118:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a11a:	2b02      	cmp	r3, #2
 800a11c:	dd33      	ble.n	800a186 <_dtoa_r+0x99e>
 800a11e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a122:	f1b9 0f00 	cmp.w	r9, #0
 800a126:	d10d      	bne.n	800a144 <_dtoa_r+0x95c>
 800a128:	4621      	mov	r1, r4
 800a12a:	464b      	mov	r3, r9
 800a12c:	2205      	movs	r2, #5
 800a12e:	4628      	mov	r0, r5
 800a130:	f000 fd4e 	bl	800abd0 <__multadd>
 800a134:	4601      	mov	r1, r0
 800a136:	4604      	mov	r4, r0
 800a138:	4658      	mov	r0, fp
 800a13a:	f000 ffaf 	bl	800b09c <__mcmp>
 800a13e:	2800      	cmp	r0, #0
 800a140:	f73f adb8 	bgt.w	8009cb4 <_dtoa_r+0x4cc>
 800a144:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a146:	9f03      	ldr	r7, [sp, #12]
 800a148:	ea6f 0a03 	mvn.w	sl, r3
 800a14c:	f04f 0800 	mov.w	r8, #0
 800a150:	4621      	mov	r1, r4
 800a152:	4628      	mov	r0, r5
 800a154:	f000 fd1a 	bl	800ab8c <_Bfree>
 800a158:	2e00      	cmp	r6, #0
 800a15a:	f43f aea7 	beq.w	8009eac <_dtoa_r+0x6c4>
 800a15e:	f1b8 0f00 	cmp.w	r8, #0
 800a162:	d005      	beq.n	800a170 <_dtoa_r+0x988>
 800a164:	45b0      	cmp	r8, r6
 800a166:	d003      	beq.n	800a170 <_dtoa_r+0x988>
 800a168:	4641      	mov	r1, r8
 800a16a:	4628      	mov	r0, r5
 800a16c:	f000 fd0e 	bl	800ab8c <_Bfree>
 800a170:	4631      	mov	r1, r6
 800a172:	4628      	mov	r0, r5
 800a174:	f000 fd0a 	bl	800ab8c <_Bfree>
 800a178:	e698      	b.n	8009eac <_dtoa_r+0x6c4>
 800a17a:	2400      	movs	r4, #0
 800a17c:	4626      	mov	r6, r4
 800a17e:	e7e1      	b.n	800a144 <_dtoa_r+0x95c>
 800a180:	46c2      	mov	sl, r8
 800a182:	4626      	mov	r6, r4
 800a184:	e596      	b.n	8009cb4 <_dtoa_r+0x4cc>
 800a186:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a188:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	f000 80fd 	beq.w	800a38c <_dtoa_r+0xba4>
 800a192:	2f00      	cmp	r7, #0
 800a194:	dd05      	ble.n	800a1a2 <_dtoa_r+0x9ba>
 800a196:	4631      	mov	r1, r6
 800a198:	463a      	mov	r2, r7
 800a19a:	4628      	mov	r0, r5
 800a19c:	f000 ff0e 	bl	800afbc <__lshift>
 800a1a0:	4606      	mov	r6, r0
 800a1a2:	f1b8 0f00 	cmp.w	r8, #0
 800a1a6:	d05c      	beq.n	800a262 <_dtoa_r+0xa7a>
 800a1a8:	4628      	mov	r0, r5
 800a1aa:	6871      	ldr	r1, [r6, #4]
 800a1ac:	f000 fcae 	bl	800ab0c <_Balloc>
 800a1b0:	4607      	mov	r7, r0
 800a1b2:	b928      	cbnz	r0, 800a1c0 <_dtoa_r+0x9d8>
 800a1b4:	4602      	mov	r2, r0
 800a1b6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a1ba:	4b7f      	ldr	r3, [pc, #508]	; (800a3b8 <_dtoa_r+0xbd0>)
 800a1bc:	f7ff bb28 	b.w	8009810 <_dtoa_r+0x28>
 800a1c0:	6932      	ldr	r2, [r6, #16]
 800a1c2:	f106 010c 	add.w	r1, r6, #12
 800a1c6:	3202      	adds	r2, #2
 800a1c8:	0092      	lsls	r2, r2, #2
 800a1ca:	300c      	adds	r0, #12
 800a1cc:	f7fd fcb6 	bl	8007b3c <memcpy>
 800a1d0:	2201      	movs	r2, #1
 800a1d2:	4639      	mov	r1, r7
 800a1d4:	4628      	mov	r0, r5
 800a1d6:	f000 fef1 	bl	800afbc <__lshift>
 800a1da:	46b0      	mov	r8, r6
 800a1dc:	4606      	mov	r6, r0
 800a1de:	9b03      	ldr	r3, [sp, #12]
 800a1e0:	3301      	adds	r3, #1
 800a1e2:	9308      	str	r3, [sp, #32]
 800a1e4:	9b03      	ldr	r3, [sp, #12]
 800a1e6:	444b      	add	r3, r9
 800a1e8:	930a      	str	r3, [sp, #40]	; 0x28
 800a1ea:	9b04      	ldr	r3, [sp, #16]
 800a1ec:	f003 0301 	and.w	r3, r3, #1
 800a1f0:	9309      	str	r3, [sp, #36]	; 0x24
 800a1f2:	9b08      	ldr	r3, [sp, #32]
 800a1f4:	4621      	mov	r1, r4
 800a1f6:	3b01      	subs	r3, #1
 800a1f8:	4658      	mov	r0, fp
 800a1fa:	9304      	str	r3, [sp, #16]
 800a1fc:	f7ff fa66 	bl	80096cc <quorem>
 800a200:	4603      	mov	r3, r0
 800a202:	4641      	mov	r1, r8
 800a204:	3330      	adds	r3, #48	; 0x30
 800a206:	9006      	str	r0, [sp, #24]
 800a208:	4658      	mov	r0, fp
 800a20a:	930b      	str	r3, [sp, #44]	; 0x2c
 800a20c:	f000 ff46 	bl	800b09c <__mcmp>
 800a210:	4632      	mov	r2, r6
 800a212:	4681      	mov	r9, r0
 800a214:	4621      	mov	r1, r4
 800a216:	4628      	mov	r0, r5
 800a218:	f000 ff5c 	bl	800b0d4 <__mdiff>
 800a21c:	68c2      	ldr	r2, [r0, #12]
 800a21e:	4607      	mov	r7, r0
 800a220:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a222:	bb02      	cbnz	r2, 800a266 <_dtoa_r+0xa7e>
 800a224:	4601      	mov	r1, r0
 800a226:	4658      	mov	r0, fp
 800a228:	f000 ff38 	bl	800b09c <__mcmp>
 800a22c:	4602      	mov	r2, r0
 800a22e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a230:	4639      	mov	r1, r7
 800a232:	4628      	mov	r0, r5
 800a234:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800a238:	f000 fca8 	bl	800ab8c <_Bfree>
 800a23c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a23e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a240:	9f08      	ldr	r7, [sp, #32]
 800a242:	ea43 0102 	orr.w	r1, r3, r2
 800a246:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a248:	430b      	orrs	r3, r1
 800a24a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a24c:	d10d      	bne.n	800a26a <_dtoa_r+0xa82>
 800a24e:	2b39      	cmp	r3, #57	; 0x39
 800a250:	d029      	beq.n	800a2a6 <_dtoa_r+0xabe>
 800a252:	f1b9 0f00 	cmp.w	r9, #0
 800a256:	dd01      	ble.n	800a25c <_dtoa_r+0xa74>
 800a258:	9b06      	ldr	r3, [sp, #24]
 800a25a:	3331      	adds	r3, #49	; 0x31
 800a25c:	9a04      	ldr	r2, [sp, #16]
 800a25e:	7013      	strb	r3, [r2, #0]
 800a260:	e776      	b.n	800a150 <_dtoa_r+0x968>
 800a262:	4630      	mov	r0, r6
 800a264:	e7b9      	b.n	800a1da <_dtoa_r+0x9f2>
 800a266:	2201      	movs	r2, #1
 800a268:	e7e2      	b.n	800a230 <_dtoa_r+0xa48>
 800a26a:	f1b9 0f00 	cmp.w	r9, #0
 800a26e:	db06      	blt.n	800a27e <_dtoa_r+0xa96>
 800a270:	9922      	ldr	r1, [sp, #136]	; 0x88
 800a272:	ea41 0909 	orr.w	r9, r1, r9
 800a276:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a278:	ea59 0101 	orrs.w	r1, r9, r1
 800a27c:	d120      	bne.n	800a2c0 <_dtoa_r+0xad8>
 800a27e:	2a00      	cmp	r2, #0
 800a280:	ddec      	ble.n	800a25c <_dtoa_r+0xa74>
 800a282:	4659      	mov	r1, fp
 800a284:	2201      	movs	r2, #1
 800a286:	4628      	mov	r0, r5
 800a288:	9308      	str	r3, [sp, #32]
 800a28a:	f000 fe97 	bl	800afbc <__lshift>
 800a28e:	4621      	mov	r1, r4
 800a290:	4683      	mov	fp, r0
 800a292:	f000 ff03 	bl	800b09c <__mcmp>
 800a296:	2800      	cmp	r0, #0
 800a298:	9b08      	ldr	r3, [sp, #32]
 800a29a:	dc02      	bgt.n	800a2a2 <_dtoa_r+0xaba>
 800a29c:	d1de      	bne.n	800a25c <_dtoa_r+0xa74>
 800a29e:	07da      	lsls	r2, r3, #31
 800a2a0:	d5dc      	bpl.n	800a25c <_dtoa_r+0xa74>
 800a2a2:	2b39      	cmp	r3, #57	; 0x39
 800a2a4:	d1d8      	bne.n	800a258 <_dtoa_r+0xa70>
 800a2a6:	2339      	movs	r3, #57	; 0x39
 800a2a8:	9a04      	ldr	r2, [sp, #16]
 800a2aa:	7013      	strb	r3, [r2, #0]
 800a2ac:	463b      	mov	r3, r7
 800a2ae:	461f      	mov	r7, r3
 800a2b0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800a2b4:	3b01      	subs	r3, #1
 800a2b6:	2a39      	cmp	r2, #57	; 0x39
 800a2b8:	d050      	beq.n	800a35c <_dtoa_r+0xb74>
 800a2ba:	3201      	adds	r2, #1
 800a2bc:	701a      	strb	r2, [r3, #0]
 800a2be:	e747      	b.n	800a150 <_dtoa_r+0x968>
 800a2c0:	2a00      	cmp	r2, #0
 800a2c2:	dd03      	ble.n	800a2cc <_dtoa_r+0xae4>
 800a2c4:	2b39      	cmp	r3, #57	; 0x39
 800a2c6:	d0ee      	beq.n	800a2a6 <_dtoa_r+0xabe>
 800a2c8:	3301      	adds	r3, #1
 800a2ca:	e7c7      	b.n	800a25c <_dtoa_r+0xa74>
 800a2cc:	9a08      	ldr	r2, [sp, #32]
 800a2ce:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a2d0:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a2d4:	428a      	cmp	r2, r1
 800a2d6:	d02a      	beq.n	800a32e <_dtoa_r+0xb46>
 800a2d8:	4659      	mov	r1, fp
 800a2da:	2300      	movs	r3, #0
 800a2dc:	220a      	movs	r2, #10
 800a2de:	4628      	mov	r0, r5
 800a2e0:	f000 fc76 	bl	800abd0 <__multadd>
 800a2e4:	45b0      	cmp	r8, r6
 800a2e6:	4683      	mov	fp, r0
 800a2e8:	f04f 0300 	mov.w	r3, #0
 800a2ec:	f04f 020a 	mov.w	r2, #10
 800a2f0:	4641      	mov	r1, r8
 800a2f2:	4628      	mov	r0, r5
 800a2f4:	d107      	bne.n	800a306 <_dtoa_r+0xb1e>
 800a2f6:	f000 fc6b 	bl	800abd0 <__multadd>
 800a2fa:	4680      	mov	r8, r0
 800a2fc:	4606      	mov	r6, r0
 800a2fe:	9b08      	ldr	r3, [sp, #32]
 800a300:	3301      	adds	r3, #1
 800a302:	9308      	str	r3, [sp, #32]
 800a304:	e775      	b.n	800a1f2 <_dtoa_r+0xa0a>
 800a306:	f000 fc63 	bl	800abd0 <__multadd>
 800a30a:	4631      	mov	r1, r6
 800a30c:	4680      	mov	r8, r0
 800a30e:	2300      	movs	r3, #0
 800a310:	220a      	movs	r2, #10
 800a312:	4628      	mov	r0, r5
 800a314:	f000 fc5c 	bl	800abd0 <__multadd>
 800a318:	4606      	mov	r6, r0
 800a31a:	e7f0      	b.n	800a2fe <_dtoa_r+0xb16>
 800a31c:	f1b9 0f00 	cmp.w	r9, #0
 800a320:	bfcc      	ite	gt
 800a322:	464f      	movgt	r7, r9
 800a324:	2701      	movle	r7, #1
 800a326:	f04f 0800 	mov.w	r8, #0
 800a32a:	9a03      	ldr	r2, [sp, #12]
 800a32c:	4417      	add	r7, r2
 800a32e:	4659      	mov	r1, fp
 800a330:	2201      	movs	r2, #1
 800a332:	4628      	mov	r0, r5
 800a334:	9308      	str	r3, [sp, #32]
 800a336:	f000 fe41 	bl	800afbc <__lshift>
 800a33a:	4621      	mov	r1, r4
 800a33c:	4683      	mov	fp, r0
 800a33e:	f000 fead 	bl	800b09c <__mcmp>
 800a342:	2800      	cmp	r0, #0
 800a344:	dcb2      	bgt.n	800a2ac <_dtoa_r+0xac4>
 800a346:	d102      	bne.n	800a34e <_dtoa_r+0xb66>
 800a348:	9b08      	ldr	r3, [sp, #32]
 800a34a:	07db      	lsls	r3, r3, #31
 800a34c:	d4ae      	bmi.n	800a2ac <_dtoa_r+0xac4>
 800a34e:	463b      	mov	r3, r7
 800a350:	461f      	mov	r7, r3
 800a352:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a356:	2a30      	cmp	r2, #48	; 0x30
 800a358:	d0fa      	beq.n	800a350 <_dtoa_r+0xb68>
 800a35a:	e6f9      	b.n	800a150 <_dtoa_r+0x968>
 800a35c:	9a03      	ldr	r2, [sp, #12]
 800a35e:	429a      	cmp	r2, r3
 800a360:	d1a5      	bne.n	800a2ae <_dtoa_r+0xac6>
 800a362:	2331      	movs	r3, #49	; 0x31
 800a364:	f10a 0a01 	add.w	sl, sl, #1
 800a368:	e779      	b.n	800a25e <_dtoa_r+0xa76>
 800a36a:	4b14      	ldr	r3, [pc, #80]	; (800a3bc <_dtoa_r+0xbd4>)
 800a36c:	f7ff baa8 	b.w	80098c0 <_dtoa_r+0xd8>
 800a370:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a372:	2b00      	cmp	r3, #0
 800a374:	f47f aa81 	bne.w	800987a <_dtoa_r+0x92>
 800a378:	4b11      	ldr	r3, [pc, #68]	; (800a3c0 <_dtoa_r+0xbd8>)
 800a37a:	f7ff baa1 	b.w	80098c0 <_dtoa_r+0xd8>
 800a37e:	f1b9 0f00 	cmp.w	r9, #0
 800a382:	dc03      	bgt.n	800a38c <_dtoa_r+0xba4>
 800a384:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a386:	2b02      	cmp	r3, #2
 800a388:	f73f aecb 	bgt.w	800a122 <_dtoa_r+0x93a>
 800a38c:	9f03      	ldr	r7, [sp, #12]
 800a38e:	4621      	mov	r1, r4
 800a390:	4658      	mov	r0, fp
 800a392:	f7ff f99b 	bl	80096cc <quorem>
 800a396:	9a03      	ldr	r2, [sp, #12]
 800a398:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a39c:	f807 3b01 	strb.w	r3, [r7], #1
 800a3a0:	1aba      	subs	r2, r7, r2
 800a3a2:	4591      	cmp	r9, r2
 800a3a4:	ddba      	ble.n	800a31c <_dtoa_r+0xb34>
 800a3a6:	4659      	mov	r1, fp
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	220a      	movs	r2, #10
 800a3ac:	4628      	mov	r0, r5
 800a3ae:	f000 fc0f 	bl	800abd0 <__multadd>
 800a3b2:	4683      	mov	fp, r0
 800a3b4:	e7eb      	b.n	800a38e <_dtoa_r+0xba6>
 800a3b6:	bf00      	nop
 800a3b8:	0800cee8 	.word	0x0800cee8
 800a3bc:	0800d0e1 	.word	0x0800d0e1
 800a3c0:	0800ce69 	.word	0x0800ce69

0800a3c4 <rshift>:
 800a3c4:	6903      	ldr	r3, [r0, #16]
 800a3c6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a3ca:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a3ce:	f100 0414 	add.w	r4, r0, #20
 800a3d2:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a3d6:	dd46      	ble.n	800a466 <rshift+0xa2>
 800a3d8:	f011 011f 	ands.w	r1, r1, #31
 800a3dc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a3e0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a3e4:	d10c      	bne.n	800a400 <rshift+0x3c>
 800a3e6:	4629      	mov	r1, r5
 800a3e8:	f100 0710 	add.w	r7, r0, #16
 800a3ec:	42b1      	cmp	r1, r6
 800a3ee:	d335      	bcc.n	800a45c <rshift+0x98>
 800a3f0:	1a9b      	subs	r3, r3, r2
 800a3f2:	009b      	lsls	r3, r3, #2
 800a3f4:	1eea      	subs	r2, r5, #3
 800a3f6:	4296      	cmp	r6, r2
 800a3f8:	bf38      	it	cc
 800a3fa:	2300      	movcc	r3, #0
 800a3fc:	4423      	add	r3, r4
 800a3fe:	e015      	b.n	800a42c <rshift+0x68>
 800a400:	46a1      	mov	r9, r4
 800a402:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a406:	f1c1 0820 	rsb	r8, r1, #32
 800a40a:	40cf      	lsrs	r7, r1
 800a40c:	f105 0e04 	add.w	lr, r5, #4
 800a410:	4576      	cmp	r6, lr
 800a412:	46f4      	mov	ip, lr
 800a414:	d816      	bhi.n	800a444 <rshift+0x80>
 800a416:	1a9a      	subs	r2, r3, r2
 800a418:	0092      	lsls	r2, r2, #2
 800a41a:	3a04      	subs	r2, #4
 800a41c:	3501      	adds	r5, #1
 800a41e:	42ae      	cmp	r6, r5
 800a420:	bf38      	it	cc
 800a422:	2200      	movcc	r2, #0
 800a424:	18a3      	adds	r3, r4, r2
 800a426:	50a7      	str	r7, [r4, r2]
 800a428:	b107      	cbz	r7, 800a42c <rshift+0x68>
 800a42a:	3304      	adds	r3, #4
 800a42c:	42a3      	cmp	r3, r4
 800a42e:	eba3 0204 	sub.w	r2, r3, r4
 800a432:	bf08      	it	eq
 800a434:	2300      	moveq	r3, #0
 800a436:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a43a:	6102      	str	r2, [r0, #16]
 800a43c:	bf08      	it	eq
 800a43e:	6143      	streq	r3, [r0, #20]
 800a440:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a444:	f8dc c000 	ldr.w	ip, [ip]
 800a448:	fa0c fc08 	lsl.w	ip, ip, r8
 800a44c:	ea4c 0707 	orr.w	r7, ip, r7
 800a450:	f849 7b04 	str.w	r7, [r9], #4
 800a454:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a458:	40cf      	lsrs	r7, r1
 800a45a:	e7d9      	b.n	800a410 <rshift+0x4c>
 800a45c:	f851 cb04 	ldr.w	ip, [r1], #4
 800a460:	f847 cf04 	str.w	ip, [r7, #4]!
 800a464:	e7c2      	b.n	800a3ec <rshift+0x28>
 800a466:	4623      	mov	r3, r4
 800a468:	e7e0      	b.n	800a42c <rshift+0x68>

0800a46a <__hexdig_fun>:
 800a46a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a46e:	2b09      	cmp	r3, #9
 800a470:	d802      	bhi.n	800a478 <__hexdig_fun+0xe>
 800a472:	3820      	subs	r0, #32
 800a474:	b2c0      	uxtb	r0, r0
 800a476:	4770      	bx	lr
 800a478:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a47c:	2b05      	cmp	r3, #5
 800a47e:	d801      	bhi.n	800a484 <__hexdig_fun+0x1a>
 800a480:	3847      	subs	r0, #71	; 0x47
 800a482:	e7f7      	b.n	800a474 <__hexdig_fun+0xa>
 800a484:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a488:	2b05      	cmp	r3, #5
 800a48a:	d801      	bhi.n	800a490 <__hexdig_fun+0x26>
 800a48c:	3827      	subs	r0, #39	; 0x27
 800a48e:	e7f1      	b.n	800a474 <__hexdig_fun+0xa>
 800a490:	2000      	movs	r0, #0
 800a492:	4770      	bx	lr

0800a494 <__gethex>:
 800a494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a498:	b08b      	sub	sp, #44	; 0x2c
 800a49a:	9305      	str	r3, [sp, #20]
 800a49c:	4bb2      	ldr	r3, [pc, #712]	; (800a768 <__gethex+0x2d4>)
 800a49e:	9002      	str	r0, [sp, #8]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	468b      	mov	fp, r1
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	4690      	mov	r8, r2
 800a4a8:	9303      	str	r3, [sp, #12]
 800a4aa:	f7f5 febd 	bl	8000228 <strlen>
 800a4ae:	4682      	mov	sl, r0
 800a4b0:	9b03      	ldr	r3, [sp, #12]
 800a4b2:	f8db 2000 	ldr.w	r2, [fp]
 800a4b6:	4403      	add	r3, r0
 800a4b8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a4bc:	9306      	str	r3, [sp, #24]
 800a4be:	1c93      	adds	r3, r2, #2
 800a4c0:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a4c4:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a4c8:	32fe      	adds	r2, #254	; 0xfe
 800a4ca:	18d1      	adds	r1, r2, r3
 800a4cc:	461f      	mov	r7, r3
 800a4ce:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a4d2:	9101      	str	r1, [sp, #4]
 800a4d4:	2830      	cmp	r0, #48	; 0x30
 800a4d6:	d0f8      	beq.n	800a4ca <__gethex+0x36>
 800a4d8:	f7ff ffc7 	bl	800a46a <__hexdig_fun>
 800a4dc:	4604      	mov	r4, r0
 800a4de:	2800      	cmp	r0, #0
 800a4e0:	d13a      	bne.n	800a558 <__gethex+0xc4>
 800a4e2:	4652      	mov	r2, sl
 800a4e4:	4638      	mov	r0, r7
 800a4e6:	9903      	ldr	r1, [sp, #12]
 800a4e8:	f001 fd9a 	bl	800c020 <strncmp>
 800a4ec:	4605      	mov	r5, r0
 800a4ee:	2800      	cmp	r0, #0
 800a4f0:	d166      	bne.n	800a5c0 <__gethex+0x12c>
 800a4f2:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a4f6:	eb07 060a 	add.w	r6, r7, sl
 800a4fa:	f7ff ffb6 	bl	800a46a <__hexdig_fun>
 800a4fe:	2800      	cmp	r0, #0
 800a500:	d060      	beq.n	800a5c4 <__gethex+0x130>
 800a502:	4633      	mov	r3, r6
 800a504:	7818      	ldrb	r0, [r3, #0]
 800a506:	461f      	mov	r7, r3
 800a508:	2830      	cmp	r0, #48	; 0x30
 800a50a:	f103 0301 	add.w	r3, r3, #1
 800a50e:	d0f9      	beq.n	800a504 <__gethex+0x70>
 800a510:	f7ff ffab 	bl	800a46a <__hexdig_fun>
 800a514:	2301      	movs	r3, #1
 800a516:	fab0 f480 	clz	r4, r0
 800a51a:	4635      	mov	r5, r6
 800a51c:	0964      	lsrs	r4, r4, #5
 800a51e:	9301      	str	r3, [sp, #4]
 800a520:	463a      	mov	r2, r7
 800a522:	4616      	mov	r6, r2
 800a524:	7830      	ldrb	r0, [r6, #0]
 800a526:	3201      	adds	r2, #1
 800a528:	f7ff ff9f 	bl	800a46a <__hexdig_fun>
 800a52c:	2800      	cmp	r0, #0
 800a52e:	d1f8      	bne.n	800a522 <__gethex+0x8e>
 800a530:	4652      	mov	r2, sl
 800a532:	4630      	mov	r0, r6
 800a534:	9903      	ldr	r1, [sp, #12]
 800a536:	f001 fd73 	bl	800c020 <strncmp>
 800a53a:	b980      	cbnz	r0, 800a55e <__gethex+0xca>
 800a53c:	b94d      	cbnz	r5, 800a552 <__gethex+0xbe>
 800a53e:	eb06 050a 	add.w	r5, r6, sl
 800a542:	462a      	mov	r2, r5
 800a544:	4616      	mov	r6, r2
 800a546:	7830      	ldrb	r0, [r6, #0]
 800a548:	3201      	adds	r2, #1
 800a54a:	f7ff ff8e 	bl	800a46a <__hexdig_fun>
 800a54e:	2800      	cmp	r0, #0
 800a550:	d1f8      	bne.n	800a544 <__gethex+0xb0>
 800a552:	1bad      	subs	r5, r5, r6
 800a554:	00ad      	lsls	r5, r5, #2
 800a556:	e004      	b.n	800a562 <__gethex+0xce>
 800a558:	2400      	movs	r4, #0
 800a55a:	4625      	mov	r5, r4
 800a55c:	e7e0      	b.n	800a520 <__gethex+0x8c>
 800a55e:	2d00      	cmp	r5, #0
 800a560:	d1f7      	bne.n	800a552 <__gethex+0xbe>
 800a562:	7833      	ldrb	r3, [r6, #0]
 800a564:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a568:	2b50      	cmp	r3, #80	; 0x50
 800a56a:	d139      	bne.n	800a5e0 <__gethex+0x14c>
 800a56c:	7873      	ldrb	r3, [r6, #1]
 800a56e:	2b2b      	cmp	r3, #43	; 0x2b
 800a570:	d02a      	beq.n	800a5c8 <__gethex+0x134>
 800a572:	2b2d      	cmp	r3, #45	; 0x2d
 800a574:	d02c      	beq.n	800a5d0 <__gethex+0x13c>
 800a576:	f04f 0900 	mov.w	r9, #0
 800a57a:	1c71      	adds	r1, r6, #1
 800a57c:	7808      	ldrb	r0, [r1, #0]
 800a57e:	f7ff ff74 	bl	800a46a <__hexdig_fun>
 800a582:	1e43      	subs	r3, r0, #1
 800a584:	b2db      	uxtb	r3, r3
 800a586:	2b18      	cmp	r3, #24
 800a588:	d82a      	bhi.n	800a5e0 <__gethex+0x14c>
 800a58a:	f1a0 0210 	sub.w	r2, r0, #16
 800a58e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a592:	f7ff ff6a 	bl	800a46a <__hexdig_fun>
 800a596:	1e43      	subs	r3, r0, #1
 800a598:	b2db      	uxtb	r3, r3
 800a59a:	2b18      	cmp	r3, #24
 800a59c:	d91b      	bls.n	800a5d6 <__gethex+0x142>
 800a59e:	f1b9 0f00 	cmp.w	r9, #0
 800a5a2:	d000      	beq.n	800a5a6 <__gethex+0x112>
 800a5a4:	4252      	negs	r2, r2
 800a5a6:	4415      	add	r5, r2
 800a5a8:	f8cb 1000 	str.w	r1, [fp]
 800a5ac:	b1d4      	cbz	r4, 800a5e4 <__gethex+0x150>
 800a5ae:	9b01      	ldr	r3, [sp, #4]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	bf14      	ite	ne
 800a5b4:	2700      	movne	r7, #0
 800a5b6:	2706      	moveq	r7, #6
 800a5b8:	4638      	mov	r0, r7
 800a5ba:	b00b      	add	sp, #44	; 0x2c
 800a5bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5c0:	463e      	mov	r6, r7
 800a5c2:	4625      	mov	r5, r4
 800a5c4:	2401      	movs	r4, #1
 800a5c6:	e7cc      	b.n	800a562 <__gethex+0xce>
 800a5c8:	f04f 0900 	mov.w	r9, #0
 800a5cc:	1cb1      	adds	r1, r6, #2
 800a5ce:	e7d5      	b.n	800a57c <__gethex+0xe8>
 800a5d0:	f04f 0901 	mov.w	r9, #1
 800a5d4:	e7fa      	b.n	800a5cc <__gethex+0x138>
 800a5d6:	230a      	movs	r3, #10
 800a5d8:	fb03 0202 	mla	r2, r3, r2, r0
 800a5dc:	3a10      	subs	r2, #16
 800a5de:	e7d6      	b.n	800a58e <__gethex+0xfa>
 800a5e0:	4631      	mov	r1, r6
 800a5e2:	e7e1      	b.n	800a5a8 <__gethex+0x114>
 800a5e4:	4621      	mov	r1, r4
 800a5e6:	1bf3      	subs	r3, r6, r7
 800a5e8:	3b01      	subs	r3, #1
 800a5ea:	2b07      	cmp	r3, #7
 800a5ec:	dc0a      	bgt.n	800a604 <__gethex+0x170>
 800a5ee:	9802      	ldr	r0, [sp, #8]
 800a5f0:	f000 fa8c 	bl	800ab0c <_Balloc>
 800a5f4:	4604      	mov	r4, r0
 800a5f6:	b940      	cbnz	r0, 800a60a <__gethex+0x176>
 800a5f8:	4602      	mov	r2, r0
 800a5fa:	21de      	movs	r1, #222	; 0xde
 800a5fc:	4b5b      	ldr	r3, [pc, #364]	; (800a76c <__gethex+0x2d8>)
 800a5fe:	485c      	ldr	r0, [pc, #368]	; (800a770 <__gethex+0x2dc>)
 800a600:	f001 fddc 	bl	800c1bc <__assert_func>
 800a604:	3101      	adds	r1, #1
 800a606:	105b      	asrs	r3, r3, #1
 800a608:	e7ef      	b.n	800a5ea <__gethex+0x156>
 800a60a:	f04f 0b00 	mov.w	fp, #0
 800a60e:	f100 0914 	add.w	r9, r0, #20
 800a612:	f1ca 0301 	rsb	r3, sl, #1
 800a616:	f8cd 9010 	str.w	r9, [sp, #16]
 800a61a:	f8cd b004 	str.w	fp, [sp, #4]
 800a61e:	9308      	str	r3, [sp, #32]
 800a620:	42b7      	cmp	r7, r6
 800a622:	d33f      	bcc.n	800a6a4 <__gethex+0x210>
 800a624:	9f04      	ldr	r7, [sp, #16]
 800a626:	9b01      	ldr	r3, [sp, #4]
 800a628:	f847 3b04 	str.w	r3, [r7], #4
 800a62c:	eba7 0709 	sub.w	r7, r7, r9
 800a630:	10bf      	asrs	r7, r7, #2
 800a632:	6127      	str	r7, [r4, #16]
 800a634:	4618      	mov	r0, r3
 800a636:	f000 fb5b 	bl	800acf0 <__hi0bits>
 800a63a:	017f      	lsls	r7, r7, #5
 800a63c:	f8d8 6000 	ldr.w	r6, [r8]
 800a640:	1a3f      	subs	r7, r7, r0
 800a642:	42b7      	cmp	r7, r6
 800a644:	dd62      	ble.n	800a70c <__gethex+0x278>
 800a646:	1bbf      	subs	r7, r7, r6
 800a648:	4639      	mov	r1, r7
 800a64a:	4620      	mov	r0, r4
 800a64c:	f000 fef5 	bl	800b43a <__any_on>
 800a650:	4682      	mov	sl, r0
 800a652:	b1a8      	cbz	r0, 800a680 <__gethex+0x1ec>
 800a654:	f04f 0a01 	mov.w	sl, #1
 800a658:	1e7b      	subs	r3, r7, #1
 800a65a:	1159      	asrs	r1, r3, #5
 800a65c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a660:	f003 021f 	and.w	r2, r3, #31
 800a664:	fa0a f202 	lsl.w	r2, sl, r2
 800a668:	420a      	tst	r2, r1
 800a66a:	d009      	beq.n	800a680 <__gethex+0x1ec>
 800a66c:	4553      	cmp	r3, sl
 800a66e:	dd05      	ble.n	800a67c <__gethex+0x1e8>
 800a670:	4620      	mov	r0, r4
 800a672:	1eb9      	subs	r1, r7, #2
 800a674:	f000 fee1 	bl	800b43a <__any_on>
 800a678:	2800      	cmp	r0, #0
 800a67a:	d144      	bne.n	800a706 <__gethex+0x272>
 800a67c:	f04f 0a02 	mov.w	sl, #2
 800a680:	4639      	mov	r1, r7
 800a682:	4620      	mov	r0, r4
 800a684:	f7ff fe9e 	bl	800a3c4 <rshift>
 800a688:	443d      	add	r5, r7
 800a68a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a68e:	42ab      	cmp	r3, r5
 800a690:	da4a      	bge.n	800a728 <__gethex+0x294>
 800a692:	4621      	mov	r1, r4
 800a694:	9802      	ldr	r0, [sp, #8]
 800a696:	f000 fa79 	bl	800ab8c <_Bfree>
 800a69a:	2300      	movs	r3, #0
 800a69c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a69e:	27a3      	movs	r7, #163	; 0xa3
 800a6a0:	6013      	str	r3, [r2, #0]
 800a6a2:	e789      	b.n	800a5b8 <__gethex+0x124>
 800a6a4:	1e73      	subs	r3, r6, #1
 800a6a6:	9a06      	ldr	r2, [sp, #24]
 800a6a8:	9307      	str	r3, [sp, #28]
 800a6aa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a6ae:	4293      	cmp	r3, r2
 800a6b0:	d019      	beq.n	800a6e6 <__gethex+0x252>
 800a6b2:	f1bb 0f20 	cmp.w	fp, #32
 800a6b6:	d107      	bne.n	800a6c8 <__gethex+0x234>
 800a6b8:	9b04      	ldr	r3, [sp, #16]
 800a6ba:	9a01      	ldr	r2, [sp, #4]
 800a6bc:	f843 2b04 	str.w	r2, [r3], #4
 800a6c0:	9304      	str	r3, [sp, #16]
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	469b      	mov	fp, r3
 800a6c6:	9301      	str	r3, [sp, #4]
 800a6c8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a6cc:	f7ff fecd 	bl	800a46a <__hexdig_fun>
 800a6d0:	9b01      	ldr	r3, [sp, #4]
 800a6d2:	f000 000f 	and.w	r0, r0, #15
 800a6d6:	fa00 f00b 	lsl.w	r0, r0, fp
 800a6da:	4303      	orrs	r3, r0
 800a6dc:	9301      	str	r3, [sp, #4]
 800a6de:	f10b 0b04 	add.w	fp, fp, #4
 800a6e2:	9b07      	ldr	r3, [sp, #28]
 800a6e4:	e00d      	b.n	800a702 <__gethex+0x26e>
 800a6e6:	9a08      	ldr	r2, [sp, #32]
 800a6e8:	1e73      	subs	r3, r6, #1
 800a6ea:	4413      	add	r3, r2
 800a6ec:	42bb      	cmp	r3, r7
 800a6ee:	d3e0      	bcc.n	800a6b2 <__gethex+0x21e>
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	4652      	mov	r2, sl
 800a6f4:	9903      	ldr	r1, [sp, #12]
 800a6f6:	9309      	str	r3, [sp, #36]	; 0x24
 800a6f8:	f001 fc92 	bl	800c020 <strncmp>
 800a6fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6fe:	2800      	cmp	r0, #0
 800a700:	d1d7      	bne.n	800a6b2 <__gethex+0x21e>
 800a702:	461e      	mov	r6, r3
 800a704:	e78c      	b.n	800a620 <__gethex+0x18c>
 800a706:	f04f 0a03 	mov.w	sl, #3
 800a70a:	e7b9      	b.n	800a680 <__gethex+0x1ec>
 800a70c:	da09      	bge.n	800a722 <__gethex+0x28e>
 800a70e:	1bf7      	subs	r7, r6, r7
 800a710:	4621      	mov	r1, r4
 800a712:	463a      	mov	r2, r7
 800a714:	9802      	ldr	r0, [sp, #8]
 800a716:	f000 fc51 	bl	800afbc <__lshift>
 800a71a:	4604      	mov	r4, r0
 800a71c:	1bed      	subs	r5, r5, r7
 800a71e:	f100 0914 	add.w	r9, r0, #20
 800a722:	f04f 0a00 	mov.w	sl, #0
 800a726:	e7b0      	b.n	800a68a <__gethex+0x1f6>
 800a728:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a72c:	42a8      	cmp	r0, r5
 800a72e:	dd72      	ble.n	800a816 <__gethex+0x382>
 800a730:	1b45      	subs	r5, r0, r5
 800a732:	42ae      	cmp	r6, r5
 800a734:	dc35      	bgt.n	800a7a2 <__gethex+0x30e>
 800a736:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a73a:	2b02      	cmp	r3, #2
 800a73c:	d029      	beq.n	800a792 <__gethex+0x2fe>
 800a73e:	2b03      	cmp	r3, #3
 800a740:	d02b      	beq.n	800a79a <__gethex+0x306>
 800a742:	2b01      	cmp	r3, #1
 800a744:	d11c      	bne.n	800a780 <__gethex+0x2ec>
 800a746:	42ae      	cmp	r6, r5
 800a748:	d11a      	bne.n	800a780 <__gethex+0x2ec>
 800a74a:	2e01      	cmp	r6, #1
 800a74c:	d112      	bne.n	800a774 <__gethex+0x2e0>
 800a74e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a752:	9a05      	ldr	r2, [sp, #20]
 800a754:	2762      	movs	r7, #98	; 0x62
 800a756:	6013      	str	r3, [r2, #0]
 800a758:	2301      	movs	r3, #1
 800a75a:	6123      	str	r3, [r4, #16]
 800a75c:	f8c9 3000 	str.w	r3, [r9]
 800a760:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a762:	601c      	str	r4, [r3, #0]
 800a764:	e728      	b.n	800a5b8 <__gethex+0x124>
 800a766:	bf00      	nop
 800a768:	0800cf60 	.word	0x0800cf60
 800a76c:	0800cee8 	.word	0x0800cee8
 800a770:	0800cef9 	.word	0x0800cef9
 800a774:	4620      	mov	r0, r4
 800a776:	1e71      	subs	r1, r6, #1
 800a778:	f000 fe5f 	bl	800b43a <__any_on>
 800a77c:	2800      	cmp	r0, #0
 800a77e:	d1e6      	bne.n	800a74e <__gethex+0x2ba>
 800a780:	4621      	mov	r1, r4
 800a782:	9802      	ldr	r0, [sp, #8]
 800a784:	f000 fa02 	bl	800ab8c <_Bfree>
 800a788:	2300      	movs	r3, #0
 800a78a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a78c:	2750      	movs	r7, #80	; 0x50
 800a78e:	6013      	str	r3, [r2, #0]
 800a790:	e712      	b.n	800a5b8 <__gethex+0x124>
 800a792:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a794:	2b00      	cmp	r3, #0
 800a796:	d1f3      	bne.n	800a780 <__gethex+0x2ec>
 800a798:	e7d9      	b.n	800a74e <__gethex+0x2ba>
 800a79a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d1d6      	bne.n	800a74e <__gethex+0x2ba>
 800a7a0:	e7ee      	b.n	800a780 <__gethex+0x2ec>
 800a7a2:	1e6f      	subs	r7, r5, #1
 800a7a4:	f1ba 0f00 	cmp.w	sl, #0
 800a7a8:	d132      	bne.n	800a810 <__gethex+0x37c>
 800a7aa:	b127      	cbz	r7, 800a7b6 <__gethex+0x322>
 800a7ac:	4639      	mov	r1, r7
 800a7ae:	4620      	mov	r0, r4
 800a7b0:	f000 fe43 	bl	800b43a <__any_on>
 800a7b4:	4682      	mov	sl, r0
 800a7b6:	2101      	movs	r1, #1
 800a7b8:	117b      	asrs	r3, r7, #5
 800a7ba:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a7be:	f007 071f 	and.w	r7, r7, #31
 800a7c2:	fa01 f707 	lsl.w	r7, r1, r7
 800a7c6:	421f      	tst	r7, r3
 800a7c8:	f04f 0702 	mov.w	r7, #2
 800a7cc:	4629      	mov	r1, r5
 800a7ce:	4620      	mov	r0, r4
 800a7d0:	bf18      	it	ne
 800a7d2:	f04a 0a02 	orrne.w	sl, sl, #2
 800a7d6:	1b76      	subs	r6, r6, r5
 800a7d8:	f7ff fdf4 	bl	800a3c4 <rshift>
 800a7dc:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a7e0:	f1ba 0f00 	cmp.w	sl, #0
 800a7e4:	d048      	beq.n	800a878 <__gethex+0x3e4>
 800a7e6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a7ea:	2b02      	cmp	r3, #2
 800a7ec:	d015      	beq.n	800a81a <__gethex+0x386>
 800a7ee:	2b03      	cmp	r3, #3
 800a7f0:	d017      	beq.n	800a822 <__gethex+0x38e>
 800a7f2:	2b01      	cmp	r3, #1
 800a7f4:	d109      	bne.n	800a80a <__gethex+0x376>
 800a7f6:	f01a 0f02 	tst.w	sl, #2
 800a7fa:	d006      	beq.n	800a80a <__gethex+0x376>
 800a7fc:	f8d9 0000 	ldr.w	r0, [r9]
 800a800:	ea4a 0a00 	orr.w	sl, sl, r0
 800a804:	f01a 0f01 	tst.w	sl, #1
 800a808:	d10e      	bne.n	800a828 <__gethex+0x394>
 800a80a:	f047 0710 	orr.w	r7, r7, #16
 800a80e:	e033      	b.n	800a878 <__gethex+0x3e4>
 800a810:	f04f 0a01 	mov.w	sl, #1
 800a814:	e7cf      	b.n	800a7b6 <__gethex+0x322>
 800a816:	2701      	movs	r7, #1
 800a818:	e7e2      	b.n	800a7e0 <__gethex+0x34c>
 800a81a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a81c:	f1c3 0301 	rsb	r3, r3, #1
 800a820:	9315      	str	r3, [sp, #84]	; 0x54
 800a822:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a824:	2b00      	cmp	r3, #0
 800a826:	d0f0      	beq.n	800a80a <__gethex+0x376>
 800a828:	f04f 0c00 	mov.w	ip, #0
 800a82c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a830:	f104 0314 	add.w	r3, r4, #20
 800a834:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a838:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a83c:	4618      	mov	r0, r3
 800a83e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a842:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a846:	d01c      	beq.n	800a882 <__gethex+0x3ee>
 800a848:	3201      	adds	r2, #1
 800a84a:	6002      	str	r2, [r0, #0]
 800a84c:	2f02      	cmp	r7, #2
 800a84e:	f104 0314 	add.w	r3, r4, #20
 800a852:	d13d      	bne.n	800a8d0 <__gethex+0x43c>
 800a854:	f8d8 2000 	ldr.w	r2, [r8]
 800a858:	3a01      	subs	r2, #1
 800a85a:	42b2      	cmp	r2, r6
 800a85c:	d10a      	bne.n	800a874 <__gethex+0x3e0>
 800a85e:	2201      	movs	r2, #1
 800a860:	1171      	asrs	r1, r6, #5
 800a862:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a866:	f006 061f 	and.w	r6, r6, #31
 800a86a:	fa02 f606 	lsl.w	r6, r2, r6
 800a86e:	421e      	tst	r6, r3
 800a870:	bf18      	it	ne
 800a872:	4617      	movne	r7, r2
 800a874:	f047 0720 	orr.w	r7, r7, #32
 800a878:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a87a:	601c      	str	r4, [r3, #0]
 800a87c:	9b05      	ldr	r3, [sp, #20]
 800a87e:	601d      	str	r5, [r3, #0]
 800a880:	e69a      	b.n	800a5b8 <__gethex+0x124>
 800a882:	4299      	cmp	r1, r3
 800a884:	f843 cc04 	str.w	ip, [r3, #-4]
 800a888:	d8d8      	bhi.n	800a83c <__gethex+0x3a8>
 800a88a:	68a3      	ldr	r3, [r4, #8]
 800a88c:	459b      	cmp	fp, r3
 800a88e:	db17      	blt.n	800a8c0 <__gethex+0x42c>
 800a890:	6861      	ldr	r1, [r4, #4]
 800a892:	9802      	ldr	r0, [sp, #8]
 800a894:	3101      	adds	r1, #1
 800a896:	f000 f939 	bl	800ab0c <_Balloc>
 800a89a:	4681      	mov	r9, r0
 800a89c:	b918      	cbnz	r0, 800a8a6 <__gethex+0x412>
 800a89e:	4602      	mov	r2, r0
 800a8a0:	2184      	movs	r1, #132	; 0x84
 800a8a2:	4b19      	ldr	r3, [pc, #100]	; (800a908 <__gethex+0x474>)
 800a8a4:	e6ab      	b.n	800a5fe <__gethex+0x16a>
 800a8a6:	6922      	ldr	r2, [r4, #16]
 800a8a8:	f104 010c 	add.w	r1, r4, #12
 800a8ac:	3202      	adds	r2, #2
 800a8ae:	0092      	lsls	r2, r2, #2
 800a8b0:	300c      	adds	r0, #12
 800a8b2:	f7fd f943 	bl	8007b3c <memcpy>
 800a8b6:	4621      	mov	r1, r4
 800a8b8:	9802      	ldr	r0, [sp, #8]
 800a8ba:	f000 f967 	bl	800ab8c <_Bfree>
 800a8be:	464c      	mov	r4, r9
 800a8c0:	6923      	ldr	r3, [r4, #16]
 800a8c2:	1c5a      	adds	r2, r3, #1
 800a8c4:	6122      	str	r2, [r4, #16]
 800a8c6:	2201      	movs	r2, #1
 800a8c8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a8cc:	615a      	str	r2, [r3, #20]
 800a8ce:	e7bd      	b.n	800a84c <__gethex+0x3b8>
 800a8d0:	6922      	ldr	r2, [r4, #16]
 800a8d2:	455a      	cmp	r2, fp
 800a8d4:	dd0b      	ble.n	800a8ee <__gethex+0x45a>
 800a8d6:	2101      	movs	r1, #1
 800a8d8:	4620      	mov	r0, r4
 800a8da:	f7ff fd73 	bl	800a3c4 <rshift>
 800a8de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a8e2:	3501      	adds	r5, #1
 800a8e4:	42ab      	cmp	r3, r5
 800a8e6:	f6ff aed4 	blt.w	800a692 <__gethex+0x1fe>
 800a8ea:	2701      	movs	r7, #1
 800a8ec:	e7c2      	b.n	800a874 <__gethex+0x3e0>
 800a8ee:	f016 061f 	ands.w	r6, r6, #31
 800a8f2:	d0fa      	beq.n	800a8ea <__gethex+0x456>
 800a8f4:	4453      	add	r3, sl
 800a8f6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a8fa:	f000 f9f9 	bl	800acf0 <__hi0bits>
 800a8fe:	f1c6 0620 	rsb	r6, r6, #32
 800a902:	42b0      	cmp	r0, r6
 800a904:	dbe7      	blt.n	800a8d6 <__gethex+0x442>
 800a906:	e7f0      	b.n	800a8ea <__gethex+0x456>
 800a908:	0800cee8 	.word	0x0800cee8

0800a90c <L_shift>:
 800a90c:	f1c2 0208 	rsb	r2, r2, #8
 800a910:	0092      	lsls	r2, r2, #2
 800a912:	b570      	push	{r4, r5, r6, lr}
 800a914:	f1c2 0620 	rsb	r6, r2, #32
 800a918:	6843      	ldr	r3, [r0, #4]
 800a91a:	6804      	ldr	r4, [r0, #0]
 800a91c:	fa03 f506 	lsl.w	r5, r3, r6
 800a920:	432c      	orrs	r4, r5
 800a922:	40d3      	lsrs	r3, r2
 800a924:	6004      	str	r4, [r0, #0]
 800a926:	f840 3f04 	str.w	r3, [r0, #4]!
 800a92a:	4288      	cmp	r0, r1
 800a92c:	d3f4      	bcc.n	800a918 <L_shift+0xc>
 800a92e:	bd70      	pop	{r4, r5, r6, pc}

0800a930 <__match>:
 800a930:	b530      	push	{r4, r5, lr}
 800a932:	6803      	ldr	r3, [r0, #0]
 800a934:	3301      	adds	r3, #1
 800a936:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a93a:	b914      	cbnz	r4, 800a942 <__match+0x12>
 800a93c:	6003      	str	r3, [r0, #0]
 800a93e:	2001      	movs	r0, #1
 800a940:	bd30      	pop	{r4, r5, pc}
 800a942:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a946:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a94a:	2d19      	cmp	r5, #25
 800a94c:	bf98      	it	ls
 800a94e:	3220      	addls	r2, #32
 800a950:	42a2      	cmp	r2, r4
 800a952:	d0f0      	beq.n	800a936 <__match+0x6>
 800a954:	2000      	movs	r0, #0
 800a956:	e7f3      	b.n	800a940 <__match+0x10>

0800a958 <__hexnan>:
 800a958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a95c:	2500      	movs	r5, #0
 800a95e:	680b      	ldr	r3, [r1, #0]
 800a960:	4682      	mov	sl, r0
 800a962:	115e      	asrs	r6, r3, #5
 800a964:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a968:	f013 031f 	ands.w	r3, r3, #31
 800a96c:	bf18      	it	ne
 800a96e:	3604      	addne	r6, #4
 800a970:	1f37      	subs	r7, r6, #4
 800a972:	46b9      	mov	r9, r7
 800a974:	463c      	mov	r4, r7
 800a976:	46ab      	mov	fp, r5
 800a978:	b087      	sub	sp, #28
 800a97a:	4690      	mov	r8, r2
 800a97c:	6802      	ldr	r2, [r0, #0]
 800a97e:	9301      	str	r3, [sp, #4]
 800a980:	f846 5c04 	str.w	r5, [r6, #-4]
 800a984:	9502      	str	r5, [sp, #8]
 800a986:	7851      	ldrb	r1, [r2, #1]
 800a988:	1c53      	adds	r3, r2, #1
 800a98a:	9303      	str	r3, [sp, #12]
 800a98c:	b341      	cbz	r1, 800a9e0 <__hexnan+0x88>
 800a98e:	4608      	mov	r0, r1
 800a990:	9205      	str	r2, [sp, #20]
 800a992:	9104      	str	r1, [sp, #16]
 800a994:	f7ff fd69 	bl	800a46a <__hexdig_fun>
 800a998:	2800      	cmp	r0, #0
 800a99a:	d14f      	bne.n	800aa3c <__hexnan+0xe4>
 800a99c:	9904      	ldr	r1, [sp, #16]
 800a99e:	9a05      	ldr	r2, [sp, #20]
 800a9a0:	2920      	cmp	r1, #32
 800a9a2:	d818      	bhi.n	800a9d6 <__hexnan+0x7e>
 800a9a4:	9b02      	ldr	r3, [sp, #8]
 800a9a6:	459b      	cmp	fp, r3
 800a9a8:	dd13      	ble.n	800a9d2 <__hexnan+0x7a>
 800a9aa:	454c      	cmp	r4, r9
 800a9ac:	d206      	bcs.n	800a9bc <__hexnan+0x64>
 800a9ae:	2d07      	cmp	r5, #7
 800a9b0:	dc04      	bgt.n	800a9bc <__hexnan+0x64>
 800a9b2:	462a      	mov	r2, r5
 800a9b4:	4649      	mov	r1, r9
 800a9b6:	4620      	mov	r0, r4
 800a9b8:	f7ff ffa8 	bl	800a90c <L_shift>
 800a9bc:	4544      	cmp	r4, r8
 800a9be:	d950      	bls.n	800aa62 <__hexnan+0x10a>
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	f1a4 0904 	sub.w	r9, r4, #4
 800a9c6:	f844 3c04 	str.w	r3, [r4, #-4]
 800a9ca:	461d      	mov	r5, r3
 800a9cc:	464c      	mov	r4, r9
 800a9ce:	f8cd b008 	str.w	fp, [sp, #8]
 800a9d2:	9a03      	ldr	r2, [sp, #12]
 800a9d4:	e7d7      	b.n	800a986 <__hexnan+0x2e>
 800a9d6:	2929      	cmp	r1, #41	; 0x29
 800a9d8:	d156      	bne.n	800aa88 <__hexnan+0x130>
 800a9da:	3202      	adds	r2, #2
 800a9dc:	f8ca 2000 	str.w	r2, [sl]
 800a9e0:	f1bb 0f00 	cmp.w	fp, #0
 800a9e4:	d050      	beq.n	800aa88 <__hexnan+0x130>
 800a9e6:	454c      	cmp	r4, r9
 800a9e8:	d206      	bcs.n	800a9f8 <__hexnan+0xa0>
 800a9ea:	2d07      	cmp	r5, #7
 800a9ec:	dc04      	bgt.n	800a9f8 <__hexnan+0xa0>
 800a9ee:	462a      	mov	r2, r5
 800a9f0:	4649      	mov	r1, r9
 800a9f2:	4620      	mov	r0, r4
 800a9f4:	f7ff ff8a 	bl	800a90c <L_shift>
 800a9f8:	4544      	cmp	r4, r8
 800a9fa:	d934      	bls.n	800aa66 <__hexnan+0x10e>
 800a9fc:	4623      	mov	r3, r4
 800a9fe:	f1a8 0204 	sub.w	r2, r8, #4
 800aa02:	f853 1b04 	ldr.w	r1, [r3], #4
 800aa06:	429f      	cmp	r7, r3
 800aa08:	f842 1f04 	str.w	r1, [r2, #4]!
 800aa0c:	d2f9      	bcs.n	800aa02 <__hexnan+0xaa>
 800aa0e:	1b3b      	subs	r3, r7, r4
 800aa10:	f023 0303 	bic.w	r3, r3, #3
 800aa14:	3304      	adds	r3, #4
 800aa16:	3401      	adds	r4, #1
 800aa18:	3e03      	subs	r6, #3
 800aa1a:	42b4      	cmp	r4, r6
 800aa1c:	bf88      	it	hi
 800aa1e:	2304      	movhi	r3, #4
 800aa20:	2200      	movs	r2, #0
 800aa22:	4443      	add	r3, r8
 800aa24:	f843 2b04 	str.w	r2, [r3], #4
 800aa28:	429f      	cmp	r7, r3
 800aa2a:	d2fb      	bcs.n	800aa24 <__hexnan+0xcc>
 800aa2c:	683b      	ldr	r3, [r7, #0]
 800aa2e:	b91b      	cbnz	r3, 800aa38 <__hexnan+0xe0>
 800aa30:	4547      	cmp	r7, r8
 800aa32:	d127      	bne.n	800aa84 <__hexnan+0x12c>
 800aa34:	2301      	movs	r3, #1
 800aa36:	603b      	str	r3, [r7, #0]
 800aa38:	2005      	movs	r0, #5
 800aa3a:	e026      	b.n	800aa8a <__hexnan+0x132>
 800aa3c:	3501      	adds	r5, #1
 800aa3e:	2d08      	cmp	r5, #8
 800aa40:	f10b 0b01 	add.w	fp, fp, #1
 800aa44:	dd06      	ble.n	800aa54 <__hexnan+0xfc>
 800aa46:	4544      	cmp	r4, r8
 800aa48:	d9c3      	bls.n	800a9d2 <__hexnan+0x7a>
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	2501      	movs	r5, #1
 800aa4e:	f844 3c04 	str.w	r3, [r4, #-4]
 800aa52:	3c04      	subs	r4, #4
 800aa54:	6822      	ldr	r2, [r4, #0]
 800aa56:	f000 000f 	and.w	r0, r0, #15
 800aa5a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800aa5e:	6022      	str	r2, [r4, #0]
 800aa60:	e7b7      	b.n	800a9d2 <__hexnan+0x7a>
 800aa62:	2508      	movs	r5, #8
 800aa64:	e7b5      	b.n	800a9d2 <__hexnan+0x7a>
 800aa66:	9b01      	ldr	r3, [sp, #4]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d0df      	beq.n	800aa2c <__hexnan+0xd4>
 800aa6c:	f04f 32ff 	mov.w	r2, #4294967295
 800aa70:	f1c3 0320 	rsb	r3, r3, #32
 800aa74:	fa22 f303 	lsr.w	r3, r2, r3
 800aa78:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800aa7c:	401a      	ands	r2, r3
 800aa7e:	f846 2c04 	str.w	r2, [r6, #-4]
 800aa82:	e7d3      	b.n	800aa2c <__hexnan+0xd4>
 800aa84:	3f04      	subs	r7, #4
 800aa86:	e7d1      	b.n	800aa2c <__hexnan+0xd4>
 800aa88:	2004      	movs	r0, #4
 800aa8a:	b007      	add	sp, #28
 800aa8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800aa90 <_localeconv_r>:
 800aa90:	4800      	ldr	r0, [pc, #0]	; (800aa94 <_localeconv_r+0x4>)
 800aa92:	4770      	bx	lr
 800aa94:	20000168 	.word	0x20000168

0800aa98 <_lseek_r>:
 800aa98:	b538      	push	{r3, r4, r5, lr}
 800aa9a:	4604      	mov	r4, r0
 800aa9c:	4608      	mov	r0, r1
 800aa9e:	4611      	mov	r1, r2
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	4d05      	ldr	r5, [pc, #20]	; (800aab8 <_lseek_r+0x20>)
 800aaa4:	602a      	str	r2, [r5, #0]
 800aaa6:	461a      	mov	r2, r3
 800aaa8:	f7f8 fb8c 	bl	80031c4 <_lseek>
 800aaac:	1c43      	adds	r3, r0, #1
 800aaae:	d102      	bne.n	800aab6 <_lseek_r+0x1e>
 800aab0:	682b      	ldr	r3, [r5, #0]
 800aab2:	b103      	cbz	r3, 800aab6 <_lseek_r+0x1e>
 800aab4:	6023      	str	r3, [r4, #0]
 800aab6:	bd38      	pop	{r3, r4, r5, pc}
 800aab8:	20000738 	.word	0x20000738

0800aabc <malloc>:
 800aabc:	4b02      	ldr	r3, [pc, #8]	; (800aac8 <malloc+0xc>)
 800aabe:	4601      	mov	r1, r0
 800aac0:	6818      	ldr	r0, [r3, #0]
 800aac2:	f000 bd57 	b.w	800b574 <_malloc_r>
 800aac6:	bf00      	nop
 800aac8:	20000010 	.word	0x20000010

0800aacc <__ascii_mbtowc>:
 800aacc:	b082      	sub	sp, #8
 800aace:	b901      	cbnz	r1, 800aad2 <__ascii_mbtowc+0x6>
 800aad0:	a901      	add	r1, sp, #4
 800aad2:	b142      	cbz	r2, 800aae6 <__ascii_mbtowc+0x1a>
 800aad4:	b14b      	cbz	r3, 800aaea <__ascii_mbtowc+0x1e>
 800aad6:	7813      	ldrb	r3, [r2, #0]
 800aad8:	600b      	str	r3, [r1, #0]
 800aada:	7812      	ldrb	r2, [r2, #0]
 800aadc:	1e10      	subs	r0, r2, #0
 800aade:	bf18      	it	ne
 800aae0:	2001      	movne	r0, #1
 800aae2:	b002      	add	sp, #8
 800aae4:	4770      	bx	lr
 800aae6:	4610      	mov	r0, r2
 800aae8:	e7fb      	b.n	800aae2 <__ascii_mbtowc+0x16>
 800aaea:	f06f 0001 	mvn.w	r0, #1
 800aaee:	e7f8      	b.n	800aae2 <__ascii_mbtowc+0x16>

0800aaf0 <memchr>:
 800aaf0:	4603      	mov	r3, r0
 800aaf2:	b510      	push	{r4, lr}
 800aaf4:	b2c9      	uxtb	r1, r1
 800aaf6:	4402      	add	r2, r0
 800aaf8:	4293      	cmp	r3, r2
 800aafa:	4618      	mov	r0, r3
 800aafc:	d101      	bne.n	800ab02 <memchr+0x12>
 800aafe:	2000      	movs	r0, #0
 800ab00:	e003      	b.n	800ab0a <memchr+0x1a>
 800ab02:	7804      	ldrb	r4, [r0, #0]
 800ab04:	3301      	adds	r3, #1
 800ab06:	428c      	cmp	r4, r1
 800ab08:	d1f6      	bne.n	800aaf8 <memchr+0x8>
 800ab0a:	bd10      	pop	{r4, pc}

0800ab0c <_Balloc>:
 800ab0c:	b570      	push	{r4, r5, r6, lr}
 800ab0e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ab10:	4604      	mov	r4, r0
 800ab12:	460d      	mov	r5, r1
 800ab14:	b976      	cbnz	r6, 800ab34 <_Balloc+0x28>
 800ab16:	2010      	movs	r0, #16
 800ab18:	f7ff ffd0 	bl	800aabc <malloc>
 800ab1c:	4602      	mov	r2, r0
 800ab1e:	6260      	str	r0, [r4, #36]	; 0x24
 800ab20:	b920      	cbnz	r0, 800ab2c <_Balloc+0x20>
 800ab22:	2166      	movs	r1, #102	; 0x66
 800ab24:	4b17      	ldr	r3, [pc, #92]	; (800ab84 <_Balloc+0x78>)
 800ab26:	4818      	ldr	r0, [pc, #96]	; (800ab88 <_Balloc+0x7c>)
 800ab28:	f001 fb48 	bl	800c1bc <__assert_func>
 800ab2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ab30:	6006      	str	r6, [r0, #0]
 800ab32:	60c6      	str	r6, [r0, #12]
 800ab34:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ab36:	68f3      	ldr	r3, [r6, #12]
 800ab38:	b183      	cbz	r3, 800ab5c <_Balloc+0x50>
 800ab3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab3c:	68db      	ldr	r3, [r3, #12]
 800ab3e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ab42:	b9b8      	cbnz	r0, 800ab74 <_Balloc+0x68>
 800ab44:	2101      	movs	r1, #1
 800ab46:	fa01 f605 	lsl.w	r6, r1, r5
 800ab4a:	1d72      	adds	r2, r6, #5
 800ab4c:	4620      	mov	r0, r4
 800ab4e:	0092      	lsls	r2, r2, #2
 800ab50:	f000 fc94 	bl	800b47c <_calloc_r>
 800ab54:	b160      	cbz	r0, 800ab70 <_Balloc+0x64>
 800ab56:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ab5a:	e00e      	b.n	800ab7a <_Balloc+0x6e>
 800ab5c:	2221      	movs	r2, #33	; 0x21
 800ab5e:	2104      	movs	r1, #4
 800ab60:	4620      	mov	r0, r4
 800ab62:	f000 fc8b 	bl	800b47c <_calloc_r>
 800ab66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab68:	60f0      	str	r0, [r6, #12]
 800ab6a:	68db      	ldr	r3, [r3, #12]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d1e4      	bne.n	800ab3a <_Balloc+0x2e>
 800ab70:	2000      	movs	r0, #0
 800ab72:	bd70      	pop	{r4, r5, r6, pc}
 800ab74:	6802      	ldr	r2, [r0, #0]
 800ab76:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ab80:	e7f7      	b.n	800ab72 <_Balloc+0x66>
 800ab82:	bf00      	nop
 800ab84:	0800ce76 	.word	0x0800ce76
 800ab88:	0800cf74 	.word	0x0800cf74

0800ab8c <_Bfree>:
 800ab8c:	b570      	push	{r4, r5, r6, lr}
 800ab8e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ab90:	4605      	mov	r5, r0
 800ab92:	460c      	mov	r4, r1
 800ab94:	b976      	cbnz	r6, 800abb4 <_Bfree+0x28>
 800ab96:	2010      	movs	r0, #16
 800ab98:	f7ff ff90 	bl	800aabc <malloc>
 800ab9c:	4602      	mov	r2, r0
 800ab9e:	6268      	str	r0, [r5, #36]	; 0x24
 800aba0:	b920      	cbnz	r0, 800abac <_Bfree+0x20>
 800aba2:	218a      	movs	r1, #138	; 0x8a
 800aba4:	4b08      	ldr	r3, [pc, #32]	; (800abc8 <_Bfree+0x3c>)
 800aba6:	4809      	ldr	r0, [pc, #36]	; (800abcc <_Bfree+0x40>)
 800aba8:	f001 fb08 	bl	800c1bc <__assert_func>
 800abac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800abb0:	6006      	str	r6, [r0, #0]
 800abb2:	60c6      	str	r6, [r0, #12]
 800abb4:	b13c      	cbz	r4, 800abc6 <_Bfree+0x3a>
 800abb6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800abb8:	6862      	ldr	r2, [r4, #4]
 800abba:	68db      	ldr	r3, [r3, #12]
 800abbc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800abc0:	6021      	str	r1, [r4, #0]
 800abc2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800abc6:	bd70      	pop	{r4, r5, r6, pc}
 800abc8:	0800ce76 	.word	0x0800ce76
 800abcc:	0800cf74 	.word	0x0800cf74

0800abd0 <__multadd>:
 800abd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abd4:	4607      	mov	r7, r0
 800abd6:	460c      	mov	r4, r1
 800abd8:	461e      	mov	r6, r3
 800abda:	2000      	movs	r0, #0
 800abdc:	690d      	ldr	r5, [r1, #16]
 800abde:	f101 0c14 	add.w	ip, r1, #20
 800abe2:	f8dc 3000 	ldr.w	r3, [ip]
 800abe6:	3001      	adds	r0, #1
 800abe8:	b299      	uxth	r1, r3
 800abea:	fb02 6101 	mla	r1, r2, r1, r6
 800abee:	0c1e      	lsrs	r6, r3, #16
 800abf0:	0c0b      	lsrs	r3, r1, #16
 800abf2:	fb02 3306 	mla	r3, r2, r6, r3
 800abf6:	b289      	uxth	r1, r1
 800abf8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800abfc:	4285      	cmp	r5, r0
 800abfe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ac02:	f84c 1b04 	str.w	r1, [ip], #4
 800ac06:	dcec      	bgt.n	800abe2 <__multadd+0x12>
 800ac08:	b30e      	cbz	r6, 800ac4e <__multadd+0x7e>
 800ac0a:	68a3      	ldr	r3, [r4, #8]
 800ac0c:	42ab      	cmp	r3, r5
 800ac0e:	dc19      	bgt.n	800ac44 <__multadd+0x74>
 800ac10:	6861      	ldr	r1, [r4, #4]
 800ac12:	4638      	mov	r0, r7
 800ac14:	3101      	adds	r1, #1
 800ac16:	f7ff ff79 	bl	800ab0c <_Balloc>
 800ac1a:	4680      	mov	r8, r0
 800ac1c:	b928      	cbnz	r0, 800ac2a <__multadd+0x5a>
 800ac1e:	4602      	mov	r2, r0
 800ac20:	21b5      	movs	r1, #181	; 0xb5
 800ac22:	4b0c      	ldr	r3, [pc, #48]	; (800ac54 <__multadd+0x84>)
 800ac24:	480c      	ldr	r0, [pc, #48]	; (800ac58 <__multadd+0x88>)
 800ac26:	f001 fac9 	bl	800c1bc <__assert_func>
 800ac2a:	6922      	ldr	r2, [r4, #16]
 800ac2c:	f104 010c 	add.w	r1, r4, #12
 800ac30:	3202      	adds	r2, #2
 800ac32:	0092      	lsls	r2, r2, #2
 800ac34:	300c      	adds	r0, #12
 800ac36:	f7fc ff81 	bl	8007b3c <memcpy>
 800ac3a:	4621      	mov	r1, r4
 800ac3c:	4638      	mov	r0, r7
 800ac3e:	f7ff ffa5 	bl	800ab8c <_Bfree>
 800ac42:	4644      	mov	r4, r8
 800ac44:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ac48:	3501      	adds	r5, #1
 800ac4a:	615e      	str	r6, [r3, #20]
 800ac4c:	6125      	str	r5, [r4, #16]
 800ac4e:	4620      	mov	r0, r4
 800ac50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac54:	0800cee8 	.word	0x0800cee8
 800ac58:	0800cf74 	.word	0x0800cf74

0800ac5c <__s2b>:
 800ac5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac60:	4615      	mov	r5, r2
 800ac62:	2209      	movs	r2, #9
 800ac64:	461f      	mov	r7, r3
 800ac66:	3308      	adds	r3, #8
 800ac68:	460c      	mov	r4, r1
 800ac6a:	fb93 f3f2 	sdiv	r3, r3, r2
 800ac6e:	4606      	mov	r6, r0
 800ac70:	2201      	movs	r2, #1
 800ac72:	2100      	movs	r1, #0
 800ac74:	429a      	cmp	r2, r3
 800ac76:	db09      	blt.n	800ac8c <__s2b+0x30>
 800ac78:	4630      	mov	r0, r6
 800ac7a:	f7ff ff47 	bl	800ab0c <_Balloc>
 800ac7e:	b940      	cbnz	r0, 800ac92 <__s2b+0x36>
 800ac80:	4602      	mov	r2, r0
 800ac82:	21ce      	movs	r1, #206	; 0xce
 800ac84:	4b18      	ldr	r3, [pc, #96]	; (800ace8 <__s2b+0x8c>)
 800ac86:	4819      	ldr	r0, [pc, #100]	; (800acec <__s2b+0x90>)
 800ac88:	f001 fa98 	bl	800c1bc <__assert_func>
 800ac8c:	0052      	lsls	r2, r2, #1
 800ac8e:	3101      	adds	r1, #1
 800ac90:	e7f0      	b.n	800ac74 <__s2b+0x18>
 800ac92:	9b08      	ldr	r3, [sp, #32]
 800ac94:	2d09      	cmp	r5, #9
 800ac96:	6143      	str	r3, [r0, #20]
 800ac98:	f04f 0301 	mov.w	r3, #1
 800ac9c:	6103      	str	r3, [r0, #16]
 800ac9e:	dd16      	ble.n	800acce <__s2b+0x72>
 800aca0:	f104 0909 	add.w	r9, r4, #9
 800aca4:	46c8      	mov	r8, r9
 800aca6:	442c      	add	r4, r5
 800aca8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800acac:	4601      	mov	r1, r0
 800acae:	220a      	movs	r2, #10
 800acb0:	4630      	mov	r0, r6
 800acb2:	3b30      	subs	r3, #48	; 0x30
 800acb4:	f7ff ff8c 	bl	800abd0 <__multadd>
 800acb8:	45a0      	cmp	r8, r4
 800acba:	d1f5      	bne.n	800aca8 <__s2b+0x4c>
 800acbc:	f1a5 0408 	sub.w	r4, r5, #8
 800acc0:	444c      	add	r4, r9
 800acc2:	1b2d      	subs	r5, r5, r4
 800acc4:	1963      	adds	r3, r4, r5
 800acc6:	42bb      	cmp	r3, r7
 800acc8:	db04      	blt.n	800acd4 <__s2b+0x78>
 800acca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800acce:	2509      	movs	r5, #9
 800acd0:	340a      	adds	r4, #10
 800acd2:	e7f6      	b.n	800acc2 <__s2b+0x66>
 800acd4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800acd8:	4601      	mov	r1, r0
 800acda:	220a      	movs	r2, #10
 800acdc:	4630      	mov	r0, r6
 800acde:	3b30      	subs	r3, #48	; 0x30
 800ace0:	f7ff ff76 	bl	800abd0 <__multadd>
 800ace4:	e7ee      	b.n	800acc4 <__s2b+0x68>
 800ace6:	bf00      	nop
 800ace8:	0800cee8 	.word	0x0800cee8
 800acec:	0800cf74 	.word	0x0800cf74

0800acf0 <__hi0bits>:
 800acf0:	0c02      	lsrs	r2, r0, #16
 800acf2:	0412      	lsls	r2, r2, #16
 800acf4:	4603      	mov	r3, r0
 800acf6:	b9ca      	cbnz	r2, 800ad2c <__hi0bits+0x3c>
 800acf8:	0403      	lsls	r3, r0, #16
 800acfa:	2010      	movs	r0, #16
 800acfc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800ad00:	bf04      	itt	eq
 800ad02:	021b      	lsleq	r3, r3, #8
 800ad04:	3008      	addeq	r0, #8
 800ad06:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800ad0a:	bf04      	itt	eq
 800ad0c:	011b      	lsleq	r3, r3, #4
 800ad0e:	3004      	addeq	r0, #4
 800ad10:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800ad14:	bf04      	itt	eq
 800ad16:	009b      	lsleq	r3, r3, #2
 800ad18:	3002      	addeq	r0, #2
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	db05      	blt.n	800ad2a <__hi0bits+0x3a>
 800ad1e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800ad22:	f100 0001 	add.w	r0, r0, #1
 800ad26:	bf08      	it	eq
 800ad28:	2020      	moveq	r0, #32
 800ad2a:	4770      	bx	lr
 800ad2c:	2000      	movs	r0, #0
 800ad2e:	e7e5      	b.n	800acfc <__hi0bits+0xc>

0800ad30 <__lo0bits>:
 800ad30:	6803      	ldr	r3, [r0, #0]
 800ad32:	4602      	mov	r2, r0
 800ad34:	f013 0007 	ands.w	r0, r3, #7
 800ad38:	d00b      	beq.n	800ad52 <__lo0bits+0x22>
 800ad3a:	07d9      	lsls	r1, r3, #31
 800ad3c:	d421      	bmi.n	800ad82 <__lo0bits+0x52>
 800ad3e:	0798      	lsls	r0, r3, #30
 800ad40:	bf49      	itett	mi
 800ad42:	085b      	lsrmi	r3, r3, #1
 800ad44:	089b      	lsrpl	r3, r3, #2
 800ad46:	2001      	movmi	r0, #1
 800ad48:	6013      	strmi	r3, [r2, #0]
 800ad4a:	bf5c      	itt	pl
 800ad4c:	2002      	movpl	r0, #2
 800ad4e:	6013      	strpl	r3, [r2, #0]
 800ad50:	4770      	bx	lr
 800ad52:	b299      	uxth	r1, r3
 800ad54:	b909      	cbnz	r1, 800ad5a <__lo0bits+0x2a>
 800ad56:	2010      	movs	r0, #16
 800ad58:	0c1b      	lsrs	r3, r3, #16
 800ad5a:	b2d9      	uxtb	r1, r3
 800ad5c:	b909      	cbnz	r1, 800ad62 <__lo0bits+0x32>
 800ad5e:	3008      	adds	r0, #8
 800ad60:	0a1b      	lsrs	r3, r3, #8
 800ad62:	0719      	lsls	r1, r3, #28
 800ad64:	bf04      	itt	eq
 800ad66:	091b      	lsreq	r3, r3, #4
 800ad68:	3004      	addeq	r0, #4
 800ad6a:	0799      	lsls	r1, r3, #30
 800ad6c:	bf04      	itt	eq
 800ad6e:	089b      	lsreq	r3, r3, #2
 800ad70:	3002      	addeq	r0, #2
 800ad72:	07d9      	lsls	r1, r3, #31
 800ad74:	d403      	bmi.n	800ad7e <__lo0bits+0x4e>
 800ad76:	085b      	lsrs	r3, r3, #1
 800ad78:	f100 0001 	add.w	r0, r0, #1
 800ad7c:	d003      	beq.n	800ad86 <__lo0bits+0x56>
 800ad7e:	6013      	str	r3, [r2, #0]
 800ad80:	4770      	bx	lr
 800ad82:	2000      	movs	r0, #0
 800ad84:	4770      	bx	lr
 800ad86:	2020      	movs	r0, #32
 800ad88:	4770      	bx	lr
	...

0800ad8c <__i2b>:
 800ad8c:	b510      	push	{r4, lr}
 800ad8e:	460c      	mov	r4, r1
 800ad90:	2101      	movs	r1, #1
 800ad92:	f7ff febb 	bl	800ab0c <_Balloc>
 800ad96:	4602      	mov	r2, r0
 800ad98:	b928      	cbnz	r0, 800ada6 <__i2b+0x1a>
 800ad9a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ad9e:	4b04      	ldr	r3, [pc, #16]	; (800adb0 <__i2b+0x24>)
 800ada0:	4804      	ldr	r0, [pc, #16]	; (800adb4 <__i2b+0x28>)
 800ada2:	f001 fa0b 	bl	800c1bc <__assert_func>
 800ada6:	2301      	movs	r3, #1
 800ada8:	6144      	str	r4, [r0, #20]
 800adaa:	6103      	str	r3, [r0, #16]
 800adac:	bd10      	pop	{r4, pc}
 800adae:	bf00      	nop
 800adb0:	0800cee8 	.word	0x0800cee8
 800adb4:	0800cf74 	.word	0x0800cf74

0800adb8 <__multiply>:
 800adb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adbc:	4691      	mov	r9, r2
 800adbe:	690a      	ldr	r2, [r1, #16]
 800adc0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800adc4:	460c      	mov	r4, r1
 800adc6:	429a      	cmp	r2, r3
 800adc8:	bfbe      	ittt	lt
 800adca:	460b      	movlt	r3, r1
 800adcc:	464c      	movlt	r4, r9
 800adce:	4699      	movlt	r9, r3
 800add0:	6927      	ldr	r7, [r4, #16]
 800add2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800add6:	68a3      	ldr	r3, [r4, #8]
 800add8:	6861      	ldr	r1, [r4, #4]
 800adda:	eb07 060a 	add.w	r6, r7, sl
 800adde:	42b3      	cmp	r3, r6
 800ade0:	b085      	sub	sp, #20
 800ade2:	bfb8      	it	lt
 800ade4:	3101      	addlt	r1, #1
 800ade6:	f7ff fe91 	bl	800ab0c <_Balloc>
 800adea:	b930      	cbnz	r0, 800adfa <__multiply+0x42>
 800adec:	4602      	mov	r2, r0
 800adee:	f240 115d 	movw	r1, #349	; 0x15d
 800adf2:	4b43      	ldr	r3, [pc, #268]	; (800af00 <__multiply+0x148>)
 800adf4:	4843      	ldr	r0, [pc, #268]	; (800af04 <__multiply+0x14c>)
 800adf6:	f001 f9e1 	bl	800c1bc <__assert_func>
 800adfa:	f100 0514 	add.w	r5, r0, #20
 800adfe:	462b      	mov	r3, r5
 800ae00:	2200      	movs	r2, #0
 800ae02:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ae06:	4543      	cmp	r3, r8
 800ae08:	d321      	bcc.n	800ae4e <__multiply+0x96>
 800ae0a:	f104 0314 	add.w	r3, r4, #20
 800ae0e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ae12:	f109 0314 	add.w	r3, r9, #20
 800ae16:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ae1a:	9202      	str	r2, [sp, #8]
 800ae1c:	1b3a      	subs	r2, r7, r4
 800ae1e:	3a15      	subs	r2, #21
 800ae20:	f022 0203 	bic.w	r2, r2, #3
 800ae24:	3204      	adds	r2, #4
 800ae26:	f104 0115 	add.w	r1, r4, #21
 800ae2a:	428f      	cmp	r7, r1
 800ae2c:	bf38      	it	cc
 800ae2e:	2204      	movcc	r2, #4
 800ae30:	9201      	str	r2, [sp, #4]
 800ae32:	9a02      	ldr	r2, [sp, #8]
 800ae34:	9303      	str	r3, [sp, #12]
 800ae36:	429a      	cmp	r2, r3
 800ae38:	d80c      	bhi.n	800ae54 <__multiply+0x9c>
 800ae3a:	2e00      	cmp	r6, #0
 800ae3c:	dd03      	ble.n	800ae46 <__multiply+0x8e>
 800ae3e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d059      	beq.n	800aefa <__multiply+0x142>
 800ae46:	6106      	str	r6, [r0, #16]
 800ae48:	b005      	add	sp, #20
 800ae4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae4e:	f843 2b04 	str.w	r2, [r3], #4
 800ae52:	e7d8      	b.n	800ae06 <__multiply+0x4e>
 800ae54:	f8b3 a000 	ldrh.w	sl, [r3]
 800ae58:	f1ba 0f00 	cmp.w	sl, #0
 800ae5c:	d023      	beq.n	800aea6 <__multiply+0xee>
 800ae5e:	46a9      	mov	r9, r5
 800ae60:	f04f 0c00 	mov.w	ip, #0
 800ae64:	f104 0e14 	add.w	lr, r4, #20
 800ae68:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ae6c:	f8d9 1000 	ldr.w	r1, [r9]
 800ae70:	fa1f fb82 	uxth.w	fp, r2
 800ae74:	b289      	uxth	r1, r1
 800ae76:	fb0a 110b 	mla	r1, sl, fp, r1
 800ae7a:	4461      	add	r1, ip
 800ae7c:	f8d9 c000 	ldr.w	ip, [r9]
 800ae80:	0c12      	lsrs	r2, r2, #16
 800ae82:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800ae86:	fb0a c202 	mla	r2, sl, r2, ip
 800ae8a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ae8e:	b289      	uxth	r1, r1
 800ae90:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ae94:	4577      	cmp	r7, lr
 800ae96:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ae9a:	f849 1b04 	str.w	r1, [r9], #4
 800ae9e:	d8e3      	bhi.n	800ae68 <__multiply+0xb0>
 800aea0:	9a01      	ldr	r2, [sp, #4]
 800aea2:	f845 c002 	str.w	ip, [r5, r2]
 800aea6:	9a03      	ldr	r2, [sp, #12]
 800aea8:	3304      	adds	r3, #4
 800aeaa:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800aeae:	f1b9 0f00 	cmp.w	r9, #0
 800aeb2:	d020      	beq.n	800aef6 <__multiply+0x13e>
 800aeb4:	46ae      	mov	lr, r5
 800aeb6:	f04f 0a00 	mov.w	sl, #0
 800aeba:	6829      	ldr	r1, [r5, #0]
 800aebc:	f104 0c14 	add.w	ip, r4, #20
 800aec0:	f8bc b000 	ldrh.w	fp, [ip]
 800aec4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800aec8:	b289      	uxth	r1, r1
 800aeca:	fb09 220b 	mla	r2, r9, fp, r2
 800aece:	4492      	add	sl, r2
 800aed0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800aed4:	f84e 1b04 	str.w	r1, [lr], #4
 800aed8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800aedc:	f8be 1000 	ldrh.w	r1, [lr]
 800aee0:	0c12      	lsrs	r2, r2, #16
 800aee2:	fb09 1102 	mla	r1, r9, r2, r1
 800aee6:	4567      	cmp	r7, ip
 800aee8:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800aeec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800aef0:	d8e6      	bhi.n	800aec0 <__multiply+0x108>
 800aef2:	9a01      	ldr	r2, [sp, #4]
 800aef4:	50a9      	str	r1, [r5, r2]
 800aef6:	3504      	adds	r5, #4
 800aef8:	e79b      	b.n	800ae32 <__multiply+0x7a>
 800aefa:	3e01      	subs	r6, #1
 800aefc:	e79d      	b.n	800ae3a <__multiply+0x82>
 800aefe:	bf00      	nop
 800af00:	0800cee8 	.word	0x0800cee8
 800af04:	0800cf74 	.word	0x0800cf74

0800af08 <__pow5mult>:
 800af08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af0c:	4615      	mov	r5, r2
 800af0e:	f012 0203 	ands.w	r2, r2, #3
 800af12:	4606      	mov	r6, r0
 800af14:	460f      	mov	r7, r1
 800af16:	d007      	beq.n	800af28 <__pow5mult+0x20>
 800af18:	4c25      	ldr	r4, [pc, #148]	; (800afb0 <__pow5mult+0xa8>)
 800af1a:	3a01      	subs	r2, #1
 800af1c:	2300      	movs	r3, #0
 800af1e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800af22:	f7ff fe55 	bl	800abd0 <__multadd>
 800af26:	4607      	mov	r7, r0
 800af28:	10ad      	asrs	r5, r5, #2
 800af2a:	d03d      	beq.n	800afa8 <__pow5mult+0xa0>
 800af2c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800af2e:	b97c      	cbnz	r4, 800af50 <__pow5mult+0x48>
 800af30:	2010      	movs	r0, #16
 800af32:	f7ff fdc3 	bl	800aabc <malloc>
 800af36:	4602      	mov	r2, r0
 800af38:	6270      	str	r0, [r6, #36]	; 0x24
 800af3a:	b928      	cbnz	r0, 800af48 <__pow5mult+0x40>
 800af3c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800af40:	4b1c      	ldr	r3, [pc, #112]	; (800afb4 <__pow5mult+0xac>)
 800af42:	481d      	ldr	r0, [pc, #116]	; (800afb8 <__pow5mult+0xb0>)
 800af44:	f001 f93a 	bl	800c1bc <__assert_func>
 800af48:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800af4c:	6004      	str	r4, [r0, #0]
 800af4e:	60c4      	str	r4, [r0, #12]
 800af50:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800af54:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800af58:	b94c      	cbnz	r4, 800af6e <__pow5mult+0x66>
 800af5a:	f240 2171 	movw	r1, #625	; 0x271
 800af5e:	4630      	mov	r0, r6
 800af60:	f7ff ff14 	bl	800ad8c <__i2b>
 800af64:	2300      	movs	r3, #0
 800af66:	4604      	mov	r4, r0
 800af68:	f8c8 0008 	str.w	r0, [r8, #8]
 800af6c:	6003      	str	r3, [r0, #0]
 800af6e:	f04f 0900 	mov.w	r9, #0
 800af72:	07eb      	lsls	r3, r5, #31
 800af74:	d50a      	bpl.n	800af8c <__pow5mult+0x84>
 800af76:	4639      	mov	r1, r7
 800af78:	4622      	mov	r2, r4
 800af7a:	4630      	mov	r0, r6
 800af7c:	f7ff ff1c 	bl	800adb8 <__multiply>
 800af80:	4680      	mov	r8, r0
 800af82:	4639      	mov	r1, r7
 800af84:	4630      	mov	r0, r6
 800af86:	f7ff fe01 	bl	800ab8c <_Bfree>
 800af8a:	4647      	mov	r7, r8
 800af8c:	106d      	asrs	r5, r5, #1
 800af8e:	d00b      	beq.n	800afa8 <__pow5mult+0xa0>
 800af90:	6820      	ldr	r0, [r4, #0]
 800af92:	b938      	cbnz	r0, 800afa4 <__pow5mult+0x9c>
 800af94:	4622      	mov	r2, r4
 800af96:	4621      	mov	r1, r4
 800af98:	4630      	mov	r0, r6
 800af9a:	f7ff ff0d 	bl	800adb8 <__multiply>
 800af9e:	6020      	str	r0, [r4, #0]
 800afa0:	f8c0 9000 	str.w	r9, [r0]
 800afa4:	4604      	mov	r4, r0
 800afa6:	e7e4      	b.n	800af72 <__pow5mult+0x6a>
 800afa8:	4638      	mov	r0, r7
 800afaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afae:	bf00      	nop
 800afb0:	0800d0c0 	.word	0x0800d0c0
 800afb4:	0800ce76 	.word	0x0800ce76
 800afb8:	0800cf74 	.word	0x0800cf74

0800afbc <__lshift>:
 800afbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800afc0:	460c      	mov	r4, r1
 800afc2:	4607      	mov	r7, r0
 800afc4:	4691      	mov	r9, r2
 800afc6:	6923      	ldr	r3, [r4, #16]
 800afc8:	6849      	ldr	r1, [r1, #4]
 800afca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800afce:	68a3      	ldr	r3, [r4, #8]
 800afd0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800afd4:	f108 0601 	add.w	r6, r8, #1
 800afd8:	42b3      	cmp	r3, r6
 800afda:	db0b      	blt.n	800aff4 <__lshift+0x38>
 800afdc:	4638      	mov	r0, r7
 800afde:	f7ff fd95 	bl	800ab0c <_Balloc>
 800afe2:	4605      	mov	r5, r0
 800afe4:	b948      	cbnz	r0, 800affa <__lshift+0x3e>
 800afe6:	4602      	mov	r2, r0
 800afe8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800afec:	4b29      	ldr	r3, [pc, #164]	; (800b094 <__lshift+0xd8>)
 800afee:	482a      	ldr	r0, [pc, #168]	; (800b098 <__lshift+0xdc>)
 800aff0:	f001 f8e4 	bl	800c1bc <__assert_func>
 800aff4:	3101      	adds	r1, #1
 800aff6:	005b      	lsls	r3, r3, #1
 800aff8:	e7ee      	b.n	800afd8 <__lshift+0x1c>
 800affa:	2300      	movs	r3, #0
 800affc:	f100 0114 	add.w	r1, r0, #20
 800b000:	f100 0210 	add.w	r2, r0, #16
 800b004:	4618      	mov	r0, r3
 800b006:	4553      	cmp	r3, sl
 800b008:	db37      	blt.n	800b07a <__lshift+0xbe>
 800b00a:	6920      	ldr	r0, [r4, #16]
 800b00c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b010:	f104 0314 	add.w	r3, r4, #20
 800b014:	f019 091f 	ands.w	r9, r9, #31
 800b018:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b01c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b020:	d02f      	beq.n	800b082 <__lshift+0xc6>
 800b022:	468a      	mov	sl, r1
 800b024:	f04f 0c00 	mov.w	ip, #0
 800b028:	f1c9 0e20 	rsb	lr, r9, #32
 800b02c:	681a      	ldr	r2, [r3, #0]
 800b02e:	fa02 f209 	lsl.w	r2, r2, r9
 800b032:	ea42 020c 	orr.w	r2, r2, ip
 800b036:	f84a 2b04 	str.w	r2, [sl], #4
 800b03a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b03e:	4298      	cmp	r0, r3
 800b040:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b044:	d8f2      	bhi.n	800b02c <__lshift+0x70>
 800b046:	1b03      	subs	r3, r0, r4
 800b048:	3b15      	subs	r3, #21
 800b04a:	f023 0303 	bic.w	r3, r3, #3
 800b04e:	3304      	adds	r3, #4
 800b050:	f104 0215 	add.w	r2, r4, #21
 800b054:	4290      	cmp	r0, r2
 800b056:	bf38      	it	cc
 800b058:	2304      	movcc	r3, #4
 800b05a:	f841 c003 	str.w	ip, [r1, r3]
 800b05e:	f1bc 0f00 	cmp.w	ip, #0
 800b062:	d001      	beq.n	800b068 <__lshift+0xac>
 800b064:	f108 0602 	add.w	r6, r8, #2
 800b068:	3e01      	subs	r6, #1
 800b06a:	4638      	mov	r0, r7
 800b06c:	4621      	mov	r1, r4
 800b06e:	612e      	str	r6, [r5, #16]
 800b070:	f7ff fd8c 	bl	800ab8c <_Bfree>
 800b074:	4628      	mov	r0, r5
 800b076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b07a:	f842 0f04 	str.w	r0, [r2, #4]!
 800b07e:	3301      	adds	r3, #1
 800b080:	e7c1      	b.n	800b006 <__lshift+0x4a>
 800b082:	3904      	subs	r1, #4
 800b084:	f853 2b04 	ldr.w	r2, [r3], #4
 800b088:	4298      	cmp	r0, r3
 800b08a:	f841 2f04 	str.w	r2, [r1, #4]!
 800b08e:	d8f9      	bhi.n	800b084 <__lshift+0xc8>
 800b090:	e7ea      	b.n	800b068 <__lshift+0xac>
 800b092:	bf00      	nop
 800b094:	0800cee8 	.word	0x0800cee8
 800b098:	0800cf74 	.word	0x0800cf74

0800b09c <__mcmp>:
 800b09c:	4603      	mov	r3, r0
 800b09e:	690a      	ldr	r2, [r1, #16]
 800b0a0:	6900      	ldr	r0, [r0, #16]
 800b0a2:	b530      	push	{r4, r5, lr}
 800b0a4:	1a80      	subs	r0, r0, r2
 800b0a6:	d10d      	bne.n	800b0c4 <__mcmp+0x28>
 800b0a8:	3314      	adds	r3, #20
 800b0aa:	3114      	adds	r1, #20
 800b0ac:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b0b0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b0b4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b0b8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b0bc:	4295      	cmp	r5, r2
 800b0be:	d002      	beq.n	800b0c6 <__mcmp+0x2a>
 800b0c0:	d304      	bcc.n	800b0cc <__mcmp+0x30>
 800b0c2:	2001      	movs	r0, #1
 800b0c4:	bd30      	pop	{r4, r5, pc}
 800b0c6:	42a3      	cmp	r3, r4
 800b0c8:	d3f4      	bcc.n	800b0b4 <__mcmp+0x18>
 800b0ca:	e7fb      	b.n	800b0c4 <__mcmp+0x28>
 800b0cc:	f04f 30ff 	mov.w	r0, #4294967295
 800b0d0:	e7f8      	b.n	800b0c4 <__mcmp+0x28>
	...

0800b0d4 <__mdiff>:
 800b0d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0d8:	460d      	mov	r5, r1
 800b0da:	4607      	mov	r7, r0
 800b0dc:	4611      	mov	r1, r2
 800b0de:	4628      	mov	r0, r5
 800b0e0:	4614      	mov	r4, r2
 800b0e2:	f7ff ffdb 	bl	800b09c <__mcmp>
 800b0e6:	1e06      	subs	r6, r0, #0
 800b0e8:	d111      	bne.n	800b10e <__mdiff+0x3a>
 800b0ea:	4631      	mov	r1, r6
 800b0ec:	4638      	mov	r0, r7
 800b0ee:	f7ff fd0d 	bl	800ab0c <_Balloc>
 800b0f2:	4602      	mov	r2, r0
 800b0f4:	b928      	cbnz	r0, 800b102 <__mdiff+0x2e>
 800b0f6:	f240 2132 	movw	r1, #562	; 0x232
 800b0fa:	4b3a      	ldr	r3, [pc, #232]	; (800b1e4 <__mdiff+0x110>)
 800b0fc:	483a      	ldr	r0, [pc, #232]	; (800b1e8 <__mdiff+0x114>)
 800b0fe:	f001 f85d 	bl	800c1bc <__assert_func>
 800b102:	2301      	movs	r3, #1
 800b104:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b108:	4610      	mov	r0, r2
 800b10a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b10e:	bfa4      	itt	ge
 800b110:	4623      	movge	r3, r4
 800b112:	462c      	movge	r4, r5
 800b114:	4638      	mov	r0, r7
 800b116:	6861      	ldr	r1, [r4, #4]
 800b118:	bfa6      	itte	ge
 800b11a:	461d      	movge	r5, r3
 800b11c:	2600      	movge	r6, #0
 800b11e:	2601      	movlt	r6, #1
 800b120:	f7ff fcf4 	bl	800ab0c <_Balloc>
 800b124:	4602      	mov	r2, r0
 800b126:	b918      	cbnz	r0, 800b130 <__mdiff+0x5c>
 800b128:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b12c:	4b2d      	ldr	r3, [pc, #180]	; (800b1e4 <__mdiff+0x110>)
 800b12e:	e7e5      	b.n	800b0fc <__mdiff+0x28>
 800b130:	f102 0814 	add.w	r8, r2, #20
 800b134:	46c2      	mov	sl, r8
 800b136:	f04f 0c00 	mov.w	ip, #0
 800b13a:	6927      	ldr	r7, [r4, #16]
 800b13c:	60c6      	str	r6, [r0, #12]
 800b13e:	692e      	ldr	r6, [r5, #16]
 800b140:	f104 0014 	add.w	r0, r4, #20
 800b144:	f105 0914 	add.w	r9, r5, #20
 800b148:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800b14c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b150:	3410      	adds	r4, #16
 800b152:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800b156:	f859 3b04 	ldr.w	r3, [r9], #4
 800b15a:	fa1f f18b 	uxth.w	r1, fp
 800b15e:	448c      	add	ip, r1
 800b160:	b299      	uxth	r1, r3
 800b162:	0c1b      	lsrs	r3, r3, #16
 800b164:	ebac 0101 	sub.w	r1, ip, r1
 800b168:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b16c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b170:	b289      	uxth	r1, r1
 800b172:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800b176:	454e      	cmp	r6, r9
 800b178:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b17c:	f84a 3b04 	str.w	r3, [sl], #4
 800b180:	d8e7      	bhi.n	800b152 <__mdiff+0x7e>
 800b182:	1b73      	subs	r3, r6, r5
 800b184:	3b15      	subs	r3, #21
 800b186:	f023 0303 	bic.w	r3, r3, #3
 800b18a:	3515      	adds	r5, #21
 800b18c:	3304      	adds	r3, #4
 800b18e:	42ae      	cmp	r6, r5
 800b190:	bf38      	it	cc
 800b192:	2304      	movcc	r3, #4
 800b194:	4418      	add	r0, r3
 800b196:	4443      	add	r3, r8
 800b198:	461e      	mov	r6, r3
 800b19a:	4605      	mov	r5, r0
 800b19c:	4575      	cmp	r5, lr
 800b19e:	d30e      	bcc.n	800b1be <__mdiff+0xea>
 800b1a0:	f10e 0103 	add.w	r1, lr, #3
 800b1a4:	1a09      	subs	r1, r1, r0
 800b1a6:	f021 0103 	bic.w	r1, r1, #3
 800b1aa:	3803      	subs	r0, #3
 800b1ac:	4586      	cmp	lr, r0
 800b1ae:	bf38      	it	cc
 800b1b0:	2100      	movcc	r1, #0
 800b1b2:	4419      	add	r1, r3
 800b1b4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800b1b8:	b18b      	cbz	r3, 800b1de <__mdiff+0x10a>
 800b1ba:	6117      	str	r7, [r2, #16]
 800b1bc:	e7a4      	b.n	800b108 <__mdiff+0x34>
 800b1be:	f855 8b04 	ldr.w	r8, [r5], #4
 800b1c2:	fa1f f188 	uxth.w	r1, r8
 800b1c6:	4461      	add	r1, ip
 800b1c8:	140c      	asrs	r4, r1, #16
 800b1ca:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b1ce:	b289      	uxth	r1, r1
 800b1d0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b1d4:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800b1d8:	f846 1b04 	str.w	r1, [r6], #4
 800b1dc:	e7de      	b.n	800b19c <__mdiff+0xc8>
 800b1de:	3f01      	subs	r7, #1
 800b1e0:	e7e8      	b.n	800b1b4 <__mdiff+0xe0>
 800b1e2:	bf00      	nop
 800b1e4:	0800cee8 	.word	0x0800cee8
 800b1e8:	0800cf74 	.word	0x0800cf74

0800b1ec <__ulp>:
 800b1ec:	4b11      	ldr	r3, [pc, #68]	; (800b234 <__ulp+0x48>)
 800b1ee:	400b      	ands	r3, r1
 800b1f0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	dd02      	ble.n	800b1fe <__ulp+0x12>
 800b1f8:	2000      	movs	r0, #0
 800b1fa:	4619      	mov	r1, r3
 800b1fc:	4770      	bx	lr
 800b1fe:	425b      	negs	r3, r3
 800b200:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800b204:	f04f 0000 	mov.w	r0, #0
 800b208:	f04f 0100 	mov.w	r1, #0
 800b20c:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b210:	da04      	bge.n	800b21c <__ulp+0x30>
 800b212:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b216:	fa43 f102 	asr.w	r1, r3, r2
 800b21a:	4770      	bx	lr
 800b21c:	f1a2 0314 	sub.w	r3, r2, #20
 800b220:	2b1e      	cmp	r3, #30
 800b222:	bfd6      	itet	le
 800b224:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800b228:	2301      	movgt	r3, #1
 800b22a:	fa22 f303 	lsrle.w	r3, r2, r3
 800b22e:	4618      	mov	r0, r3
 800b230:	4770      	bx	lr
 800b232:	bf00      	nop
 800b234:	7ff00000 	.word	0x7ff00000

0800b238 <__b2d>:
 800b238:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b23c:	6907      	ldr	r7, [r0, #16]
 800b23e:	f100 0914 	add.w	r9, r0, #20
 800b242:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800b246:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800b24a:	f1a7 0804 	sub.w	r8, r7, #4
 800b24e:	4630      	mov	r0, r6
 800b250:	f7ff fd4e 	bl	800acf0 <__hi0bits>
 800b254:	f1c0 0320 	rsb	r3, r0, #32
 800b258:	280a      	cmp	r0, #10
 800b25a:	600b      	str	r3, [r1, #0]
 800b25c:	491f      	ldr	r1, [pc, #124]	; (800b2dc <__b2d+0xa4>)
 800b25e:	dc17      	bgt.n	800b290 <__b2d+0x58>
 800b260:	45c1      	cmp	r9, r8
 800b262:	bf28      	it	cs
 800b264:	2200      	movcs	r2, #0
 800b266:	f1c0 0c0b 	rsb	ip, r0, #11
 800b26a:	fa26 f30c 	lsr.w	r3, r6, ip
 800b26e:	bf38      	it	cc
 800b270:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800b274:	ea43 0501 	orr.w	r5, r3, r1
 800b278:	f100 0315 	add.w	r3, r0, #21
 800b27c:	fa06 f303 	lsl.w	r3, r6, r3
 800b280:	fa22 f20c 	lsr.w	r2, r2, ip
 800b284:	ea43 0402 	orr.w	r4, r3, r2
 800b288:	4620      	mov	r0, r4
 800b28a:	4629      	mov	r1, r5
 800b28c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b290:	45c1      	cmp	r9, r8
 800b292:	bf2e      	itee	cs
 800b294:	2200      	movcs	r2, #0
 800b296:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800b29a:	f1a7 0808 	subcc.w	r8, r7, #8
 800b29e:	f1b0 030b 	subs.w	r3, r0, #11
 800b2a2:	d016      	beq.n	800b2d2 <__b2d+0x9a>
 800b2a4:	f1c3 0720 	rsb	r7, r3, #32
 800b2a8:	fa22 f107 	lsr.w	r1, r2, r7
 800b2ac:	45c8      	cmp	r8, r9
 800b2ae:	fa06 f603 	lsl.w	r6, r6, r3
 800b2b2:	ea46 0601 	orr.w	r6, r6, r1
 800b2b6:	bf94      	ite	ls
 800b2b8:	2100      	movls	r1, #0
 800b2ba:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800b2be:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800b2c2:	fa02 f003 	lsl.w	r0, r2, r3
 800b2c6:	40f9      	lsrs	r1, r7
 800b2c8:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b2cc:	ea40 0401 	orr.w	r4, r0, r1
 800b2d0:	e7da      	b.n	800b288 <__b2d+0x50>
 800b2d2:	4614      	mov	r4, r2
 800b2d4:	ea46 0501 	orr.w	r5, r6, r1
 800b2d8:	e7d6      	b.n	800b288 <__b2d+0x50>
 800b2da:	bf00      	nop
 800b2dc:	3ff00000 	.word	0x3ff00000

0800b2e0 <__d2b>:
 800b2e0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b2e4:	2101      	movs	r1, #1
 800b2e6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800b2ea:	4690      	mov	r8, r2
 800b2ec:	461d      	mov	r5, r3
 800b2ee:	f7ff fc0d 	bl	800ab0c <_Balloc>
 800b2f2:	4604      	mov	r4, r0
 800b2f4:	b930      	cbnz	r0, 800b304 <__d2b+0x24>
 800b2f6:	4602      	mov	r2, r0
 800b2f8:	f240 310a 	movw	r1, #778	; 0x30a
 800b2fc:	4b24      	ldr	r3, [pc, #144]	; (800b390 <__d2b+0xb0>)
 800b2fe:	4825      	ldr	r0, [pc, #148]	; (800b394 <__d2b+0xb4>)
 800b300:	f000 ff5c 	bl	800c1bc <__assert_func>
 800b304:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800b308:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800b30c:	bb2d      	cbnz	r5, 800b35a <__d2b+0x7a>
 800b30e:	9301      	str	r3, [sp, #4]
 800b310:	f1b8 0300 	subs.w	r3, r8, #0
 800b314:	d026      	beq.n	800b364 <__d2b+0x84>
 800b316:	4668      	mov	r0, sp
 800b318:	9300      	str	r3, [sp, #0]
 800b31a:	f7ff fd09 	bl	800ad30 <__lo0bits>
 800b31e:	9900      	ldr	r1, [sp, #0]
 800b320:	b1f0      	cbz	r0, 800b360 <__d2b+0x80>
 800b322:	9a01      	ldr	r2, [sp, #4]
 800b324:	f1c0 0320 	rsb	r3, r0, #32
 800b328:	fa02 f303 	lsl.w	r3, r2, r3
 800b32c:	430b      	orrs	r3, r1
 800b32e:	40c2      	lsrs	r2, r0
 800b330:	6163      	str	r3, [r4, #20]
 800b332:	9201      	str	r2, [sp, #4]
 800b334:	9b01      	ldr	r3, [sp, #4]
 800b336:	2b00      	cmp	r3, #0
 800b338:	bf14      	ite	ne
 800b33a:	2102      	movne	r1, #2
 800b33c:	2101      	moveq	r1, #1
 800b33e:	61a3      	str	r3, [r4, #24]
 800b340:	6121      	str	r1, [r4, #16]
 800b342:	b1c5      	cbz	r5, 800b376 <__d2b+0x96>
 800b344:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b348:	4405      	add	r5, r0
 800b34a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b34e:	603d      	str	r5, [r7, #0]
 800b350:	6030      	str	r0, [r6, #0]
 800b352:	4620      	mov	r0, r4
 800b354:	b002      	add	sp, #8
 800b356:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b35a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b35e:	e7d6      	b.n	800b30e <__d2b+0x2e>
 800b360:	6161      	str	r1, [r4, #20]
 800b362:	e7e7      	b.n	800b334 <__d2b+0x54>
 800b364:	a801      	add	r0, sp, #4
 800b366:	f7ff fce3 	bl	800ad30 <__lo0bits>
 800b36a:	2101      	movs	r1, #1
 800b36c:	9b01      	ldr	r3, [sp, #4]
 800b36e:	6121      	str	r1, [r4, #16]
 800b370:	6163      	str	r3, [r4, #20]
 800b372:	3020      	adds	r0, #32
 800b374:	e7e5      	b.n	800b342 <__d2b+0x62>
 800b376:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800b37a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b37e:	6038      	str	r0, [r7, #0]
 800b380:	6918      	ldr	r0, [r3, #16]
 800b382:	f7ff fcb5 	bl	800acf0 <__hi0bits>
 800b386:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800b38a:	6031      	str	r1, [r6, #0]
 800b38c:	e7e1      	b.n	800b352 <__d2b+0x72>
 800b38e:	bf00      	nop
 800b390:	0800cee8 	.word	0x0800cee8
 800b394:	0800cf74 	.word	0x0800cf74

0800b398 <__ratio>:
 800b398:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b39c:	4688      	mov	r8, r1
 800b39e:	4669      	mov	r1, sp
 800b3a0:	4681      	mov	r9, r0
 800b3a2:	f7ff ff49 	bl	800b238 <__b2d>
 800b3a6:	460f      	mov	r7, r1
 800b3a8:	4604      	mov	r4, r0
 800b3aa:	460d      	mov	r5, r1
 800b3ac:	4640      	mov	r0, r8
 800b3ae:	a901      	add	r1, sp, #4
 800b3b0:	f7ff ff42 	bl	800b238 <__b2d>
 800b3b4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b3b8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b3bc:	468b      	mov	fp, r1
 800b3be:	eba3 0c02 	sub.w	ip, r3, r2
 800b3c2:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b3c6:	1a9b      	subs	r3, r3, r2
 800b3c8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	bfd5      	itete	le
 800b3d0:	460a      	movle	r2, r1
 800b3d2:	462a      	movgt	r2, r5
 800b3d4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b3d8:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b3dc:	bfd8      	it	le
 800b3de:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b3e2:	465b      	mov	r3, fp
 800b3e4:	4602      	mov	r2, r0
 800b3e6:	4639      	mov	r1, r7
 800b3e8:	4620      	mov	r0, r4
 800b3ea:	f7f5 fabf 	bl	800096c <__aeabi_ddiv>
 800b3ee:	b003      	add	sp, #12
 800b3f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b3f4 <__copybits>:
 800b3f4:	3901      	subs	r1, #1
 800b3f6:	b570      	push	{r4, r5, r6, lr}
 800b3f8:	1149      	asrs	r1, r1, #5
 800b3fa:	6914      	ldr	r4, [r2, #16]
 800b3fc:	3101      	adds	r1, #1
 800b3fe:	f102 0314 	add.w	r3, r2, #20
 800b402:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b406:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b40a:	1f05      	subs	r5, r0, #4
 800b40c:	42a3      	cmp	r3, r4
 800b40e:	d30c      	bcc.n	800b42a <__copybits+0x36>
 800b410:	1aa3      	subs	r3, r4, r2
 800b412:	3b11      	subs	r3, #17
 800b414:	f023 0303 	bic.w	r3, r3, #3
 800b418:	3211      	adds	r2, #17
 800b41a:	42a2      	cmp	r2, r4
 800b41c:	bf88      	it	hi
 800b41e:	2300      	movhi	r3, #0
 800b420:	4418      	add	r0, r3
 800b422:	2300      	movs	r3, #0
 800b424:	4288      	cmp	r0, r1
 800b426:	d305      	bcc.n	800b434 <__copybits+0x40>
 800b428:	bd70      	pop	{r4, r5, r6, pc}
 800b42a:	f853 6b04 	ldr.w	r6, [r3], #4
 800b42e:	f845 6f04 	str.w	r6, [r5, #4]!
 800b432:	e7eb      	b.n	800b40c <__copybits+0x18>
 800b434:	f840 3b04 	str.w	r3, [r0], #4
 800b438:	e7f4      	b.n	800b424 <__copybits+0x30>

0800b43a <__any_on>:
 800b43a:	f100 0214 	add.w	r2, r0, #20
 800b43e:	6900      	ldr	r0, [r0, #16]
 800b440:	114b      	asrs	r3, r1, #5
 800b442:	4298      	cmp	r0, r3
 800b444:	b510      	push	{r4, lr}
 800b446:	db11      	blt.n	800b46c <__any_on+0x32>
 800b448:	dd0a      	ble.n	800b460 <__any_on+0x26>
 800b44a:	f011 011f 	ands.w	r1, r1, #31
 800b44e:	d007      	beq.n	800b460 <__any_on+0x26>
 800b450:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b454:	fa24 f001 	lsr.w	r0, r4, r1
 800b458:	fa00 f101 	lsl.w	r1, r0, r1
 800b45c:	428c      	cmp	r4, r1
 800b45e:	d10b      	bne.n	800b478 <__any_on+0x3e>
 800b460:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b464:	4293      	cmp	r3, r2
 800b466:	d803      	bhi.n	800b470 <__any_on+0x36>
 800b468:	2000      	movs	r0, #0
 800b46a:	bd10      	pop	{r4, pc}
 800b46c:	4603      	mov	r3, r0
 800b46e:	e7f7      	b.n	800b460 <__any_on+0x26>
 800b470:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b474:	2900      	cmp	r1, #0
 800b476:	d0f5      	beq.n	800b464 <__any_on+0x2a>
 800b478:	2001      	movs	r0, #1
 800b47a:	e7f6      	b.n	800b46a <__any_on+0x30>

0800b47c <_calloc_r>:
 800b47c:	b570      	push	{r4, r5, r6, lr}
 800b47e:	fba1 5402 	umull	r5, r4, r1, r2
 800b482:	b934      	cbnz	r4, 800b492 <_calloc_r+0x16>
 800b484:	4629      	mov	r1, r5
 800b486:	f000 f875 	bl	800b574 <_malloc_r>
 800b48a:	4606      	mov	r6, r0
 800b48c:	b928      	cbnz	r0, 800b49a <_calloc_r+0x1e>
 800b48e:	4630      	mov	r0, r6
 800b490:	bd70      	pop	{r4, r5, r6, pc}
 800b492:	220c      	movs	r2, #12
 800b494:	2600      	movs	r6, #0
 800b496:	6002      	str	r2, [r0, #0]
 800b498:	e7f9      	b.n	800b48e <_calloc_r+0x12>
 800b49a:	462a      	mov	r2, r5
 800b49c:	4621      	mov	r1, r4
 800b49e:	f7fc fb5b 	bl	8007b58 <memset>
 800b4a2:	e7f4      	b.n	800b48e <_calloc_r+0x12>

0800b4a4 <_free_r>:
 800b4a4:	b538      	push	{r3, r4, r5, lr}
 800b4a6:	4605      	mov	r5, r0
 800b4a8:	2900      	cmp	r1, #0
 800b4aa:	d040      	beq.n	800b52e <_free_r+0x8a>
 800b4ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b4b0:	1f0c      	subs	r4, r1, #4
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	bfb8      	it	lt
 800b4b6:	18e4      	addlt	r4, r4, r3
 800b4b8:	f001 f880 	bl	800c5bc <__malloc_lock>
 800b4bc:	4a1c      	ldr	r2, [pc, #112]	; (800b530 <_free_r+0x8c>)
 800b4be:	6813      	ldr	r3, [r2, #0]
 800b4c0:	b933      	cbnz	r3, 800b4d0 <_free_r+0x2c>
 800b4c2:	6063      	str	r3, [r4, #4]
 800b4c4:	6014      	str	r4, [r2, #0]
 800b4c6:	4628      	mov	r0, r5
 800b4c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b4cc:	f001 b87c 	b.w	800c5c8 <__malloc_unlock>
 800b4d0:	42a3      	cmp	r3, r4
 800b4d2:	d908      	bls.n	800b4e6 <_free_r+0x42>
 800b4d4:	6820      	ldr	r0, [r4, #0]
 800b4d6:	1821      	adds	r1, r4, r0
 800b4d8:	428b      	cmp	r3, r1
 800b4da:	bf01      	itttt	eq
 800b4dc:	6819      	ldreq	r1, [r3, #0]
 800b4de:	685b      	ldreq	r3, [r3, #4]
 800b4e0:	1809      	addeq	r1, r1, r0
 800b4e2:	6021      	streq	r1, [r4, #0]
 800b4e4:	e7ed      	b.n	800b4c2 <_free_r+0x1e>
 800b4e6:	461a      	mov	r2, r3
 800b4e8:	685b      	ldr	r3, [r3, #4]
 800b4ea:	b10b      	cbz	r3, 800b4f0 <_free_r+0x4c>
 800b4ec:	42a3      	cmp	r3, r4
 800b4ee:	d9fa      	bls.n	800b4e6 <_free_r+0x42>
 800b4f0:	6811      	ldr	r1, [r2, #0]
 800b4f2:	1850      	adds	r0, r2, r1
 800b4f4:	42a0      	cmp	r0, r4
 800b4f6:	d10b      	bne.n	800b510 <_free_r+0x6c>
 800b4f8:	6820      	ldr	r0, [r4, #0]
 800b4fa:	4401      	add	r1, r0
 800b4fc:	1850      	adds	r0, r2, r1
 800b4fe:	4283      	cmp	r3, r0
 800b500:	6011      	str	r1, [r2, #0]
 800b502:	d1e0      	bne.n	800b4c6 <_free_r+0x22>
 800b504:	6818      	ldr	r0, [r3, #0]
 800b506:	685b      	ldr	r3, [r3, #4]
 800b508:	4401      	add	r1, r0
 800b50a:	6011      	str	r1, [r2, #0]
 800b50c:	6053      	str	r3, [r2, #4]
 800b50e:	e7da      	b.n	800b4c6 <_free_r+0x22>
 800b510:	d902      	bls.n	800b518 <_free_r+0x74>
 800b512:	230c      	movs	r3, #12
 800b514:	602b      	str	r3, [r5, #0]
 800b516:	e7d6      	b.n	800b4c6 <_free_r+0x22>
 800b518:	6820      	ldr	r0, [r4, #0]
 800b51a:	1821      	adds	r1, r4, r0
 800b51c:	428b      	cmp	r3, r1
 800b51e:	bf01      	itttt	eq
 800b520:	6819      	ldreq	r1, [r3, #0]
 800b522:	685b      	ldreq	r3, [r3, #4]
 800b524:	1809      	addeq	r1, r1, r0
 800b526:	6021      	streq	r1, [r4, #0]
 800b528:	6063      	str	r3, [r4, #4]
 800b52a:	6054      	str	r4, [r2, #4]
 800b52c:	e7cb      	b.n	800b4c6 <_free_r+0x22>
 800b52e:	bd38      	pop	{r3, r4, r5, pc}
 800b530:	20000730 	.word	0x20000730

0800b534 <sbrk_aligned>:
 800b534:	b570      	push	{r4, r5, r6, lr}
 800b536:	4e0e      	ldr	r6, [pc, #56]	; (800b570 <sbrk_aligned+0x3c>)
 800b538:	460c      	mov	r4, r1
 800b53a:	6831      	ldr	r1, [r6, #0]
 800b53c:	4605      	mov	r5, r0
 800b53e:	b911      	cbnz	r1, 800b546 <sbrk_aligned+0x12>
 800b540:	f000 fd26 	bl	800bf90 <_sbrk_r>
 800b544:	6030      	str	r0, [r6, #0]
 800b546:	4621      	mov	r1, r4
 800b548:	4628      	mov	r0, r5
 800b54a:	f000 fd21 	bl	800bf90 <_sbrk_r>
 800b54e:	1c43      	adds	r3, r0, #1
 800b550:	d00a      	beq.n	800b568 <sbrk_aligned+0x34>
 800b552:	1cc4      	adds	r4, r0, #3
 800b554:	f024 0403 	bic.w	r4, r4, #3
 800b558:	42a0      	cmp	r0, r4
 800b55a:	d007      	beq.n	800b56c <sbrk_aligned+0x38>
 800b55c:	1a21      	subs	r1, r4, r0
 800b55e:	4628      	mov	r0, r5
 800b560:	f000 fd16 	bl	800bf90 <_sbrk_r>
 800b564:	3001      	adds	r0, #1
 800b566:	d101      	bne.n	800b56c <sbrk_aligned+0x38>
 800b568:	f04f 34ff 	mov.w	r4, #4294967295
 800b56c:	4620      	mov	r0, r4
 800b56e:	bd70      	pop	{r4, r5, r6, pc}
 800b570:	20000734 	.word	0x20000734

0800b574 <_malloc_r>:
 800b574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b578:	1ccd      	adds	r5, r1, #3
 800b57a:	f025 0503 	bic.w	r5, r5, #3
 800b57e:	3508      	adds	r5, #8
 800b580:	2d0c      	cmp	r5, #12
 800b582:	bf38      	it	cc
 800b584:	250c      	movcc	r5, #12
 800b586:	2d00      	cmp	r5, #0
 800b588:	4607      	mov	r7, r0
 800b58a:	db01      	blt.n	800b590 <_malloc_r+0x1c>
 800b58c:	42a9      	cmp	r1, r5
 800b58e:	d905      	bls.n	800b59c <_malloc_r+0x28>
 800b590:	230c      	movs	r3, #12
 800b592:	2600      	movs	r6, #0
 800b594:	603b      	str	r3, [r7, #0]
 800b596:	4630      	mov	r0, r6
 800b598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b59c:	4e2e      	ldr	r6, [pc, #184]	; (800b658 <_malloc_r+0xe4>)
 800b59e:	f001 f80d 	bl	800c5bc <__malloc_lock>
 800b5a2:	6833      	ldr	r3, [r6, #0]
 800b5a4:	461c      	mov	r4, r3
 800b5a6:	bb34      	cbnz	r4, 800b5f6 <_malloc_r+0x82>
 800b5a8:	4629      	mov	r1, r5
 800b5aa:	4638      	mov	r0, r7
 800b5ac:	f7ff ffc2 	bl	800b534 <sbrk_aligned>
 800b5b0:	1c43      	adds	r3, r0, #1
 800b5b2:	4604      	mov	r4, r0
 800b5b4:	d14d      	bne.n	800b652 <_malloc_r+0xde>
 800b5b6:	6834      	ldr	r4, [r6, #0]
 800b5b8:	4626      	mov	r6, r4
 800b5ba:	2e00      	cmp	r6, #0
 800b5bc:	d140      	bne.n	800b640 <_malloc_r+0xcc>
 800b5be:	6823      	ldr	r3, [r4, #0]
 800b5c0:	4631      	mov	r1, r6
 800b5c2:	4638      	mov	r0, r7
 800b5c4:	eb04 0803 	add.w	r8, r4, r3
 800b5c8:	f000 fce2 	bl	800bf90 <_sbrk_r>
 800b5cc:	4580      	cmp	r8, r0
 800b5ce:	d13a      	bne.n	800b646 <_malloc_r+0xd2>
 800b5d0:	6821      	ldr	r1, [r4, #0]
 800b5d2:	3503      	adds	r5, #3
 800b5d4:	1a6d      	subs	r5, r5, r1
 800b5d6:	f025 0503 	bic.w	r5, r5, #3
 800b5da:	3508      	adds	r5, #8
 800b5dc:	2d0c      	cmp	r5, #12
 800b5de:	bf38      	it	cc
 800b5e0:	250c      	movcc	r5, #12
 800b5e2:	4638      	mov	r0, r7
 800b5e4:	4629      	mov	r1, r5
 800b5e6:	f7ff ffa5 	bl	800b534 <sbrk_aligned>
 800b5ea:	3001      	adds	r0, #1
 800b5ec:	d02b      	beq.n	800b646 <_malloc_r+0xd2>
 800b5ee:	6823      	ldr	r3, [r4, #0]
 800b5f0:	442b      	add	r3, r5
 800b5f2:	6023      	str	r3, [r4, #0]
 800b5f4:	e00e      	b.n	800b614 <_malloc_r+0xa0>
 800b5f6:	6822      	ldr	r2, [r4, #0]
 800b5f8:	1b52      	subs	r2, r2, r5
 800b5fa:	d41e      	bmi.n	800b63a <_malloc_r+0xc6>
 800b5fc:	2a0b      	cmp	r2, #11
 800b5fe:	d916      	bls.n	800b62e <_malloc_r+0xba>
 800b600:	1961      	adds	r1, r4, r5
 800b602:	42a3      	cmp	r3, r4
 800b604:	6025      	str	r5, [r4, #0]
 800b606:	bf18      	it	ne
 800b608:	6059      	strne	r1, [r3, #4]
 800b60a:	6863      	ldr	r3, [r4, #4]
 800b60c:	bf08      	it	eq
 800b60e:	6031      	streq	r1, [r6, #0]
 800b610:	5162      	str	r2, [r4, r5]
 800b612:	604b      	str	r3, [r1, #4]
 800b614:	4638      	mov	r0, r7
 800b616:	f104 060b 	add.w	r6, r4, #11
 800b61a:	f000 ffd5 	bl	800c5c8 <__malloc_unlock>
 800b61e:	f026 0607 	bic.w	r6, r6, #7
 800b622:	1d23      	adds	r3, r4, #4
 800b624:	1af2      	subs	r2, r6, r3
 800b626:	d0b6      	beq.n	800b596 <_malloc_r+0x22>
 800b628:	1b9b      	subs	r3, r3, r6
 800b62a:	50a3      	str	r3, [r4, r2]
 800b62c:	e7b3      	b.n	800b596 <_malloc_r+0x22>
 800b62e:	6862      	ldr	r2, [r4, #4]
 800b630:	42a3      	cmp	r3, r4
 800b632:	bf0c      	ite	eq
 800b634:	6032      	streq	r2, [r6, #0]
 800b636:	605a      	strne	r2, [r3, #4]
 800b638:	e7ec      	b.n	800b614 <_malloc_r+0xa0>
 800b63a:	4623      	mov	r3, r4
 800b63c:	6864      	ldr	r4, [r4, #4]
 800b63e:	e7b2      	b.n	800b5a6 <_malloc_r+0x32>
 800b640:	4634      	mov	r4, r6
 800b642:	6876      	ldr	r6, [r6, #4]
 800b644:	e7b9      	b.n	800b5ba <_malloc_r+0x46>
 800b646:	230c      	movs	r3, #12
 800b648:	4638      	mov	r0, r7
 800b64a:	603b      	str	r3, [r7, #0]
 800b64c:	f000 ffbc 	bl	800c5c8 <__malloc_unlock>
 800b650:	e7a1      	b.n	800b596 <_malloc_r+0x22>
 800b652:	6025      	str	r5, [r4, #0]
 800b654:	e7de      	b.n	800b614 <_malloc_r+0xa0>
 800b656:	bf00      	nop
 800b658:	20000730 	.word	0x20000730

0800b65c <__ssputs_r>:
 800b65c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b660:	688e      	ldr	r6, [r1, #8]
 800b662:	4682      	mov	sl, r0
 800b664:	429e      	cmp	r6, r3
 800b666:	460c      	mov	r4, r1
 800b668:	4690      	mov	r8, r2
 800b66a:	461f      	mov	r7, r3
 800b66c:	d838      	bhi.n	800b6e0 <__ssputs_r+0x84>
 800b66e:	898a      	ldrh	r2, [r1, #12]
 800b670:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b674:	d032      	beq.n	800b6dc <__ssputs_r+0x80>
 800b676:	6825      	ldr	r5, [r4, #0]
 800b678:	6909      	ldr	r1, [r1, #16]
 800b67a:	3301      	adds	r3, #1
 800b67c:	eba5 0901 	sub.w	r9, r5, r1
 800b680:	6965      	ldr	r5, [r4, #20]
 800b682:	444b      	add	r3, r9
 800b684:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b688:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b68c:	106d      	asrs	r5, r5, #1
 800b68e:	429d      	cmp	r5, r3
 800b690:	bf38      	it	cc
 800b692:	461d      	movcc	r5, r3
 800b694:	0553      	lsls	r3, r2, #21
 800b696:	d531      	bpl.n	800b6fc <__ssputs_r+0xa0>
 800b698:	4629      	mov	r1, r5
 800b69a:	f7ff ff6b 	bl	800b574 <_malloc_r>
 800b69e:	4606      	mov	r6, r0
 800b6a0:	b950      	cbnz	r0, 800b6b8 <__ssputs_r+0x5c>
 800b6a2:	230c      	movs	r3, #12
 800b6a4:	f04f 30ff 	mov.w	r0, #4294967295
 800b6a8:	f8ca 3000 	str.w	r3, [sl]
 800b6ac:	89a3      	ldrh	r3, [r4, #12]
 800b6ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b6b2:	81a3      	strh	r3, [r4, #12]
 800b6b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6b8:	464a      	mov	r2, r9
 800b6ba:	6921      	ldr	r1, [r4, #16]
 800b6bc:	f7fc fa3e 	bl	8007b3c <memcpy>
 800b6c0:	89a3      	ldrh	r3, [r4, #12]
 800b6c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b6c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b6ca:	81a3      	strh	r3, [r4, #12]
 800b6cc:	6126      	str	r6, [r4, #16]
 800b6ce:	444e      	add	r6, r9
 800b6d0:	6026      	str	r6, [r4, #0]
 800b6d2:	463e      	mov	r6, r7
 800b6d4:	6165      	str	r5, [r4, #20]
 800b6d6:	eba5 0509 	sub.w	r5, r5, r9
 800b6da:	60a5      	str	r5, [r4, #8]
 800b6dc:	42be      	cmp	r6, r7
 800b6de:	d900      	bls.n	800b6e2 <__ssputs_r+0x86>
 800b6e0:	463e      	mov	r6, r7
 800b6e2:	4632      	mov	r2, r6
 800b6e4:	4641      	mov	r1, r8
 800b6e6:	6820      	ldr	r0, [r4, #0]
 800b6e8:	f000 ff4e 	bl	800c588 <memmove>
 800b6ec:	68a3      	ldr	r3, [r4, #8]
 800b6ee:	2000      	movs	r0, #0
 800b6f0:	1b9b      	subs	r3, r3, r6
 800b6f2:	60a3      	str	r3, [r4, #8]
 800b6f4:	6823      	ldr	r3, [r4, #0]
 800b6f6:	4433      	add	r3, r6
 800b6f8:	6023      	str	r3, [r4, #0]
 800b6fa:	e7db      	b.n	800b6b4 <__ssputs_r+0x58>
 800b6fc:	462a      	mov	r2, r5
 800b6fe:	f000 ff69 	bl	800c5d4 <_realloc_r>
 800b702:	4606      	mov	r6, r0
 800b704:	2800      	cmp	r0, #0
 800b706:	d1e1      	bne.n	800b6cc <__ssputs_r+0x70>
 800b708:	4650      	mov	r0, sl
 800b70a:	6921      	ldr	r1, [r4, #16]
 800b70c:	f7ff feca 	bl	800b4a4 <_free_r>
 800b710:	e7c7      	b.n	800b6a2 <__ssputs_r+0x46>
	...

0800b714 <_svfiprintf_r>:
 800b714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b718:	4698      	mov	r8, r3
 800b71a:	898b      	ldrh	r3, [r1, #12]
 800b71c:	4607      	mov	r7, r0
 800b71e:	061b      	lsls	r3, r3, #24
 800b720:	460d      	mov	r5, r1
 800b722:	4614      	mov	r4, r2
 800b724:	b09d      	sub	sp, #116	; 0x74
 800b726:	d50e      	bpl.n	800b746 <_svfiprintf_r+0x32>
 800b728:	690b      	ldr	r3, [r1, #16]
 800b72a:	b963      	cbnz	r3, 800b746 <_svfiprintf_r+0x32>
 800b72c:	2140      	movs	r1, #64	; 0x40
 800b72e:	f7ff ff21 	bl	800b574 <_malloc_r>
 800b732:	6028      	str	r0, [r5, #0]
 800b734:	6128      	str	r0, [r5, #16]
 800b736:	b920      	cbnz	r0, 800b742 <_svfiprintf_r+0x2e>
 800b738:	230c      	movs	r3, #12
 800b73a:	603b      	str	r3, [r7, #0]
 800b73c:	f04f 30ff 	mov.w	r0, #4294967295
 800b740:	e0d1      	b.n	800b8e6 <_svfiprintf_r+0x1d2>
 800b742:	2340      	movs	r3, #64	; 0x40
 800b744:	616b      	str	r3, [r5, #20]
 800b746:	2300      	movs	r3, #0
 800b748:	9309      	str	r3, [sp, #36]	; 0x24
 800b74a:	2320      	movs	r3, #32
 800b74c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b750:	2330      	movs	r3, #48	; 0x30
 800b752:	f04f 0901 	mov.w	r9, #1
 800b756:	f8cd 800c 	str.w	r8, [sp, #12]
 800b75a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b900 <_svfiprintf_r+0x1ec>
 800b75e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b762:	4623      	mov	r3, r4
 800b764:	469a      	mov	sl, r3
 800b766:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b76a:	b10a      	cbz	r2, 800b770 <_svfiprintf_r+0x5c>
 800b76c:	2a25      	cmp	r2, #37	; 0x25
 800b76e:	d1f9      	bne.n	800b764 <_svfiprintf_r+0x50>
 800b770:	ebba 0b04 	subs.w	fp, sl, r4
 800b774:	d00b      	beq.n	800b78e <_svfiprintf_r+0x7a>
 800b776:	465b      	mov	r3, fp
 800b778:	4622      	mov	r2, r4
 800b77a:	4629      	mov	r1, r5
 800b77c:	4638      	mov	r0, r7
 800b77e:	f7ff ff6d 	bl	800b65c <__ssputs_r>
 800b782:	3001      	adds	r0, #1
 800b784:	f000 80aa 	beq.w	800b8dc <_svfiprintf_r+0x1c8>
 800b788:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b78a:	445a      	add	r2, fp
 800b78c:	9209      	str	r2, [sp, #36]	; 0x24
 800b78e:	f89a 3000 	ldrb.w	r3, [sl]
 800b792:	2b00      	cmp	r3, #0
 800b794:	f000 80a2 	beq.w	800b8dc <_svfiprintf_r+0x1c8>
 800b798:	2300      	movs	r3, #0
 800b79a:	f04f 32ff 	mov.w	r2, #4294967295
 800b79e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b7a2:	f10a 0a01 	add.w	sl, sl, #1
 800b7a6:	9304      	str	r3, [sp, #16]
 800b7a8:	9307      	str	r3, [sp, #28]
 800b7aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b7ae:	931a      	str	r3, [sp, #104]	; 0x68
 800b7b0:	4654      	mov	r4, sl
 800b7b2:	2205      	movs	r2, #5
 800b7b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7b8:	4851      	ldr	r0, [pc, #324]	; (800b900 <_svfiprintf_r+0x1ec>)
 800b7ba:	f7ff f999 	bl	800aaf0 <memchr>
 800b7be:	9a04      	ldr	r2, [sp, #16]
 800b7c0:	b9d8      	cbnz	r0, 800b7fa <_svfiprintf_r+0xe6>
 800b7c2:	06d0      	lsls	r0, r2, #27
 800b7c4:	bf44      	itt	mi
 800b7c6:	2320      	movmi	r3, #32
 800b7c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b7cc:	0711      	lsls	r1, r2, #28
 800b7ce:	bf44      	itt	mi
 800b7d0:	232b      	movmi	r3, #43	; 0x2b
 800b7d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b7d6:	f89a 3000 	ldrb.w	r3, [sl]
 800b7da:	2b2a      	cmp	r3, #42	; 0x2a
 800b7dc:	d015      	beq.n	800b80a <_svfiprintf_r+0xf6>
 800b7de:	4654      	mov	r4, sl
 800b7e0:	2000      	movs	r0, #0
 800b7e2:	f04f 0c0a 	mov.w	ip, #10
 800b7e6:	9a07      	ldr	r2, [sp, #28]
 800b7e8:	4621      	mov	r1, r4
 800b7ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b7ee:	3b30      	subs	r3, #48	; 0x30
 800b7f0:	2b09      	cmp	r3, #9
 800b7f2:	d94e      	bls.n	800b892 <_svfiprintf_r+0x17e>
 800b7f4:	b1b0      	cbz	r0, 800b824 <_svfiprintf_r+0x110>
 800b7f6:	9207      	str	r2, [sp, #28]
 800b7f8:	e014      	b.n	800b824 <_svfiprintf_r+0x110>
 800b7fa:	eba0 0308 	sub.w	r3, r0, r8
 800b7fe:	fa09 f303 	lsl.w	r3, r9, r3
 800b802:	4313      	orrs	r3, r2
 800b804:	46a2      	mov	sl, r4
 800b806:	9304      	str	r3, [sp, #16]
 800b808:	e7d2      	b.n	800b7b0 <_svfiprintf_r+0x9c>
 800b80a:	9b03      	ldr	r3, [sp, #12]
 800b80c:	1d19      	adds	r1, r3, #4
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	9103      	str	r1, [sp, #12]
 800b812:	2b00      	cmp	r3, #0
 800b814:	bfbb      	ittet	lt
 800b816:	425b      	neglt	r3, r3
 800b818:	f042 0202 	orrlt.w	r2, r2, #2
 800b81c:	9307      	strge	r3, [sp, #28]
 800b81e:	9307      	strlt	r3, [sp, #28]
 800b820:	bfb8      	it	lt
 800b822:	9204      	strlt	r2, [sp, #16]
 800b824:	7823      	ldrb	r3, [r4, #0]
 800b826:	2b2e      	cmp	r3, #46	; 0x2e
 800b828:	d10c      	bne.n	800b844 <_svfiprintf_r+0x130>
 800b82a:	7863      	ldrb	r3, [r4, #1]
 800b82c:	2b2a      	cmp	r3, #42	; 0x2a
 800b82e:	d135      	bne.n	800b89c <_svfiprintf_r+0x188>
 800b830:	9b03      	ldr	r3, [sp, #12]
 800b832:	3402      	adds	r4, #2
 800b834:	1d1a      	adds	r2, r3, #4
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	9203      	str	r2, [sp, #12]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	bfb8      	it	lt
 800b83e:	f04f 33ff 	movlt.w	r3, #4294967295
 800b842:	9305      	str	r3, [sp, #20]
 800b844:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800b904 <_svfiprintf_r+0x1f0>
 800b848:	2203      	movs	r2, #3
 800b84a:	4650      	mov	r0, sl
 800b84c:	7821      	ldrb	r1, [r4, #0]
 800b84e:	f7ff f94f 	bl	800aaf0 <memchr>
 800b852:	b140      	cbz	r0, 800b866 <_svfiprintf_r+0x152>
 800b854:	2340      	movs	r3, #64	; 0x40
 800b856:	eba0 000a 	sub.w	r0, r0, sl
 800b85a:	fa03 f000 	lsl.w	r0, r3, r0
 800b85e:	9b04      	ldr	r3, [sp, #16]
 800b860:	3401      	adds	r4, #1
 800b862:	4303      	orrs	r3, r0
 800b864:	9304      	str	r3, [sp, #16]
 800b866:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b86a:	2206      	movs	r2, #6
 800b86c:	4826      	ldr	r0, [pc, #152]	; (800b908 <_svfiprintf_r+0x1f4>)
 800b86e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b872:	f7ff f93d 	bl	800aaf0 <memchr>
 800b876:	2800      	cmp	r0, #0
 800b878:	d038      	beq.n	800b8ec <_svfiprintf_r+0x1d8>
 800b87a:	4b24      	ldr	r3, [pc, #144]	; (800b90c <_svfiprintf_r+0x1f8>)
 800b87c:	bb1b      	cbnz	r3, 800b8c6 <_svfiprintf_r+0x1b2>
 800b87e:	9b03      	ldr	r3, [sp, #12]
 800b880:	3307      	adds	r3, #7
 800b882:	f023 0307 	bic.w	r3, r3, #7
 800b886:	3308      	adds	r3, #8
 800b888:	9303      	str	r3, [sp, #12]
 800b88a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b88c:	4433      	add	r3, r6
 800b88e:	9309      	str	r3, [sp, #36]	; 0x24
 800b890:	e767      	b.n	800b762 <_svfiprintf_r+0x4e>
 800b892:	460c      	mov	r4, r1
 800b894:	2001      	movs	r0, #1
 800b896:	fb0c 3202 	mla	r2, ip, r2, r3
 800b89a:	e7a5      	b.n	800b7e8 <_svfiprintf_r+0xd4>
 800b89c:	2300      	movs	r3, #0
 800b89e:	f04f 0c0a 	mov.w	ip, #10
 800b8a2:	4619      	mov	r1, r3
 800b8a4:	3401      	adds	r4, #1
 800b8a6:	9305      	str	r3, [sp, #20]
 800b8a8:	4620      	mov	r0, r4
 800b8aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b8ae:	3a30      	subs	r2, #48	; 0x30
 800b8b0:	2a09      	cmp	r2, #9
 800b8b2:	d903      	bls.n	800b8bc <_svfiprintf_r+0x1a8>
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d0c5      	beq.n	800b844 <_svfiprintf_r+0x130>
 800b8b8:	9105      	str	r1, [sp, #20]
 800b8ba:	e7c3      	b.n	800b844 <_svfiprintf_r+0x130>
 800b8bc:	4604      	mov	r4, r0
 800b8be:	2301      	movs	r3, #1
 800b8c0:	fb0c 2101 	mla	r1, ip, r1, r2
 800b8c4:	e7f0      	b.n	800b8a8 <_svfiprintf_r+0x194>
 800b8c6:	ab03      	add	r3, sp, #12
 800b8c8:	9300      	str	r3, [sp, #0]
 800b8ca:	462a      	mov	r2, r5
 800b8cc:	4638      	mov	r0, r7
 800b8ce:	4b10      	ldr	r3, [pc, #64]	; (800b910 <_svfiprintf_r+0x1fc>)
 800b8d0:	a904      	add	r1, sp, #16
 800b8d2:	f7fc f9e7 	bl	8007ca4 <_printf_float>
 800b8d6:	1c42      	adds	r2, r0, #1
 800b8d8:	4606      	mov	r6, r0
 800b8da:	d1d6      	bne.n	800b88a <_svfiprintf_r+0x176>
 800b8dc:	89ab      	ldrh	r3, [r5, #12]
 800b8de:	065b      	lsls	r3, r3, #25
 800b8e0:	f53f af2c 	bmi.w	800b73c <_svfiprintf_r+0x28>
 800b8e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b8e6:	b01d      	add	sp, #116	; 0x74
 800b8e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8ec:	ab03      	add	r3, sp, #12
 800b8ee:	9300      	str	r3, [sp, #0]
 800b8f0:	462a      	mov	r2, r5
 800b8f2:	4638      	mov	r0, r7
 800b8f4:	4b06      	ldr	r3, [pc, #24]	; (800b910 <_svfiprintf_r+0x1fc>)
 800b8f6:	a904      	add	r1, sp, #16
 800b8f8:	f7fc fc70 	bl	80081dc <_printf_i>
 800b8fc:	e7eb      	b.n	800b8d6 <_svfiprintf_r+0x1c2>
 800b8fe:	bf00      	nop
 800b900:	0800d0cc 	.word	0x0800d0cc
 800b904:	0800d0d2 	.word	0x0800d0d2
 800b908:	0800d0d6 	.word	0x0800d0d6
 800b90c:	08007ca5 	.word	0x08007ca5
 800b910:	0800b65d 	.word	0x0800b65d

0800b914 <_sungetc_r>:
 800b914:	b538      	push	{r3, r4, r5, lr}
 800b916:	1c4b      	adds	r3, r1, #1
 800b918:	4614      	mov	r4, r2
 800b91a:	d103      	bne.n	800b924 <_sungetc_r+0x10>
 800b91c:	f04f 35ff 	mov.w	r5, #4294967295
 800b920:	4628      	mov	r0, r5
 800b922:	bd38      	pop	{r3, r4, r5, pc}
 800b924:	8993      	ldrh	r3, [r2, #12]
 800b926:	b2cd      	uxtb	r5, r1
 800b928:	f023 0320 	bic.w	r3, r3, #32
 800b92c:	8193      	strh	r3, [r2, #12]
 800b92e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b930:	6852      	ldr	r2, [r2, #4]
 800b932:	b18b      	cbz	r3, 800b958 <_sungetc_r+0x44>
 800b934:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b936:	4293      	cmp	r3, r2
 800b938:	dd08      	ble.n	800b94c <_sungetc_r+0x38>
 800b93a:	6823      	ldr	r3, [r4, #0]
 800b93c:	1e5a      	subs	r2, r3, #1
 800b93e:	6022      	str	r2, [r4, #0]
 800b940:	f803 5c01 	strb.w	r5, [r3, #-1]
 800b944:	6863      	ldr	r3, [r4, #4]
 800b946:	3301      	adds	r3, #1
 800b948:	6063      	str	r3, [r4, #4]
 800b94a:	e7e9      	b.n	800b920 <_sungetc_r+0xc>
 800b94c:	4621      	mov	r1, r4
 800b94e:	f000 fbef 	bl	800c130 <__submore>
 800b952:	2800      	cmp	r0, #0
 800b954:	d0f1      	beq.n	800b93a <_sungetc_r+0x26>
 800b956:	e7e1      	b.n	800b91c <_sungetc_r+0x8>
 800b958:	6921      	ldr	r1, [r4, #16]
 800b95a:	6823      	ldr	r3, [r4, #0]
 800b95c:	b151      	cbz	r1, 800b974 <_sungetc_r+0x60>
 800b95e:	4299      	cmp	r1, r3
 800b960:	d208      	bcs.n	800b974 <_sungetc_r+0x60>
 800b962:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800b966:	42a9      	cmp	r1, r5
 800b968:	d104      	bne.n	800b974 <_sungetc_r+0x60>
 800b96a:	3b01      	subs	r3, #1
 800b96c:	3201      	adds	r2, #1
 800b96e:	6023      	str	r3, [r4, #0]
 800b970:	6062      	str	r2, [r4, #4]
 800b972:	e7d5      	b.n	800b920 <_sungetc_r+0xc>
 800b974:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800b978:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b97c:	6363      	str	r3, [r4, #52]	; 0x34
 800b97e:	2303      	movs	r3, #3
 800b980:	63a3      	str	r3, [r4, #56]	; 0x38
 800b982:	4623      	mov	r3, r4
 800b984:	f803 5f46 	strb.w	r5, [r3, #70]!
 800b988:	6023      	str	r3, [r4, #0]
 800b98a:	2301      	movs	r3, #1
 800b98c:	e7dc      	b.n	800b948 <_sungetc_r+0x34>

0800b98e <__ssrefill_r>:
 800b98e:	b510      	push	{r4, lr}
 800b990:	460c      	mov	r4, r1
 800b992:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b994:	b169      	cbz	r1, 800b9b2 <__ssrefill_r+0x24>
 800b996:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b99a:	4299      	cmp	r1, r3
 800b99c:	d001      	beq.n	800b9a2 <__ssrefill_r+0x14>
 800b99e:	f7ff fd81 	bl	800b4a4 <_free_r>
 800b9a2:	2000      	movs	r0, #0
 800b9a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b9a6:	6360      	str	r0, [r4, #52]	; 0x34
 800b9a8:	6063      	str	r3, [r4, #4]
 800b9aa:	b113      	cbz	r3, 800b9b2 <__ssrefill_r+0x24>
 800b9ac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b9ae:	6023      	str	r3, [r4, #0]
 800b9b0:	bd10      	pop	{r4, pc}
 800b9b2:	6923      	ldr	r3, [r4, #16]
 800b9b4:	f04f 30ff 	mov.w	r0, #4294967295
 800b9b8:	6023      	str	r3, [r4, #0]
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	6063      	str	r3, [r4, #4]
 800b9be:	89a3      	ldrh	r3, [r4, #12]
 800b9c0:	f043 0320 	orr.w	r3, r3, #32
 800b9c4:	81a3      	strh	r3, [r4, #12]
 800b9c6:	e7f3      	b.n	800b9b0 <__ssrefill_r+0x22>

0800b9c8 <__ssvfiscanf_r>:
 800b9c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9cc:	460c      	mov	r4, r1
 800b9ce:	2100      	movs	r1, #0
 800b9d0:	4606      	mov	r6, r0
 800b9d2:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800b9d6:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800b9da:	49a7      	ldr	r1, [pc, #668]	; (800bc78 <__ssvfiscanf_r+0x2b0>)
 800b9dc:	f10d 0804 	add.w	r8, sp, #4
 800b9e0:	91a0      	str	r1, [sp, #640]	; 0x280
 800b9e2:	49a6      	ldr	r1, [pc, #664]	; (800bc7c <__ssvfiscanf_r+0x2b4>)
 800b9e4:	4fa6      	ldr	r7, [pc, #664]	; (800bc80 <__ssvfiscanf_r+0x2b8>)
 800b9e6:	f8df 929c 	ldr.w	r9, [pc, #668]	; 800bc84 <__ssvfiscanf_r+0x2bc>
 800b9ea:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800b9ee:	91a1      	str	r1, [sp, #644]	; 0x284
 800b9f0:	9300      	str	r3, [sp, #0]
 800b9f2:	7813      	ldrb	r3, [r2, #0]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	f000 815c 	beq.w	800bcb2 <__ssvfiscanf_r+0x2ea>
 800b9fa:	5dd9      	ldrb	r1, [r3, r7]
 800b9fc:	1c55      	adds	r5, r2, #1
 800b9fe:	f011 0108 	ands.w	r1, r1, #8
 800ba02:	d019      	beq.n	800ba38 <__ssvfiscanf_r+0x70>
 800ba04:	6863      	ldr	r3, [r4, #4]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	dd0f      	ble.n	800ba2a <__ssvfiscanf_r+0x62>
 800ba0a:	6823      	ldr	r3, [r4, #0]
 800ba0c:	781a      	ldrb	r2, [r3, #0]
 800ba0e:	5cba      	ldrb	r2, [r7, r2]
 800ba10:	0712      	lsls	r2, r2, #28
 800ba12:	d401      	bmi.n	800ba18 <__ssvfiscanf_r+0x50>
 800ba14:	462a      	mov	r2, r5
 800ba16:	e7ec      	b.n	800b9f2 <__ssvfiscanf_r+0x2a>
 800ba18:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ba1a:	3301      	adds	r3, #1
 800ba1c:	3201      	adds	r2, #1
 800ba1e:	9245      	str	r2, [sp, #276]	; 0x114
 800ba20:	6862      	ldr	r2, [r4, #4]
 800ba22:	6023      	str	r3, [r4, #0]
 800ba24:	3a01      	subs	r2, #1
 800ba26:	6062      	str	r2, [r4, #4]
 800ba28:	e7ec      	b.n	800ba04 <__ssvfiscanf_r+0x3c>
 800ba2a:	4621      	mov	r1, r4
 800ba2c:	4630      	mov	r0, r6
 800ba2e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ba30:	4798      	blx	r3
 800ba32:	2800      	cmp	r0, #0
 800ba34:	d0e9      	beq.n	800ba0a <__ssvfiscanf_r+0x42>
 800ba36:	e7ed      	b.n	800ba14 <__ssvfiscanf_r+0x4c>
 800ba38:	2b25      	cmp	r3, #37	; 0x25
 800ba3a:	d012      	beq.n	800ba62 <__ssvfiscanf_r+0x9a>
 800ba3c:	469a      	mov	sl, r3
 800ba3e:	6863      	ldr	r3, [r4, #4]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	f340 8094 	ble.w	800bb6e <__ssvfiscanf_r+0x1a6>
 800ba46:	6822      	ldr	r2, [r4, #0]
 800ba48:	7813      	ldrb	r3, [r2, #0]
 800ba4a:	4553      	cmp	r3, sl
 800ba4c:	f040 8131 	bne.w	800bcb2 <__ssvfiscanf_r+0x2ea>
 800ba50:	6863      	ldr	r3, [r4, #4]
 800ba52:	3201      	adds	r2, #1
 800ba54:	3b01      	subs	r3, #1
 800ba56:	6063      	str	r3, [r4, #4]
 800ba58:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800ba5a:	6022      	str	r2, [r4, #0]
 800ba5c:	3301      	adds	r3, #1
 800ba5e:	9345      	str	r3, [sp, #276]	; 0x114
 800ba60:	e7d8      	b.n	800ba14 <__ssvfiscanf_r+0x4c>
 800ba62:	9141      	str	r1, [sp, #260]	; 0x104
 800ba64:	9143      	str	r1, [sp, #268]	; 0x10c
 800ba66:	7853      	ldrb	r3, [r2, #1]
 800ba68:	2b2a      	cmp	r3, #42	; 0x2a
 800ba6a:	bf04      	itt	eq
 800ba6c:	2310      	moveq	r3, #16
 800ba6e:	1c95      	addeq	r5, r2, #2
 800ba70:	f04f 020a 	mov.w	r2, #10
 800ba74:	bf08      	it	eq
 800ba76:	9341      	streq	r3, [sp, #260]	; 0x104
 800ba78:	46aa      	mov	sl, r5
 800ba7a:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800ba7e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800ba82:	2b09      	cmp	r3, #9
 800ba84:	d91d      	bls.n	800bac2 <__ssvfiscanf_r+0xfa>
 800ba86:	2203      	movs	r2, #3
 800ba88:	487e      	ldr	r0, [pc, #504]	; (800bc84 <__ssvfiscanf_r+0x2bc>)
 800ba8a:	f7ff f831 	bl	800aaf0 <memchr>
 800ba8e:	b140      	cbz	r0, 800baa2 <__ssvfiscanf_r+0xda>
 800ba90:	2301      	movs	r3, #1
 800ba92:	4655      	mov	r5, sl
 800ba94:	eba0 0009 	sub.w	r0, r0, r9
 800ba98:	fa03 f000 	lsl.w	r0, r3, r0
 800ba9c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ba9e:	4318      	orrs	r0, r3
 800baa0:	9041      	str	r0, [sp, #260]	; 0x104
 800baa2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800baa6:	2b78      	cmp	r3, #120	; 0x78
 800baa8:	d806      	bhi.n	800bab8 <__ssvfiscanf_r+0xf0>
 800baaa:	2b57      	cmp	r3, #87	; 0x57
 800baac:	d810      	bhi.n	800bad0 <__ssvfiscanf_r+0x108>
 800baae:	2b25      	cmp	r3, #37	; 0x25
 800bab0:	d0c4      	beq.n	800ba3c <__ssvfiscanf_r+0x74>
 800bab2:	d857      	bhi.n	800bb64 <__ssvfiscanf_r+0x19c>
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d065      	beq.n	800bb84 <__ssvfiscanf_r+0x1bc>
 800bab8:	2303      	movs	r3, #3
 800baba:	9347      	str	r3, [sp, #284]	; 0x11c
 800babc:	230a      	movs	r3, #10
 800babe:	9342      	str	r3, [sp, #264]	; 0x108
 800bac0:	e072      	b.n	800bba8 <__ssvfiscanf_r+0x1e0>
 800bac2:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800bac4:	4655      	mov	r5, sl
 800bac6:	fb02 1103 	mla	r1, r2, r3, r1
 800baca:	3930      	subs	r1, #48	; 0x30
 800bacc:	9143      	str	r1, [sp, #268]	; 0x10c
 800bace:	e7d3      	b.n	800ba78 <__ssvfiscanf_r+0xb0>
 800bad0:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800bad4:	2a20      	cmp	r2, #32
 800bad6:	d8ef      	bhi.n	800bab8 <__ssvfiscanf_r+0xf0>
 800bad8:	a101      	add	r1, pc, #4	; (adr r1, 800bae0 <__ssvfiscanf_r+0x118>)
 800bada:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800bade:	bf00      	nop
 800bae0:	0800bb93 	.word	0x0800bb93
 800bae4:	0800bab9 	.word	0x0800bab9
 800bae8:	0800bab9 	.word	0x0800bab9
 800baec:	0800bbf1 	.word	0x0800bbf1
 800baf0:	0800bab9 	.word	0x0800bab9
 800baf4:	0800bab9 	.word	0x0800bab9
 800baf8:	0800bab9 	.word	0x0800bab9
 800bafc:	0800bab9 	.word	0x0800bab9
 800bb00:	0800bab9 	.word	0x0800bab9
 800bb04:	0800bab9 	.word	0x0800bab9
 800bb08:	0800bab9 	.word	0x0800bab9
 800bb0c:	0800bc07 	.word	0x0800bc07
 800bb10:	0800bbdd 	.word	0x0800bbdd
 800bb14:	0800bb6b 	.word	0x0800bb6b
 800bb18:	0800bb6b 	.word	0x0800bb6b
 800bb1c:	0800bb6b 	.word	0x0800bb6b
 800bb20:	0800bab9 	.word	0x0800bab9
 800bb24:	0800bbe1 	.word	0x0800bbe1
 800bb28:	0800bab9 	.word	0x0800bab9
 800bb2c:	0800bab9 	.word	0x0800bab9
 800bb30:	0800bab9 	.word	0x0800bab9
 800bb34:	0800bab9 	.word	0x0800bab9
 800bb38:	0800bc17 	.word	0x0800bc17
 800bb3c:	0800bbe9 	.word	0x0800bbe9
 800bb40:	0800bb8b 	.word	0x0800bb8b
 800bb44:	0800bab9 	.word	0x0800bab9
 800bb48:	0800bab9 	.word	0x0800bab9
 800bb4c:	0800bc13 	.word	0x0800bc13
 800bb50:	0800bab9 	.word	0x0800bab9
 800bb54:	0800bbdd 	.word	0x0800bbdd
 800bb58:	0800bab9 	.word	0x0800bab9
 800bb5c:	0800bab9 	.word	0x0800bab9
 800bb60:	0800bb93 	.word	0x0800bb93
 800bb64:	3b45      	subs	r3, #69	; 0x45
 800bb66:	2b02      	cmp	r3, #2
 800bb68:	d8a6      	bhi.n	800bab8 <__ssvfiscanf_r+0xf0>
 800bb6a:	2305      	movs	r3, #5
 800bb6c:	e01b      	b.n	800bba6 <__ssvfiscanf_r+0x1de>
 800bb6e:	4621      	mov	r1, r4
 800bb70:	4630      	mov	r0, r6
 800bb72:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bb74:	4798      	blx	r3
 800bb76:	2800      	cmp	r0, #0
 800bb78:	f43f af65 	beq.w	800ba46 <__ssvfiscanf_r+0x7e>
 800bb7c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800bb7e:	2800      	cmp	r0, #0
 800bb80:	f040 808d 	bne.w	800bc9e <__ssvfiscanf_r+0x2d6>
 800bb84:	f04f 30ff 	mov.w	r0, #4294967295
 800bb88:	e08f      	b.n	800bcaa <__ssvfiscanf_r+0x2e2>
 800bb8a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800bb8c:	f042 0220 	orr.w	r2, r2, #32
 800bb90:	9241      	str	r2, [sp, #260]	; 0x104
 800bb92:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800bb94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bb98:	9241      	str	r2, [sp, #260]	; 0x104
 800bb9a:	2210      	movs	r2, #16
 800bb9c:	2b6f      	cmp	r3, #111	; 0x6f
 800bb9e:	bf34      	ite	cc
 800bba0:	2303      	movcc	r3, #3
 800bba2:	2304      	movcs	r3, #4
 800bba4:	9242      	str	r2, [sp, #264]	; 0x108
 800bba6:	9347      	str	r3, [sp, #284]	; 0x11c
 800bba8:	6863      	ldr	r3, [r4, #4]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	dd42      	ble.n	800bc34 <__ssvfiscanf_r+0x26c>
 800bbae:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bbb0:	0659      	lsls	r1, r3, #25
 800bbb2:	d404      	bmi.n	800bbbe <__ssvfiscanf_r+0x1f6>
 800bbb4:	6823      	ldr	r3, [r4, #0]
 800bbb6:	781a      	ldrb	r2, [r3, #0]
 800bbb8:	5cba      	ldrb	r2, [r7, r2]
 800bbba:	0712      	lsls	r2, r2, #28
 800bbbc:	d441      	bmi.n	800bc42 <__ssvfiscanf_r+0x27a>
 800bbbe:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800bbc0:	2b02      	cmp	r3, #2
 800bbc2:	dc50      	bgt.n	800bc66 <__ssvfiscanf_r+0x29e>
 800bbc4:	466b      	mov	r3, sp
 800bbc6:	4622      	mov	r2, r4
 800bbc8:	4630      	mov	r0, r6
 800bbca:	a941      	add	r1, sp, #260	; 0x104
 800bbcc:	f000 f876 	bl	800bcbc <_scanf_chars>
 800bbd0:	2801      	cmp	r0, #1
 800bbd2:	d06e      	beq.n	800bcb2 <__ssvfiscanf_r+0x2ea>
 800bbd4:	2802      	cmp	r0, #2
 800bbd6:	f47f af1d 	bne.w	800ba14 <__ssvfiscanf_r+0x4c>
 800bbda:	e7cf      	b.n	800bb7c <__ssvfiscanf_r+0x1b4>
 800bbdc:	220a      	movs	r2, #10
 800bbde:	e7dd      	b.n	800bb9c <__ssvfiscanf_r+0x1d4>
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	9342      	str	r3, [sp, #264]	; 0x108
 800bbe4:	2303      	movs	r3, #3
 800bbe6:	e7de      	b.n	800bba6 <__ssvfiscanf_r+0x1de>
 800bbe8:	2308      	movs	r3, #8
 800bbea:	9342      	str	r3, [sp, #264]	; 0x108
 800bbec:	2304      	movs	r3, #4
 800bbee:	e7da      	b.n	800bba6 <__ssvfiscanf_r+0x1de>
 800bbf0:	4629      	mov	r1, r5
 800bbf2:	4640      	mov	r0, r8
 800bbf4:	f000 f9dc 	bl	800bfb0 <__sccl>
 800bbf8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bbfa:	4605      	mov	r5, r0
 800bbfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc00:	9341      	str	r3, [sp, #260]	; 0x104
 800bc02:	2301      	movs	r3, #1
 800bc04:	e7cf      	b.n	800bba6 <__ssvfiscanf_r+0x1de>
 800bc06:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bc08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc0c:	9341      	str	r3, [sp, #260]	; 0x104
 800bc0e:	2300      	movs	r3, #0
 800bc10:	e7c9      	b.n	800bba6 <__ssvfiscanf_r+0x1de>
 800bc12:	2302      	movs	r3, #2
 800bc14:	e7c7      	b.n	800bba6 <__ssvfiscanf_r+0x1de>
 800bc16:	9841      	ldr	r0, [sp, #260]	; 0x104
 800bc18:	06c3      	lsls	r3, r0, #27
 800bc1a:	f53f aefb 	bmi.w	800ba14 <__ssvfiscanf_r+0x4c>
 800bc1e:	9b00      	ldr	r3, [sp, #0]
 800bc20:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800bc22:	1d19      	adds	r1, r3, #4
 800bc24:	9100      	str	r1, [sp, #0]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	f010 0f01 	tst.w	r0, #1
 800bc2c:	bf14      	ite	ne
 800bc2e:	801a      	strhne	r2, [r3, #0]
 800bc30:	601a      	streq	r2, [r3, #0]
 800bc32:	e6ef      	b.n	800ba14 <__ssvfiscanf_r+0x4c>
 800bc34:	4621      	mov	r1, r4
 800bc36:	4630      	mov	r0, r6
 800bc38:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bc3a:	4798      	blx	r3
 800bc3c:	2800      	cmp	r0, #0
 800bc3e:	d0b6      	beq.n	800bbae <__ssvfiscanf_r+0x1e6>
 800bc40:	e79c      	b.n	800bb7c <__ssvfiscanf_r+0x1b4>
 800bc42:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800bc44:	3201      	adds	r2, #1
 800bc46:	9245      	str	r2, [sp, #276]	; 0x114
 800bc48:	6862      	ldr	r2, [r4, #4]
 800bc4a:	3a01      	subs	r2, #1
 800bc4c:	2a00      	cmp	r2, #0
 800bc4e:	6062      	str	r2, [r4, #4]
 800bc50:	dd02      	ble.n	800bc58 <__ssvfiscanf_r+0x290>
 800bc52:	3301      	adds	r3, #1
 800bc54:	6023      	str	r3, [r4, #0]
 800bc56:	e7ad      	b.n	800bbb4 <__ssvfiscanf_r+0x1ec>
 800bc58:	4621      	mov	r1, r4
 800bc5a:	4630      	mov	r0, r6
 800bc5c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bc5e:	4798      	blx	r3
 800bc60:	2800      	cmp	r0, #0
 800bc62:	d0a7      	beq.n	800bbb4 <__ssvfiscanf_r+0x1ec>
 800bc64:	e78a      	b.n	800bb7c <__ssvfiscanf_r+0x1b4>
 800bc66:	2b04      	cmp	r3, #4
 800bc68:	dc0e      	bgt.n	800bc88 <__ssvfiscanf_r+0x2c0>
 800bc6a:	466b      	mov	r3, sp
 800bc6c:	4622      	mov	r2, r4
 800bc6e:	4630      	mov	r0, r6
 800bc70:	a941      	add	r1, sp, #260	; 0x104
 800bc72:	f000 f87d 	bl	800bd70 <_scanf_i>
 800bc76:	e7ab      	b.n	800bbd0 <__ssvfiscanf_r+0x208>
 800bc78:	0800b915 	.word	0x0800b915
 800bc7c:	0800b98f 	.word	0x0800b98f
 800bc80:	0800cd69 	.word	0x0800cd69
 800bc84:	0800d0d2 	.word	0x0800d0d2
 800bc88:	4b0b      	ldr	r3, [pc, #44]	; (800bcb8 <__ssvfiscanf_r+0x2f0>)
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	f43f aec2 	beq.w	800ba14 <__ssvfiscanf_r+0x4c>
 800bc90:	466b      	mov	r3, sp
 800bc92:	4622      	mov	r2, r4
 800bc94:	4630      	mov	r0, r6
 800bc96:	a941      	add	r1, sp, #260	; 0x104
 800bc98:	f7fc fbc6 	bl	8008428 <_scanf_float>
 800bc9c:	e798      	b.n	800bbd0 <__ssvfiscanf_r+0x208>
 800bc9e:	89a3      	ldrh	r3, [r4, #12]
 800bca0:	f013 0f40 	tst.w	r3, #64	; 0x40
 800bca4:	bf18      	it	ne
 800bca6:	f04f 30ff 	movne.w	r0, #4294967295
 800bcaa:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800bcae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcb2:	9844      	ldr	r0, [sp, #272]	; 0x110
 800bcb4:	e7f9      	b.n	800bcaa <__ssvfiscanf_r+0x2e2>
 800bcb6:	bf00      	nop
 800bcb8:	08008429 	.word	0x08008429

0800bcbc <_scanf_chars>:
 800bcbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bcc0:	4615      	mov	r5, r2
 800bcc2:	688a      	ldr	r2, [r1, #8]
 800bcc4:	4680      	mov	r8, r0
 800bcc6:	460c      	mov	r4, r1
 800bcc8:	b932      	cbnz	r2, 800bcd8 <_scanf_chars+0x1c>
 800bcca:	698a      	ldr	r2, [r1, #24]
 800bccc:	2a00      	cmp	r2, #0
 800bcce:	bf0c      	ite	eq
 800bcd0:	2201      	moveq	r2, #1
 800bcd2:	f04f 32ff 	movne.w	r2, #4294967295
 800bcd6:	608a      	str	r2, [r1, #8]
 800bcd8:	2700      	movs	r7, #0
 800bcda:	6822      	ldr	r2, [r4, #0]
 800bcdc:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800bd6c <_scanf_chars+0xb0>
 800bce0:	06d1      	lsls	r1, r2, #27
 800bce2:	bf5f      	itttt	pl
 800bce4:	681a      	ldrpl	r2, [r3, #0]
 800bce6:	1d11      	addpl	r1, r2, #4
 800bce8:	6019      	strpl	r1, [r3, #0]
 800bcea:	6816      	ldrpl	r6, [r2, #0]
 800bcec:	69a0      	ldr	r0, [r4, #24]
 800bcee:	b188      	cbz	r0, 800bd14 <_scanf_chars+0x58>
 800bcf0:	2801      	cmp	r0, #1
 800bcf2:	d107      	bne.n	800bd04 <_scanf_chars+0x48>
 800bcf4:	682b      	ldr	r3, [r5, #0]
 800bcf6:	781a      	ldrb	r2, [r3, #0]
 800bcf8:	6963      	ldr	r3, [r4, #20]
 800bcfa:	5c9b      	ldrb	r3, [r3, r2]
 800bcfc:	b953      	cbnz	r3, 800bd14 <_scanf_chars+0x58>
 800bcfe:	2f00      	cmp	r7, #0
 800bd00:	d031      	beq.n	800bd66 <_scanf_chars+0xaa>
 800bd02:	e022      	b.n	800bd4a <_scanf_chars+0x8e>
 800bd04:	2802      	cmp	r0, #2
 800bd06:	d120      	bne.n	800bd4a <_scanf_chars+0x8e>
 800bd08:	682b      	ldr	r3, [r5, #0]
 800bd0a:	781b      	ldrb	r3, [r3, #0]
 800bd0c:	f813 3009 	ldrb.w	r3, [r3, r9]
 800bd10:	071b      	lsls	r3, r3, #28
 800bd12:	d41a      	bmi.n	800bd4a <_scanf_chars+0x8e>
 800bd14:	6823      	ldr	r3, [r4, #0]
 800bd16:	3701      	adds	r7, #1
 800bd18:	06da      	lsls	r2, r3, #27
 800bd1a:	bf5e      	ittt	pl
 800bd1c:	682b      	ldrpl	r3, [r5, #0]
 800bd1e:	781b      	ldrbpl	r3, [r3, #0]
 800bd20:	f806 3b01 	strbpl.w	r3, [r6], #1
 800bd24:	682a      	ldr	r2, [r5, #0]
 800bd26:	686b      	ldr	r3, [r5, #4]
 800bd28:	3201      	adds	r2, #1
 800bd2a:	602a      	str	r2, [r5, #0]
 800bd2c:	68a2      	ldr	r2, [r4, #8]
 800bd2e:	3b01      	subs	r3, #1
 800bd30:	3a01      	subs	r2, #1
 800bd32:	606b      	str	r3, [r5, #4]
 800bd34:	60a2      	str	r2, [r4, #8]
 800bd36:	b142      	cbz	r2, 800bd4a <_scanf_chars+0x8e>
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	dcd7      	bgt.n	800bcec <_scanf_chars+0x30>
 800bd3c:	4629      	mov	r1, r5
 800bd3e:	4640      	mov	r0, r8
 800bd40:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800bd44:	4798      	blx	r3
 800bd46:	2800      	cmp	r0, #0
 800bd48:	d0d0      	beq.n	800bcec <_scanf_chars+0x30>
 800bd4a:	6823      	ldr	r3, [r4, #0]
 800bd4c:	f013 0310 	ands.w	r3, r3, #16
 800bd50:	d105      	bne.n	800bd5e <_scanf_chars+0xa2>
 800bd52:	68e2      	ldr	r2, [r4, #12]
 800bd54:	3201      	adds	r2, #1
 800bd56:	60e2      	str	r2, [r4, #12]
 800bd58:	69a2      	ldr	r2, [r4, #24]
 800bd5a:	b102      	cbz	r2, 800bd5e <_scanf_chars+0xa2>
 800bd5c:	7033      	strb	r3, [r6, #0]
 800bd5e:	2000      	movs	r0, #0
 800bd60:	6923      	ldr	r3, [r4, #16]
 800bd62:	443b      	add	r3, r7
 800bd64:	6123      	str	r3, [r4, #16]
 800bd66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd6a:	bf00      	nop
 800bd6c:	0800cd69 	.word	0x0800cd69

0800bd70 <_scanf_i>:
 800bd70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd74:	460c      	mov	r4, r1
 800bd76:	4698      	mov	r8, r3
 800bd78:	4b75      	ldr	r3, [pc, #468]	; (800bf50 <_scanf_i+0x1e0>)
 800bd7a:	b087      	sub	sp, #28
 800bd7c:	4682      	mov	sl, r0
 800bd7e:	4616      	mov	r6, r2
 800bd80:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bd84:	ab03      	add	r3, sp, #12
 800bd86:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800bd8a:	4b72      	ldr	r3, [pc, #456]	; (800bf54 <_scanf_i+0x1e4>)
 800bd8c:	69a1      	ldr	r1, [r4, #24]
 800bd8e:	4a72      	ldr	r2, [pc, #456]	; (800bf58 <_scanf_i+0x1e8>)
 800bd90:	4627      	mov	r7, r4
 800bd92:	2903      	cmp	r1, #3
 800bd94:	bf18      	it	ne
 800bd96:	461a      	movne	r2, r3
 800bd98:	68a3      	ldr	r3, [r4, #8]
 800bd9a:	9201      	str	r2, [sp, #4]
 800bd9c:	1e5a      	subs	r2, r3, #1
 800bd9e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800bda2:	bf81      	itttt	hi
 800bda4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800bda8:	eb03 0905 	addhi.w	r9, r3, r5
 800bdac:	f240 135d 	movwhi	r3, #349	; 0x15d
 800bdb0:	60a3      	strhi	r3, [r4, #8]
 800bdb2:	f857 3b1c 	ldr.w	r3, [r7], #28
 800bdb6:	bf98      	it	ls
 800bdb8:	f04f 0900 	movls.w	r9, #0
 800bdbc:	463d      	mov	r5, r7
 800bdbe:	f04f 0b00 	mov.w	fp, #0
 800bdc2:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800bdc6:	6023      	str	r3, [r4, #0]
 800bdc8:	6831      	ldr	r1, [r6, #0]
 800bdca:	ab03      	add	r3, sp, #12
 800bdcc:	2202      	movs	r2, #2
 800bdce:	7809      	ldrb	r1, [r1, #0]
 800bdd0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800bdd4:	f7fe fe8c 	bl	800aaf0 <memchr>
 800bdd8:	b328      	cbz	r0, 800be26 <_scanf_i+0xb6>
 800bdda:	f1bb 0f01 	cmp.w	fp, #1
 800bdde:	d159      	bne.n	800be94 <_scanf_i+0x124>
 800bde0:	6862      	ldr	r2, [r4, #4]
 800bde2:	b92a      	cbnz	r2, 800bdf0 <_scanf_i+0x80>
 800bde4:	2308      	movs	r3, #8
 800bde6:	6822      	ldr	r2, [r4, #0]
 800bde8:	6063      	str	r3, [r4, #4]
 800bdea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bdee:	6022      	str	r2, [r4, #0]
 800bdf0:	6822      	ldr	r2, [r4, #0]
 800bdf2:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800bdf6:	6022      	str	r2, [r4, #0]
 800bdf8:	68a2      	ldr	r2, [r4, #8]
 800bdfa:	1e51      	subs	r1, r2, #1
 800bdfc:	60a1      	str	r1, [r4, #8]
 800bdfe:	b192      	cbz	r2, 800be26 <_scanf_i+0xb6>
 800be00:	6832      	ldr	r2, [r6, #0]
 800be02:	1c51      	adds	r1, r2, #1
 800be04:	6031      	str	r1, [r6, #0]
 800be06:	7812      	ldrb	r2, [r2, #0]
 800be08:	f805 2b01 	strb.w	r2, [r5], #1
 800be0c:	6872      	ldr	r2, [r6, #4]
 800be0e:	3a01      	subs	r2, #1
 800be10:	2a00      	cmp	r2, #0
 800be12:	6072      	str	r2, [r6, #4]
 800be14:	dc07      	bgt.n	800be26 <_scanf_i+0xb6>
 800be16:	4631      	mov	r1, r6
 800be18:	4650      	mov	r0, sl
 800be1a:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800be1e:	4790      	blx	r2
 800be20:	2800      	cmp	r0, #0
 800be22:	f040 8085 	bne.w	800bf30 <_scanf_i+0x1c0>
 800be26:	f10b 0b01 	add.w	fp, fp, #1
 800be2a:	f1bb 0f03 	cmp.w	fp, #3
 800be2e:	d1cb      	bne.n	800bdc8 <_scanf_i+0x58>
 800be30:	6863      	ldr	r3, [r4, #4]
 800be32:	b90b      	cbnz	r3, 800be38 <_scanf_i+0xc8>
 800be34:	230a      	movs	r3, #10
 800be36:	6063      	str	r3, [r4, #4]
 800be38:	6863      	ldr	r3, [r4, #4]
 800be3a:	4948      	ldr	r1, [pc, #288]	; (800bf5c <_scanf_i+0x1ec>)
 800be3c:	6960      	ldr	r0, [r4, #20]
 800be3e:	1ac9      	subs	r1, r1, r3
 800be40:	f000 f8b6 	bl	800bfb0 <__sccl>
 800be44:	f04f 0b00 	mov.w	fp, #0
 800be48:	68a3      	ldr	r3, [r4, #8]
 800be4a:	6822      	ldr	r2, [r4, #0]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d03d      	beq.n	800becc <_scanf_i+0x15c>
 800be50:	6831      	ldr	r1, [r6, #0]
 800be52:	6960      	ldr	r0, [r4, #20]
 800be54:	f891 c000 	ldrb.w	ip, [r1]
 800be58:	f810 000c 	ldrb.w	r0, [r0, ip]
 800be5c:	2800      	cmp	r0, #0
 800be5e:	d035      	beq.n	800becc <_scanf_i+0x15c>
 800be60:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800be64:	d124      	bne.n	800beb0 <_scanf_i+0x140>
 800be66:	0510      	lsls	r0, r2, #20
 800be68:	d522      	bpl.n	800beb0 <_scanf_i+0x140>
 800be6a:	f10b 0b01 	add.w	fp, fp, #1
 800be6e:	f1b9 0f00 	cmp.w	r9, #0
 800be72:	d003      	beq.n	800be7c <_scanf_i+0x10c>
 800be74:	3301      	adds	r3, #1
 800be76:	f109 39ff 	add.w	r9, r9, #4294967295
 800be7a:	60a3      	str	r3, [r4, #8]
 800be7c:	6873      	ldr	r3, [r6, #4]
 800be7e:	3b01      	subs	r3, #1
 800be80:	2b00      	cmp	r3, #0
 800be82:	6073      	str	r3, [r6, #4]
 800be84:	dd1b      	ble.n	800bebe <_scanf_i+0x14e>
 800be86:	6833      	ldr	r3, [r6, #0]
 800be88:	3301      	adds	r3, #1
 800be8a:	6033      	str	r3, [r6, #0]
 800be8c:	68a3      	ldr	r3, [r4, #8]
 800be8e:	3b01      	subs	r3, #1
 800be90:	60a3      	str	r3, [r4, #8]
 800be92:	e7d9      	b.n	800be48 <_scanf_i+0xd8>
 800be94:	f1bb 0f02 	cmp.w	fp, #2
 800be98:	d1ae      	bne.n	800bdf8 <_scanf_i+0x88>
 800be9a:	6822      	ldr	r2, [r4, #0]
 800be9c:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800bea0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800bea4:	d1bf      	bne.n	800be26 <_scanf_i+0xb6>
 800bea6:	2310      	movs	r3, #16
 800bea8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800beac:	6063      	str	r3, [r4, #4]
 800beae:	e7a2      	b.n	800bdf6 <_scanf_i+0x86>
 800beb0:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800beb4:	6022      	str	r2, [r4, #0]
 800beb6:	780b      	ldrb	r3, [r1, #0]
 800beb8:	f805 3b01 	strb.w	r3, [r5], #1
 800bebc:	e7de      	b.n	800be7c <_scanf_i+0x10c>
 800bebe:	4631      	mov	r1, r6
 800bec0:	4650      	mov	r0, sl
 800bec2:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800bec6:	4798      	blx	r3
 800bec8:	2800      	cmp	r0, #0
 800beca:	d0df      	beq.n	800be8c <_scanf_i+0x11c>
 800becc:	6823      	ldr	r3, [r4, #0]
 800bece:	05db      	lsls	r3, r3, #23
 800bed0:	d50d      	bpl.n	800beee <_scanf_i+0x17e>
 800bed2:	42bd      	cmp	r5, r7
 800bed4:	d909      	bls.n	800beea <_scanf_i+0x17a>
 800bed6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800beda:	4632      	mov	r2, r6
 800bedc:	4650      	mov	r0, sl
 800bede:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bee2:	f105 39ff 	add.w	r9, r5, #4294967295
 800bee6:	4798      	blx	r3
 800bee8:	464d      	mov	r5, r9
 800beea:	42bd      	cmp	r5, r7
 800beec:	d02d      	beq.n	800bf4a <_scanf_i+0x1da>
 800beee:	6822      	ldr	r2, [r4, #0]
 800bef0:	f012 0210 	ands.w	r2, r2, #16
 800bef4:	d113      	bne.n	800bf1e <_scanf_i+0x1ae>
 800bef6:	702a      	strb	r2, [r5, #0]
 800bef8:	4639      	mov	r1, r7
 800befa:	6863      	ldr	r3, [r4, #4]
 800befc:	4650      	mov	r0, sl
 800befe:	9e01      	ldr	r6, [sp, #4]
 800bf00:	47b0      	blx	r6
 800bf02:	6821      	ldr	r1, [r4, #0]
 800bf04:	f8d8 3000 	ldr.w	r3, [r8]
 800bf08:	f011 0f20 	tst.w	r1, #32
 800bf0c:	d013      	beq.n	800bf36 <_scanf_i+0x1c6>
 800bf0e:	1d1a      	adds	r2, r3, #4
 800bf10:	f8c8 2000 	str.w	r2, [r8]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	6018      	str	r0, [r3, #0]
 800bf18:	68e3      	ldr	r3, [r4, #12]
 800bf1a:	3301      	adds	r3, #1
 800bf1c:	60e3      	str	r3, [r4, #12]
 800bf1e:	2000      	movs	r0, #0
 800bf20:	1bed      	subs	r5, r5, r7
 800bf22:	44ab      	add	fp, r5
 800bf24:	6925      	ldr	r5, [r4, #16]
 800bf26:	445d      	add	r5, fp
 800bf28:	6125      	str	r5, [r4, #16]
 800bf2a:	b007      	add	sp, #28
 800bf2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf30:	f04f 0b00 	mov.w	fp, #0
 800bf34:	e7ca      	b.n	800becc <_scanf_i+0x15c>
 800bf36:	1d1a      	adds	r2, r3, #4
 800bf38:	f8c8 2000 	str.w	r2, [r8]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	f011 0f01 	tst.w	r1, #1
 800bf42:	bf14      	ite	ne
 800bf44:	8018      	strhne	r0, [r3, #0]
 800bf46:	6018      	streq	r0, [r3, #0]
 800bf48:	e7e6      	b.n	800bf18 <_scanf_i+0x1a8>
 800bf4a:	2001      	movs	r0, #1
 800bf4c:	e7ed      	b.n	800bf2a <_scanf_i+0x1ba>
 800bf4e:	bf00      	nop
 800bf50:	0800ccb8 	.word	0x0800ccb8
 800bf54:	0800c12d 	.word	0x0800c12d
 800bf58:	08009685 	.word	0x08009685
 800bf5c:	0800d0f6 	.word	0x0800d0f6

0800bf60 <_read_r>:
 800bf60:	b538      	push	{r3, r4, r5, lr}
 800bf62:	4604      	mov	r4, r0
 800bf64:	4608      	mov	r0, r1
 800bf66:	4611      	mov	r1, r2
 800bf68:	2200      	movs	r2, #0
 800bf6a:	4d05      	ldr	r5, [pc, #20]	; (800bf80 <_read_r+0x20>)
 800bf6c:	602a      	str	r2, [r5, #0]
 800bf6e:	461a      	mov	r2, r3
 800bf70:	f7f7 f8cb 	bl	800310a <_read>
 800bf74:	1c43      	adds	r3, r0, #1
 800bf76:	d102      	bne.n	800bf7e <_read_r+0x1e>
 800bf78:	682b      	ldr	r3, [r5, #0]
 800bf7a:	b103      	cbz	r3, 800bf7e <_read_r+0x1e>
 800bf7c:	6023      	str	r3, [r4, #0]
 800bf7e:	bd38      	pop	{r3, r4, r5, pc}
 800bf80:	20000738 	.word	0x20000738

0800bf84 <nan>:
 800bf84:	2000      	movs	r0, #0
 800bf86:	4901      	ldr	r1, [pc, #4]	; (800bf8c <nan+0x8>)
 800bf88:	4770      	bx	lr
 800bf8a:	bf00      	nop
 800bf8c:	7ff80000 	.word	0x7ff80000

0800bf90 <_sbrk_r>:
 800bf90:	b538      	push	{r3, r4, r5, lr}
 800bf92:	2300      	movs	r3, #0
 800bf94:	4d05      	ldr	r5, [pc, #20]	; (800bfac <_sbrk_r+0x1c>)
 800bf96:	4604      	mov	r4, r0
 800bf98:	4608      	mov	r0, r1
 800bf9a:	602b      	str	r3, [r5, #0]
 800bf9c:	f7f7 f91e 	bl	80031dc <_sbrk>
 800bfa0:	1c43      	adds	r3, r0, #1
 800bfa2:	d102      	bne.n	800bfaa <_sbrk_r+0x1a>
 800bfa4:	682b      	ldr	r3, [r5, #0]
 800bfa6:	b103      	cbz	r3, 800bfaa <_sbrk_r+0x1a>
 800bfa8:	6023      	str	r3, [r4, #0]
 800bfaa:	bd38      	pop	{r3, r4, r5, pc}
 800bfac:	20000738 	.word	0x20000738

0800bfb0 <__sccl>:
 800bfb0:	b570      	push	{r4, r5, r6, lr}
 800bfb2:	780b      	ldrb	r3, [r1, #0]
 800bfb4:	4604      	mov	r4, r0
 800bfb6:	2b5e      	cmp	r3, #94	; 0x5e
 800bfb8:	bf13      	iteet	ne
 800bfba:	2200      	movne	r2, #0
 800bfbc:	2201      	moveq	r2, #1
 800bfbe:	784b      	ldrbeq	r3, [r1, #1]
 800bfc0:	1c48      	addne	r0, r1, #1
 800bfc2:	bf08      	it	eq
 800bfc4:	1c88      	addeq	r0, r1, #2
 800bfc6:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800bfca:	1e61      	subs	r1, r4, #1
 800bfcc:	f801 2f01 	strb.w	r2, [r1, #1]!
 800bfd0:	42a9      	cmp	r1, r5
 800bfd2:	d1fb      	bne.n	800bfcc <__sccl+0x1c>
 800bfd4:	b90b      	cbnz	r3, 800bfda <__sccl+0x2a>
 800bfd6:	3801      	subs	r0, #1
 800bfd8:	bd70      	pop	{r4, r5, r6, pc}
 800bfda:	f082 0201 	eor.w	r2, r2, #1
 800bfde:	4605      	mov	r5, r0
 800bfe0:	54e2      	strb	r2, [r4, r3]
 800bfe2:	4628      	mov	r0, r5
 800bfe4:	f810 1b01 	ldrb.w	r1, [r0], #1
 800bfe8:	292d      	cmp	r1, #45	; 0x2d
 800bfea:	d006      	beq.n	800bffa <__sccl+0x4a>
 800bfec:	295d      	cmp	r1, #93	; 0x5d
 800bfee:	d0f3      	beq.n	800bfd8 <__sccl+0x28>
 800bff0:	b909      	cbnz	r1, 800bff6 <__sccl+0x46>
 800bff2:	4628      	mov	r0, r5
 800bff4:	e7f0      	b.n	800bfd8 <__sccl+0x28>
 800bff6:	460b      	mov	r3, r1
 800bff8:	e7f1      	b.n	800bfde <__sccl+0x2e>
 800bffa:	786e      	ldrb	r6, [r5, #1]
 800bffc:	2e5d      	cmp	r6, #93	; 0x5d
 800bffe:	d0fa      	beq.n	800bff6 <__sccl+0x46>
 800c000:	42b3      	cmp	r3, r6
 800c002:	dcf8      	bgt.n	800bff6 <__sccl+0x46>
 800c004:	4619      	mov	r1, r3
 800c006:	3502      	adds	r5, #2
 800c008:	3101      	adds	r1, #1
 800c00a:	428e      	cmp	r6, r1
 800c00c:	5462      	strb	r2, [r4, r1]
 800c00e:	dcfb      	bgt.n	800c008 <__sccl+0x58>
 800c010:	1af1      	subs	r1, r6, r3
 800c012:	3901      	subs	r1, #1
 800c014:	42b3      	cmp	r3, r6
 800c016:	bfa8      	it	ge
 800c018:	2100      	movge	r1, #0
 800c01a:	1c58      	adds	r0, r3, #1
 800c01c:	1843      	adds	r3, r0, r1
 800c01e:	e7e0      	b.n	800bfe2 <__sccl+0x32>

0800c020 <strncmp>:
 800c020:	4603      	mov	r3, r0
 800c022:	b510      	push	{r4, lr}
 800c024:	b172      	cbz	r2, 800c044 <strncmp+0x24>
 800c026:	3901      	subs	r1, #1
 800c028:	1884      	adds	r4, r0, r2
 800c02a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c02e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c032:	4290      	cmp	r0, r2
 800c034:	d101      	bne.n	800c03a <strncmp+0x1a>
 800c036:	42a3      	cmp	r3, r4
 800c038:	d101      	bne.n	800c03e <strncmp+0x1e>
 800c03a:	1a80      	subs	r0, r0, r2
 800c03c:	bd10      	pop	{r4, pc}
 800c03e:	2800      	cmp	r0, #0
 800c040:	d1f3      	bne.n	800c02a <strncmp+0xa>
 800c042:	e7fa      	b.n	800c03a <strncmp+0x1a>
 800c044:	4610      	mov	r0, r2
 800c046:	e7f9      	b.n	800c03c <strncmp+0x1c>

0800c048 <_strtoul_l.constprop.0>:
 800c048:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c04c:	4686      	mov	lr, r0
 800c04e:	460d      	mov	r5, r1
 800c050:	4f35      	ldr	r7, [pc, #212]	; (800c128 <_strtoul_l.constprop.0+0xe0>)
 800c052:	4628      	mov	r0, r5
 800c054:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c058:	5de6      	ldrb	r6, [r4, r7]
 800c05a:	f016 0608 	ands.w	r6, r6, #8
 800c05e:	d1f8      	bne.n	800c052 <_strtoul_l.constprop.0+0xa>
 800c060:	2c2d      	cmp	r4, #45	; 0x2d
 800c062:	d12f      	bne.n	800c0c4 <_strtoul_l.constprop.0+0x7c>
 800c064:	2601      	movs	r6, #1
 800c066:	782c      	ldrb	r4, [r5, #0]
 800c068:	1c85      	adds	r5, r0, #2
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d057      	beq.n	800c11e <_strtoul_l.constprop.0+0xd6>
 800c06e:	2b10      	cmp	r3, #16
 800c070:	d109      	bne.n	800c086 <_strtoul_l.constprop.0+0x3e>
 800c072:	2c30      	cmp	r4, #48	; 0x30
 800c074:	d107      	bne.n	800c086 <_strtoul_l.constprop.0+0x3e>
 800c076:	7828      	ldrb	r0, [r5, #0]
 800c078:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800c07c:	2858      	cmp	r0, #88	; 0x58
 800c07e:	d149      	bne.n	800c114 <_strtoul_l.constprop.0+0xcc>
 800c080:	2310      	movs	r3, #16
 800c082:	786c      	ldrb	r4, [r5, #1]
 800c084:	3502      	adds	r5, #2
 800c086:	f04f 38ff 	mov.w	r8, #4294967295
 800c08a:	fbb8 f8f3 	udiv	r8, r8, r3
 800c08e:	2700      	movs	r7, #0
 800c090:	fb03 f908 	mul.w	r9, r3, r8
 800c094:	4638      	mov	r0, r7
 800c096:	ea6f 0909 	mvn.w	r9, r9
 800c09a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800c09e:	f1bc 0f09 	cmp.w	ip, #9
 800c0a2:	d814      	bhi.n	800c0ce <_strtoul_l.constprop.0+0x86>
 800c0a4:	4664      	mov	r4, ip
 800c0a6:	42a3      	cmp	r3, r4
 800c0a8:	dd22      	ble.n	800c0f0 <_strtoul_l.constprop.0+0xa8>
 800c0aa:	2f00      	cmp	r7, #0
 800c0ac:	db1d      	blt.n	800c0ea <_strtoul_l.constprop.0+0xa2>
 800c0ae:	4580      	cmp	r8, r0
 800c0b0:	d31b      	bcc.n	800c0ea <_strtoul_l.constprop.0+0xa2>
 800c0b2:	d101      	bne.n	800c0b8 <_strtoul_l.constprop.0+0x70>
 800c0b4:	45a1      	cmp	r9, r4
 800c0b6:	db18      	blt.n	800c0ea <_strtoul_l.constprop.0+0xa2>
 800c0b8:	2701      	movs	r7, #1
 800c0ba:	fb00 4003 	mla	r0, r0, r3, r4
 800c0be:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c0c2:	e7ea      	b.n	800c09a <_strtoul_l.constprop.0+0x52>
 800c0c4:	2c2b      	cmp	r4, #43	; 0x2b
 800c0c6:	bf04      	itt	eq
 800c0c8:	782c      	ldrbeq	r4, [r5, #0]
 800c0ca:	1c85      	addeq	r5, r0, #2
 800c0cc:	e7cd      	b.n	800c06a <_strtoul_l.constprop.0+0x22>
 800c0ce:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800c0d2:	f1bc 0f19 	cmp.w	ip, #25
 800c0d6:	d801      	bhi.n	800c0dc <_strtoul_l.constprop.0+0x94>
 800c0d8:	3c37      	subs	r4, #55	; 0x37
 800c0da:	e7e4      	b.n	800c0a6 <_strtoul_l.constprop.0+0x5e>
 800c0dc:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800c0e0:	f1bc 0f19 	cmp.w	ip, #25
 800c0e4:	d804      	bhi.n	800c0f0 <_strtoul_l.constprop.0+0xa8>
 800c0e6:	3c57      	subs	r4, #87	; 0x57
 800c0e8:	e7dd      	b.n	800c0a6 <_strtoul_l.constprop.0+0x5e>
 800c0ea:	f04f 37ff 	mov.w	r7, #4294967295
 800c0ee:	e7e6      	b.n	800c0be <_strtoul_l.constprop.0+0x76>
 800c0f0:	2f00      	cmp	r7, #0
 800c0f2:	da07      	bge.n	800c104 <_strtoul_l.constprop.0+0xbc>
 800c0f4:	2322      	movs	r3, #34	; 0x22
 800c0f6:	f04f 30ff 	mov.w	r0, #4294967295
 800c0fa:	f8ce 3000 	str.w	r3, [lr]
 800c0fe:	b932      	cbnz	r2, 800c10e <_strtoul_l.constprop.0+0xc6>
 800c100:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c104:	b106      	cbz	r6, 800c108 <_strtoul_l.constprop.0+0xc0>
 800c106:	4240      	negs	r0, r0
 800c108:	2a00      	cmp	r2, #0
 800c10a:	d0f9      	beq.n	800c100 <_strtoul_l.constprop.0+0xb8>
 800c10c:	b107      	cbz	r7, 800c110 <_strtoul_l.constprop.0+0xc8>
 800c10e:	1e69      	subs	r1, r5, #1
 800c110:	6011      	str	r1, [r2, #0]
 800c112:	e7f5      	b.n	800c100 <_strtoul_l.constprop.0+0xb8>
 800c114:	2430      	movs	r4, #48	; 0x30
 800c116:	2b00      	cmp	r3, #0
 800c118:	d1b5      	bne.n	800c086 <_strtoul_l.constprop.0+0x3e>
 800c11a:	2308      	movs	r3, #8
 800c11c:	e7b3      	b.n	800c086 <_strtoul_l.constprop.0+0x3e>
 800c11e:	2c30      	cmp	r4, #48	; 0x30
 800c120:	d0a9      	beq.n	800c076 <_strtoul_l.constprop.0+0x2e>
 800c122:	230a      	movs	r3, #10
 800c124:	e7af      	b.n	800c086 <_strtoul_l.constprop.0+0x3e>
 800c126:	bf00      	nop
 800c128:	0800cd69 	.word	0x0800cd69

0800c12c <_strtoul_r>:
 800c12c:	f7ff bf8c 	b.w	800c048 <_strtoul_l.constprop.0>

0800c130 <__submore>:
 800c130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c134:	460c      	mov	r4, r1
 800c136:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c138:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c13c:	4299      	cmp	r1, r3
 800c13e:	d11b      	bne.n	800c178 <__submore+0x48>
 800c140:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c144:	f7ff fa16 	bl	800b574 <_malloc_r>
 800c148:	b918      	cbnz	r0, 800c152 <__submore+0x22>
 800c14a:	f04f 30ff 	mov.w	r0, #4294967295
 800c14e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c152:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c156:	63a3      	str	r3, [r4, #56]	; 0x38
 800c158:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800c15c:	6360      	str	r0, [r4, #52]	; 0x34
 800c15e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800c162:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800c166:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800c16a:	7043      	strb	r3, [r0, #1]
 800c16c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800c170:	7003      	strb	r3, [r0, #0]
 800c172:	6020      	str	r0, [r4, #0]
 800c174:	2000      	movs	r0, #0
 800c176:	e7ea      	b.n	800c14e <__submore+0x1e>
 800c178:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800c17a:	0077      	lsls	r7, r6, #1
 800c17c:	463a      	mov	r2, r7
 800c17e:	f000 fa29 	bl	800c5d4 <_realloc_r>
 800c182:	4605      	mov	r5, r0
 800c184:	2800      	cmp	r0, #0
 800c186:	d0e0      	beq.n	800c14a <__submore+0x1a>
 800c188:	eb00 0806 	add.w	r8, r0, r6
 800c18c:	4601      	mov	r1, r0
 800c18e:	4632      	mov	r2, r6
 800c190:	4640      	mov	r0, r8
 800c192:	f7fb fcd3 	bl	8007b3c <memcpy>
 800c196:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800c19a:	f8c4 8000 	str.w	r8, [r4]
 800c19e:	e7e9      	b.n	800c174 <__submore+0x44>

0800c1a0 <__ascii_wctomb>:
 800c1a0:	4603      	mov	r3, r0
 800c1a2:	4608      	mov	r0, r1
 800c1a4:	b141      	cbz	r1, 800c1b8 <__ascii_wctomb+0x18>
 800c1a6:	2aff      	cmp	r2, #255	; 0xff
 800c1a8:	d904      	bls.n	800c1b4 <__ascii_wctomb+0x14>
 800c1aa:	228a      	movs	r2, #138	; 0x8a
 800c1ac:	f04f 30ff 	mov.w	r0, #4294967295
 800c1b0:	601a      	str	r2, [r3, #0]
 800c1b2:	4770      	bx	lr
 800c1b4:	2001      	movs	r0, #1
 800c1b6:	700a      	strb	r2, [r1, #0]
 800c1b8:	4770      	bx	lr
	...

0800c1bc <__assert_func>:
 800c1bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c1be:	4614      	mov	r4, r2
 800c1c0:	461a      	mov	r2, r3
 800c1c2:	4b09      	ldr	r3, [pc, #36]	; (800c1e8 <__assert_func+0x2c>)
 800c1c4:	4605      	mov	r5, r0
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	68d8      	ldr	r0, [r3, #12]
 800c1ca:	b14c      	cbz	r4, 800c1e0 <__assert_func+0x24>
 800c1cc:	4b07      	ldr	r3, [pc, #28]	; (800c1ec <__assert_func+0x30>)
 800c1ce:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c1d2:	9100      	str	r1, [sp, #0]
 800c1d4:	462b      	mov	r3, r5
 800c1d6:	4906      	ldr	r1, [pc, #24]	; (800c1f0 <__assert_func+0x34>)
 800c1d8:	f000 f9a2 	bl	800c520 <fiprintf>
 800c1dc:	f000 fc40 	bl	800ca60 <abort>
 800c1e0:	4b04      	ldr	r3, [pc, #16]	; (800c1f4 <__assert_func+0x38>)
 800c1e2:	461c      	mov	r4, r3
 800c1e4:	e7f3      	b.n	800c1ce <__assert_func+0x12>
 800c1e6:	bf00      	nop
 800c1e8:	20000010 	.word	0x20000010
 800c1ec:	0800d0f8 	.word	0x0800d0f8
 800c1f0:	0800d105 	.word	0x0800d105
 800c1f4:	0800d133 	.word	0x0800d133

0800c1f8 <__sflush_r>:
 800c1f8:	898a      	ldrh	r2, [r1, #12]
 800c1fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1fc:	4605      	mov	r5, r0
 800c1fe:	0710      	lsls	r0, r2, #28
 800c200:	460c      	mov	r4, r1
 800c202:	d457      	bmi.n	800c2b4 <__sflush_r+0xbc>
 800c204:	684b      	ldr	r3, [r1, #4]
 800c206:	2b00      	cmp	r3, #0
 800c208:	dc04      	bgt.n	800c214 <__sflush_r+0x1c>
 800c20a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	dc01      	bgt.n	800c214 <__sflush_r+0x1c>
 800c210:	2000      	movs	r0, #0
 800c212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c214:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c216:	2e00      	cmp	r6, #0
 800c218:	d0fa      	beq.n	800c210 <__sflush_r+0x18>
 800c21a:	2300      	movs	r3, #0
 800c21c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c220:	682f      	ldr	r7, [r5, #0]
 800c222:	602b      	str	r3, [r5, #0]
 800c224:	d032      	beq.n	800c28c <__sflush_r+0x94>
 800c226:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c228:	89a3      	ldrh	r3, [r4, #12]
 800c22a:	075a      	lsls	r2, r3, #29
 800c22c:	d505      	bpl.n	800c23a <__sflush_r+0x42>
 800c22e:	6863      	ldr	r3, [r4, #4]
 800c230:	1ac0      	subs	r0, r0, r3
 800c232:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c234:	b10b      	cbz	r3, 800c23a <__sflush_r+0x42>
 800c236:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c238:	1ac0      	subs	r0, r0, r3
 800c23a:	2300      	movs	r3, #0
 800c23c:	4602      	mov	r2, r0
 800c23e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c240:	4628      	mov	r0, r5
 800c242:	6a21      	ldr	r1, [r4, #32]
 800c244:	47b0      	blx	r6
 800c246:	1c43      	adds	r3, r0, #1
 800c248:	89a3      	ldrh	r3, [r4, #12]
 800c24a:	d106      	bne.n	800c25a <__sflush_r+0x62>
 800c24c:	6829      	ldr	r1, [r5, #0]
 800c24e:	291d      	cmp	r1, #29
 800c250:	d82c      	bhi.n	800c2ac <__sflush_r+0xb4>
 800c252:	4a29      	ldr	r2, [pc, #164]	; (800c2f8 <__sflush_r+0x100>)
 800c254:	40ca      	lsrs	r2, r1
 800c256:	07d6      	lsls	r6, r2, #31
 800c258:	d528      	bpl.n	800c2ac <__sflush_r+0xb4>
 800c25a:	2200      	movs	r2, #0
 800c25c:	6062      	str	r2, [r4, #4]
 800c25e:	6922      	ldr	r2, [r4, #16]
 800c260:	04d9      	lsls	r1, r3, #19
 800c262:	6022      	str	r2, [r4, #0]
 800c264:	d504      	bpl.n	800c270 <__sflush_r+0x78>
 800c266:	1c42      	adds	r2, r0, #1
 800c268:	d101      	bne.n	800c26e <__sflush_r+0x76>
 800c26a:	682b      	ldr	r3, [r5, #0]
 800c26c:	b903      	cbnz	r3, 800c270 <__sflush_r+0x78>
 800c26e:	6560      	str	r0, [r4, #84]	; 0x54
 800c270:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c272:	602f      	str	r7, [r5, #0]
 800c274:	2900      	cmp	r1, #0
 800c276:	d0cb      	beq.n	800c210 <__sflush_r+0x18>
 800c278:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c27c:	4299      	cmp	r1, r3
 800c27e:	d002      	beq.n	800c286 <__sflush_r+0x8e>
 800c280:	4628      	mov	r0, r5
 800c282:	f7ff f90f 	bl	800b4a4 <_free_r>
 800c286:	2000      	movs	r0, #0
 800c288:	6360      	str	r0, [r4, #52]	; 0x34
 800c28a:	e7c2      	b.n	800c212 <__sflush_r+0x1a>
 800c28c:	6a21      	ldr	r1, [r4, #32]
 800c28e:	2301      	movs	r3, #1
 800c290:	4628      	mov	r0, r5
 800c292:	47b0      	blx	r6
 800c294:	1c41      	adds	r1, r0, #1
 800c296:	d1c7      	bne.n	800c228 <__sflush_r+0x30>
 800c298:	682b      	ldr	r3, [r5, #0]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d0c4      	beq.n	800c228 <__sflush_r+0x30>
 800c29e:	2b1d      	cmp	r3, #29
 800c2a0:	d001      	beq.n	800c2a6 <__sflush_r+0xae>
 800c2a2:	2b16      	cmp	r3, #22
 800c2a4:	d101      	bne.n	800c2aa <__sflush_r+0xb2>
 800c2a6:	602f      	str	r7, [r5, #0]
 800c2a8:	e7b2      	b.n	800c210 <__sflush_r+0x18>
 800c2aa:	89a3      	ldrh	r3, [r4, #12]
 800c2ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c2b0:	81a3      	strh	r3, [r4, #12]
 800c2b2:	e7ae      	b.n	800c212 <__sflush_r+0x1a>
 800c2b4:	690f      	ldr	r7, [r1, #16]
 800c2b6:	2f00      	cmp	r7, #0
 800c2b8:	d0aa      	beq.n	800c210 <__sflush_r+0x18>
 800c2ba:	0793      	lsls	r3, r2, #30
 800c2bc:	bf18      	it	ne
 800c2be:	2300      	movne	r3, #0
 800c2c0:	680e      	ldr	r6, [r1, #0]
 800c2c2:	bf08      	it	eq
 800c2c4:	694b      	ldreq	r3, [r1, #20]
 800c2c6:	1bf6      	subs	r6, r6, r7
 800c2c8:	600f      	str	r7, [r1, #0]
 800c2ca:	608b      	str	r3, [r1, #8]
 800c2cc:	2e00      	cmp	r6, #0
 800c2ce:	dd9f      	ble.n	800c210 <__sflush_r+0x18>
 800c2d0:	4633      	mov	r3, r6
 800c2d2:	463a      	mov	r2, r7
 800c2d4:	4628      	mov	r0, r5
 800c2d6:	6a21      	ldr	r1, [r4, #32]
 800c2d8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800c2dc:	47e0      	blx	ip
 800c2de:	2800      	cmp	r0, #0
 800c2e0:	dc06      	bgt.n	800c2f0 <__sflush_r+0xf8>
 800c2e2:	89a3      	ldrh	r3, [r4, #12]
 800c2e4:	f04f 30ff 	mov.w	r0, #4294967295
 800c2e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c2ec:	81a3      	strh	r3, [r4, #12]
 800c2ee:	e790      	b.n	800c212 <__sflush_r+0x1a>
 800c2f0:	4407      	add	r7, r0
 800c2f2:	1a36      	subs	r6, r6, r0
 800c2f4:	e7ea      	b.n	800c2cc <__sflush_r+0xd4>
 800c2f6:	bf00      	nop
 800c2f8:	20400001 	.word	0x20400001

0800c2fc <_fflush_r>:
 800c2fc:	b538      	push	{r3, r4, r5, lr}
 800c2fe:	690b      	ldr	r3, [r1, #16]
 800c300:	4605      	mov	r5, r0
 800c302:	460c      	mov	r4, r1
 800c304:	b913      	cbnz	r3, 800c30c <_fflush_r+0x10>
 800c306:	2500      	movs	r5, #0
 800c308:	4628      	mov	r0, r5
 800c30a:	bd38      	pop	{r3, r4, r5, pc}
 800c30c:	b118      	cbz	r0, 800c316 <_fflush_r+0x1a>
 800c30e:	6983      	ldr	r3, [r0, #24]
 800c310:	b90b      	cbnz	r3, 800c316 <_fflush_r+0x1a>
 800c312:	f000 f887 	bl	800c424 <__sinit>
 800c316:	4b14      	ldr	r3, [pc, #80]	; (800c368 <_fflush_r+0x6c>)
 800c318:	429c      	cmp	r4, r3
 800c31a:	d11b      	bne.n	800c354 <_fflush_r+0x58>
 800c31c:	686c      	ldr	r4, [r5, #4]
 800c31e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d0ef      	beq.n	800c306 <_fflush_r+0xa>
 800c326:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c328:	07d0      	lsls	r0, r2, #31
 800c32a:	d404      	bmi.n	800c336 <_fflush_r+0x3a>
 800c32c:	0599      	lsls	r1, r3, #22
 800c32e:	d402      	bmi.n	800c336 <_fflush_r+0x3a>
 800c330:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c332:	f000 f927 	bl	800c584 <__retarget_lock_acquire_recursive>
 800c336:	4628      	mov	r0, r5
 800c338:	4621      	mov	r1, r4
 800c33a:	f7ff ff5d 	bl	800c1f8 <__sflush_r>
 800c33e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c340:	4605      	mov	r5, r0
 800c342:	07da      	lsls	r2, r3, #31
 800c344:	d4e0      	bmi.n	800c308 <_fflush_r+0xc>
 800c346:	89a3      	ldrh	r3, [r4, #12]
 800c348:	059b      	lsls	r3, r3, #22
 800c34a:	d4dd      	bmi.n	800c308 <_fflush_r+0xc>
 800c34c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c34e:	f000 f91a 	bl	800c586 <__retarget_lock_release_recursive>
 800c352:	e7d9      	b.n	800c308 <_fflush_r+0xc>
 800c354:	4b05      	ldr	r3, [pc, #20]	; (800c36c <_fflush_r+0x70>)
 800c356:	429c      	cmp	r4, r3
 800c358:	d101      	bne.n	800c35e <_fflush_r+0x62>
 800c35a:	68ac      	ldr	r4, [r5, #8]
 800c35c:	e7df      	b.n	800c31e <_fflush_r+0x22>
 800c35e:	4b04      	ldr	r3, [pc, #16]	; (800c370 <_fflush_r+0x74>)
 800c360:	429c      	cmp	r4, r3
 800c362:	bf08      	it	eq
 800c364:	68ec      	ldreq	r4, [r5, #12]
 800c366:	e7da      	b.n	800c31e <_fflush_r+0x22>
 800c368:	0800d154 	.word	0x0800d154
 800c36c:	0800d174 	.word	0x0800d174
 800c370:	0800d134 	.word	0x0800d134

0800c374 <std>:
 800c374:	2300      	movs	r3, #0
 800c376:	b510      	push	{r4, lr}
 800c378:	4604      	mov	r4, r0
 800c37a:	e9c0 3300 	strd	r3, r3, [r0]
 800c37e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c382:	6083      	str	r3, [r0, #8]
 800c384:	8181      	strh	r1, [r0, #12]
 800c386:	6643      	str	r3, [r0, #100]	; 0x64
 800c388:	81c2      	strh	r2, [r0, #14]
 800c38a:	6183      	str	r3, [r0, #24]
 800c38c:	4619      	mov	r1, r3
 800c38e:	2208      	movs	r2, #8
 800c390:	305c      	adds	r0, #92	; 0x5c
 800c392:	f7fb fbe1 	bl	8007b58 <memset>
 800c396:	4b05      	ldr	r3, [pc, #20]	; (800c3ac <std+0x38>)
 800c398:	6224      	str	r4, [r4, #32]
 800c39a:	6263      	str	r3, [r4, #36]	; 0x24
 800c39c:	4b04      	ldr	r3, [pc, #16]	; (800c3b0 <std+0x3c>)
 800c39e:	62a3      	str	r3, [r4, #40]	; 0x28
 800c3a0:	4b04      	ldr	r3, [pc, #16]	; (800c3b4 <std+0x40>)
 800c3a2:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c3a4:	4b04      	ldr	r3, [pc, #16]	; (800c3b8 <std+0x44>)
 800c3a6:	6323      	str	r3, [r4, #48]	; 0x30
 800c3a8:	bd10      	pop	{r4, pc}
 800c3aa:	bf00      	nop
 800c3ac:	080088e1 	.word	0x080088e1
 800c3b0:	08008907 	.word	0x08008907
 800c3b4:	0800893f 	.word	0x0800893f
 800c3b8:	08008963 	.word	0x08008963

0800c3bc <_cleanup_r>:
 800c3bc:	4901      	ldr	r1, [pc, #4]	; (800c3c4 <_cleanup_r+0x8>)
 800c3be:	f000 b8c1 	b.w	800c544 <_fwalk_reent>
 800c3c2:	bf00      	nop
 800c3c4:	0800c2fd 	.word	0x0800c2fd

0800c3c8 <__sfmoreglue>:
 800c3c8:	2268      	movs	r2, #104	; 0x68
 800c3ca:	b570      	push	{r4, r5, r6, lr}
 800c3cc:	1e4d      	subs	r5, r1, #1
 800c3ce:	4355      	muls	r5, r2
 800c3d0:	460e      	mov	r6, r1
 800c3d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c3d6:	f7ff f8cd 	bl	800b574 <_malloc_r>
 800c3da:	4604      	mov	r4, r0
 800c3dc:	b140      	cbz	r0, 800c3f0 <__sfmoreglue+0x28>
 800c3de:	2100      	movs	r1, #0
 800c3e0:	e9c0 1600 	strd	r1, r6, [r0]
 800c3e4:	300c      	adds	r0, #12
 800c3e6:	60a0      	str	r0, [r4, #8]
 800c3e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c3ec:	f7fb fbb4 	bl	8007b58 <memset>
 800c3f0:	4620      	mov	r0, r4
 800c3f2:	bd70      	pop	{r4, r5, r6, pc}

0800c3f4 <__sfp_lock_acquire>:
 800c3f4:	4801      	ldr	r0, [pc, #4]	; (800c3fc <__sfp_lock_acquire+0x8>)
 800c3f6:	f000 b8c5 	b.w	800c584 <__retarget_lock_acquire_recursive>
 800c3fa:	bf00      	nop
 800c3fc:	2000073d 	.word	0x2000073d

0800c400 <__sfp_lock_release>:
 800c400:	4801      	ldr	r0, [pc, #4]	; (800c408 <__sfp_lock_release+0x8>)
 800c402:	f000 b8c0 	b.w	800c586 <__retarget_lock_release_recursive>
 800c406:	bf00      	nop
 800c408:	2000073d 	.word	0x2000073d

0800c40c <__sinit_lock_acquire>:
 800c40c:	4801      	ldr	r0, [pc, #4]	; (800c414 <__sinit_lock_acquire+0x8>)
 800c40e:	f000 b8b9 	b.w	800c584 <__retarget_lock_acquire_recursive>
 800c412:	bf00      	nop
 800c414:	2000073e 	.word	0x2000073e

0800c418 <__sinit_lock_release>:
 800c418:	4801      	ldr	r0, [pc, #4]	; (800c420 <__sinit_lock_release+0x8>)
 800c41a:	f000 b8b4 	b.w	800c586 <__retarget_lock_release_recursive>
 800c41e:	bf00      	nop
 800c420:	2000073e 	.word	0x2000073e

0800c424 <__sinit>:
 800c424:	b510      	push	{r4, lr}
 800c426:	4604      	mov	r4, r0
 800c428:	f7ff fff0 	bl	800c40c <__sinit_lock_acquire>
 800c42c:	69a3      	ldr	r3, [r4, #24]
 800c42e:	b11b      	cbz	r3, 800c438 <__sinit+0x14>
 800c430:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c434:	f7ff bff0 	b.w	800c418 <__sinit_lock_release>
 800c438:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c43c:	6523      	str	r3, [r4, #80]	; 0x50
 800c43e:	4b13      	ldr	r3, [pc, #76]	; (800c48c <__sinit+0x68>)
 800c440:	4a13      	ldr	r2, [pc, #76]	; (800c490 <__sinit+0x6c>)
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	62a2      	str	r2, [r4, #40]	; 0x28
 800c446:	42a3      	cmp	r3, r4
 800c448:	bf08      	it	eq
 800c44a:	2301      	moveq	r3, #1
 800c44c:	4620      	mov	r0, r4
 800c44e:	bf08      	it	eq
 800c450:	61a3      	streq	r3, [r4, #24]
 800c452:	f000 f81f 	bl	800c494 <__sfp>
 800c456:	6060      	str	r0, [r4, #4]
 800c458:	4620      	mov	r0, r4
 800c45a:	f000 f81b 	bl	800c494 <__sfp>
 800c45e:	60a0      	str	r0, [r4, #8]
 800c460:	4620      	mov	r0, r4
 800c462:	f000 f817 	bl	800c494 <__sfp>
 800c466:	2200      	movs	r2, #0
 800c468:	2104      	movs	r1, #4
 800c46a:	60e0      	str	r0, [r4, #12]
 800c46c:	6860      	ldr	r0, [r4, #4]
 800c46e:	f7ff ff81 	bl	800c374 <std>
 800c472:	2201      	movs	r2, #1
 800c474:	2109      	movs	r1, #9
 800c476:	68a0      	ldr	r0, [r4, #8]
 800c478:	f7ff ff7c 	bl	800c374 <std>
 800c47c:	2202      	movs	r2, #2
 800c47e:	2112      	movs	r1, #18
 800c480:	68e0      	ldr	r0, [r4, #12]
 800c482:	f7ff ff77 	bl	800c374 <std>
 800c486:	2301      	movs	r3, #1
 800c488:	61a3      	str	r3, [r4, #24]
 800c48a:	e7d1      	b.n	800c430 <__sinit+0xc>
 800c48c:	0800ccdc 	.word	0x0800ccdc
 800c490:	0800c3bd 	.word	0x0800c3bd

0800c494 <__sfp>:
 800c494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c496:	4607      	mov	r7, r0
 800c498:	f7ff ffac 	bl	800c3f4 <__sfp_lock_acquire>
 800c49c:	4b1e      	ldr	r3, [pc, #120]	; (800c518 <__sfp+0x84>)
 800c49e:	681e      	ldr	r6, [r3, #0]
 800c4a0:	69b3      	ldr	r3, [r6, #24]
 800c4a2:	b913      	cbnz	r3, 800c4aa <__sfp+0x16>
 800c4a4:	4630      	mov	r0, r6
 800c4a6:	f7ff ffbd 	bl	800c424 <__sinit>
 800c4aa:	3648      	adds	r6, #72	; 0x48
 800c4ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c4b0:	3b01      	subs	r3, #1
 800c4b2:	d503      	bpl.n	800c4bc <__sfp+0x28>
 800c4b4:	6833      	ldr	r3, [r6, #0]
 800c4b6:	b30b      	cbz	r3, 800c4fc <__sfp+0x68>
 800c4b8:	6836      	ldr	r6, [r6, #0]
 800c4ba:	e7f7      	b.n	800c4ac <__sfp+0x18>
 800c4bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c4c0:	b9d5      	cbnz	r5, 800c4f8 <__sfp+0x64>
 800c4c2:	4b16      	ldr	r3, [pc, #88]	; (800c51c <__sfp+0x88>)
 800c4c4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c4c8:	60e3      	str	r3, [r4, #12]
 800c4ca:	6665      	str	r5, [r4, #100]	; 0x64
 800c4cc:	f000 f859 	bl	800c582 <__retarget_lock_init_recursive>
 800c4d0:	f7ff ff96 	bl	800c400 <__sfp_lock_release>
 800c4d4:	2208      	movs	r2, #8
 800c4d6:	4629      	mov	r1, r5
 800c4d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c4dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c4e0:	6025      	str	r5, [r4, #0]
 800c4e2:	61a5      	str	r5, [r4, #24]
 800c4e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c4e8:	f7fb fb36 	bl	8007b58 <memset>
 800c4ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c4f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c4f4:	4620      	mov	r0, r4
 800c4f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c4f8:	3468      	adds	r4, #104	; 0x68
 800c4fa:	e7d9      	b.n	800c4b0 <__sfp+0x1c>
 800c4fc:	2104      	movs	r1, #4
 800c4fe:	4638      	mov	r0, r7
 800c500:	f7ff ff62 	bl	800c3c8 <__sfmoreglue>
 800c504:	4604      	mov	r4, r0
 800c506:	6030      	str	r0, [r6, #0]
 800c508:	2800      	cmp	r0, #0
 800c50a:	d1d5      	bne.n	800c4b8 <__sfp+0x24>
 800c50c:	f7ff ff78 	bl	800c400 <__sfp_lock_release>
 800c510:	230c      	movs	r3, #12
 800c512:	603b      	str	r3, [r7, #0]
 800c514:	e7ee      	b.n	800c4f4 <__sfp+0x60>
 800c516:	bf00      	nop
 800c518:	0800ccdc 	.word	0x0800ccdc
 800c51c:	ffff0001 	.word	0xffff0001

0800c520 <fiprintf>:
 800c520:	b40e      	push	{r1, r2, r3}
 800c522:	b503      	push	{r0, r1, lr}
 800c524:	4601      	mov	r1, r0
 800c526:	ab03      	add	r3, sp, #12
 800c528:	4805      	ldr	r0, [pc, #20]	; (800c540 <fiprintf+0x20>)
 800c52a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c52e:	6800      	ldr	r0, [r0, #0]
 800c530:	9301      	str	r3, [sp, #4]
 800c532:	f000 f8a5 	bl	800c680 <_vfiprintf_r>
 800c536:	b002      	add	sp, #8
 800c538:	f85d eb04 	ldr.w	lr, [sp], #4
 800c53c:	b003      	add	sp, #12
 800c53e:	4770      	bx	lr
 800c540:	20000010 	.word	0x20000010

0800c544 <_fwalk_reent>:
 800c544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c548:	4606      	mov	r6, r0
 800c54a:	4688      	mov	r8, r1
 800c54c:	2700      	movs	r7, #0
 800c54e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c552:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c556:	f1b9 0901 	subs.w	r9, r9, #1
 800c55a:	d505      	bpl.n	800c568 <_fwalk_reent+0x24>
 800c55c:	6824      	ldr	r4, [r4, #0]
 800c55e:	2c00      	cmp	r4, #0
 800c560:	d1f7      	bne.n	800c552 <_fwalk_reent+0xe>
 800c562:	4638      	mov	r0, r7
 800c564:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c568:	89ab      	ldrh	r3, [r5, #12]
 800c56a:	2b01      	cmp	r3, #1
 800c56c:	d907      	bls.n	800c57e <_fwalk_reent+0x3a>
 800c56e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c572:	3301      	adds	r3, #1
 800c574:	d003      	beq.n	800c57e <_fwalk_reent+0x3a>
 800c576:	4629      	mov	r1, r5
 800c578:	4630      	mov	r0, r6
 800c57a:	47c0      	blx	r8
 800c57c:	4307      	orrs	r7, r0
 800c57e:	3568      	adds	r5, #104	; 0x68
 800c580:	e7e9      	b.n	800c556 <_fwalk_reent+0x12>

0800c582 <__retarget_lock_init_recursive>:
 800c582:	4770      	bx	lr

0800c584 <__retarget_lock_acquire_recursive>:
 800c584:	4770      	bx	lr

0800c586 <__retarget_lock_release_recursive>:
 800c586:	4770      	bx	lr

0800c588 <memmove>:
 800c588:	4288      	cmp	r0, r1
 800c58a:	b510      	push	{r4, lr}
 800c58c:	eb01 0402 	add.w	r4, r1, r2
 800c590:	d902      	bls.n	800c598 <memmove+0x10>
 800c592:	4284      	cmp	r4, r0
 800c594:	4623      	mov	r3, r4
 800c596:	d807      	bhi.n	800c5a8 <memmove+0x20>
 800c598:	1e43      	subs	r3, r0, #1
 800c59a:	42a1      	cmp	r1, r4
 800c59c:	d008      	beq.n	800c5b0 <memmove+0x28>
 800c59e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c5a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c5a6:	e7f8      	b.n	800c59a <memmove+0x12>
 800c5a8:	4601      	mov	r1, r0
 800c5aa:	4402      	add	r2, r0
 800c5ac:	428a      	cmp	r2, r1
 800c5ae:	d100      	bne.n	800c5b2 <memmove+0x2a>
 800c5b0:	bd10      	pop	{r4, pc}
 800c5b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c5b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c5ba:	e7f7      	b.n	800c5ac <memmove+0x24>

0800c5bc <__malloc_lock>:
 800c5bc:	4801      	ldr	r0, [pc, #4]	; (800c5c4 <__malloc_lock+0x8>)
 800c5be:	f7ff bfe1 	b.w	800c584 <__retarget_lock_acquire_recursive>
 800c5c2:	bf00      	nop
 800c5c4:	2000073c 	.word	0x2000073c

0800c5c8 <__malloc_unlock>:
 800c5c8:	4801      	ldr	r0, [pc, #4]	; (800c5d0 <__malloc_unlock+0x8>)
 800c5ca:	f7ff bfdc 	b.w	800c586 <__retarget_lock_release_recursive>
 800c5ce:	bf00      	nop
 800c5d0:	2000073c 	.word	0x2000073c

0800c5d4 <_realloc_r>:
 800c5d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5d8:	4680      	mov	r8, r0
 800c5da:	4614      	mov	r4, r2
 800c5dc:	460e      	mov	r6, r1
 800c5de:	b921      	cbnz	r1, 800c5ea <_realloc_r+0x16>
 800c5e0:	4611      	mov	r1, r2
 800c5e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c5e6:	f7fe bfc5 	b.w	800b574 <_malloc_r>
 800c5ea:	b92a      	cbnz	r2, 800c5f8 <_realloc_r+0x24>
 800c5ec:	f7fe ff5a 	bl	800b4a4 <_free_r>
 800c5f0:	4625      	mov	r5, r4
 800c5f2:	4628      	mov	r0, r5
 800c5f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5f8:	f000 fa9e 	bl	800cb38 <_malloc_usable_size_r>
 800c5fc:	4284      	cmp	r4, r0
 800c5fe:	4607      	mov	r7, r0
 800c600:	d802      	bhi.n	800c608 <_realloc_r+0x34>
 800c602:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c606:	d812      	bhi.n	800c62e <_realloc_r+0x5a>
 800c608:	4621      	mov	r1, r4
 800c60a:	4640      	mov	r0, r8
 800c60c:	f7fe ffb2 	bl	800b574 <_malloc_r>
 800c610:	4605      	mov	r5, r0
 800c612:	2800      	cmp	r0, #0
 800c614:	d0ed      	beq.n	800c5f2 <_realloc_r+0x1e>
 800c616:	42bc      	cmp	r4, r7
 800c618:	4622      	mov	r2, r4
 800c61a:	4631      	mov	r1, r6
 800c61c:	bf28      	it	cs
 800c61e:	463a      	movcs	r2, r7
 800c620:	f7fb fa8c 	bl	8007b3c <memcpy>
 800c624:	4631      	mov	r1, r6
 800c626:	4640      	mov	r0, r8
 800c628:	f7fe ff3c 	bl	800b4a4 <_free_r>
 800c62c:	e7e1      	b.n	800c5f2 <_realloc_r+0x1e>
 800c62e:	4635      	mov	r5, r6
 800c630:	e7df      	b.n	800c5f2 <_realloc_r+0x1e>

0800c632 <__sfputc_r>:
 800c632:	6893      	ldr	r3, [r2, #8]
 800c634:	b410      	push	{r4}
 800c636:	3b01      	subs	r3, #1
 800c638:	2b00      	cmp	r3, #0
 800c63a:	6093      	str	r3, [r2, #8]
 800c63c:	da07      	bge.n	800c64e <__sfputc_r+0x1c>
 800c63e:	6994      	ldr	r4, [r2, #24]
 800c640:	42a3      	cmp	r3, r4
 800c642:	db01      	blt.n	800c648 <__sfputc_r+0x16>
 800c644:	290a      	cmp	r1, #10
 800c646:	d102      	bne.n	800c64e <__sfputc_r+0x1c>
 800c648:	bc10      	pop	{r4}
 800c64a:	f000 b949 	b.w	800c8e0 <__swbuf_r>
 800c64e:	6813      	ldr	r3, [r2, #0]
 800c650:	1c58      	adds	r0, r3, #1
 800c652:	6010      	str	r0, [r2, #0]
 800c654:	7019      	strb	r1, [r3, #0]
 800c656:	4608      	mov	r0, r1
 800c658:	bc10      	pop	{r4}
 800c65a:	4770      	bx	lr

0800c65c <__sfputs_r>:
 800c65c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c65e:	4606      	mov	r6, r0
 800c660:	460f      	mov	r7, r1
 800c662:	4614      	mov	r4, r2
 800c664:	18d5      	adds	r5, r2, r3
 800c666:	42ac      	cmp	r4, r5
 800c668:	d101      	bne.n	800c66e <__sfputs_r+0x12>
 800c66a:	2000      	movs	r0, #0
 800c66c:	e007      	b.n	800c67e <__sfputs_r+0x22>
 800c66e:	463a      	mov	r2, r7
 800c670:	4630      	mov	r0, r6
 800c672:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c676:	f7ff ffdc 	bl	800c632 <__sfputc_r>
 800c67a:	1c43      	adds	r3, r0, #1
 800c67c:	d1f3      	bne.n	800c666 <__sfputs_r+0xa>
 800c67e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c680 <_vfiprintf_r>:
 800c680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c684:	460d      	mov	r5, r1
 800c686:	4614      	mov	r4, r2
 800c688:	4698      	mov	r8, r3
 800c68a:	4606      	mov	r6, r0
 800c68c:	b09d      	sub	sp, #116	; 0x74
 800c68e:	b118      	cbz	r0, 800c698 <_vfiprintf_r+0x18>
 800c690:	6983      	ldr	r3, [r0, #24]
 800c692:	b90b      	cbnz	r3, 800c698 <_vfiprintf_r+0x18>
 800c694:	f7ff fec6 	bl	800c424 <__sinit>
 800c698:	4b89      	ldr	r3, [pc, #548]	; (800c8c0 <_vfiprintf_r+0x240>)
 800c69a:	429d      	cmp	r5, r3
 800c69c:	d11b      	bne.n	800c6d6 <_vfiprintf_r+0x56>
 800c69e:	6875      	ldr	r5, [r6, #4]
 800c6a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c6a2:	07d9      	lsls	r1, r3, #31
 800c6a4:	d405      	bmi.n	800c6b2 <_vfiprintf_r+0x32>
 800c6a6:	89ab      	ldrh	r3, [r5, #12]
 800c6a8:	059a      	lsls	r2, r3, #22
 800c6aa:	d402      	bmi.n	800c6b2 <_vfiprintf_r+0x32>
 800c6ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c6ae:	f7ff ff69 	bl	800c584 <__retarget_lock_acquire_recursive>
 800c6b2:	89ab      	ldrh	r3, [r5, #12]
 800c6b4:	071b      	lsls	r3, r3, #28
 800c6b6:	d501      	bpl.n	800c6bc <_vfiprintf_r+0x3c>
 800c6b8:	692b      	ldr	r3, [r5, #16]
 800c6ba:	b9eb      	cbnz	r3, 800c6f8 <_vfiprintf_r+0x78>
 800c6bc:	4629      	mov	r1, r5
 800c6be:	4630      	mov	r0, r6
 800c6c0:	f000 f960 	bl	800c984 <__swsetup_r>
 800c6c4:	b1c0      	cbz	r0, 800c6f8 <_vfiprintf_r+0x78>
 800c6c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c6c8:	07dc      	lsls	r4, r3, #31
 800c6ca:	d50e      	bpl.n	800c6ea <_vfiprintf_r+0x6a>
 800c6cc:	f04f 30ff 	mov.w	r0, #4294967295
 800c6d0:	b01d      	add	sp, #116	; 0x74
 800c6d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6d6:	4b7b      	ldr	r3, [pc, #492]	; (800c8c4 <_vfiprintf_r+0x244>)
 800c6d8:	429d      	cmp	r5, r3
 800c6da:	d101      	bne.n	800c6e0 <_vfiprintf_r+0x60>
 800c6dc:	68b5      	ldr	r5, [r6, #8]
 800c6de:	e7df      	b.n	800c6a0 <_vfiprintf_r+0x20>
 800c6e0:	4b79      	ldr	r3, [pc, #484]	; (800c8c8 <_vfiprintf_r+0x248>)
 800c6e2:	429d      	cmp	r5, r3
 800c6e4:	bf08      	it	eq
 800c6e6:	68f5      	ldreq	r5, [r6, #12]
 800c6e8:	e7da      	b.n	800c6a0 <_vfiprintf_r+0x20>
 800c6ea:	89ab      	ldrh	r3, [r5, #12]
 800c6ec:	0598      	lsls	r0, r3, #22
 800c6ee:	d4ed      	bmi.n	800c6cc <_vfiprintf_r+0x4c>
 800c6f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c6f2:	f7ff ff48 	bl	800c586 <__retarget_lock_release_recursive>
 800c6f6:	e7e9      	b.n	800c6cc <_vfiprintf_r+0x4c>
 800c6f8:	2300      	movs	r3, #0
 800c6fa:	9309      	str	r3, [sp, #36]	; 0x24
 800c6fc:	2320      	movs	r3, #32
 800c6fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c702:	2330      	movs	r3, #48	; 0x30
 800c704:	f04f 0901 	mov.w	r9, #1
 800c708:	f8cd 800c 	str.w	r8, [sp, #12]
 800c70c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800c8cc <_vfiprintf_r+0x24c>
 800c710:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c714:	4623      	mov	r3, r4
 800c716:	469a      	mov	sl, r3
 800c718:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c71c:	b10a      	cbz	r2, 800c722 <_vfiprintf_r+0xa2>
 800c71e:	2a25      	cmp	r2, #37	; 0x25
 800c720:	d1f9      	bne.n	800c716 <_vfiprintf_r+0x96>
 800c722:	ebba 0b04 	subs.w	fp, sl, r4
 800c726:	d00b      	beq.n	800c740 <_vfiprintf_r+0xc0>
 800c728:	465b      	mov	r3, fp
 800c72a:	4622      	mov	r2, r4
 800c72c:	4629      	mov	r1, r5
 800c72e:	4630      	mov	r0, r6
 800c730:	f7ff ff94 	bl	800c65c <__sfputs_r>
 800c734:	3001      	adds	r0, #1
 800c736:	f000 80aa 	beq.w	800c88e <_vfiprintf_r+0x20e>
 800c73a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c73c:	445a      	add	r2, fp
 800c73e:	9209      	str	r2, [sp, #36]	; 0x24
 800c740:	f89a 3000 	ldrb.w	r3, [sl]
 800c744:	2b00      	cmp	r3, #0
 800c746:	f000 80a2 	beq.w	800c88e <_vfiprintf_r+0x20e>
 800c74a:	2300      	movs	r3, #0
 800c74c:	f04f 32ff 	mov.w	r2, #4294967295
 800c750:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c754:	f10a 0a01 	add.w	sl, sl, #1
 800c758:	9304      	str	r3, [sp, #16]
 800c75a:	9307      	str	r3, [sp, #28]
 800c75c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c760:	931a      	str	r3, [sp, #104]	; 0x68
 800c762:	4654      	mov	r4, sl
 800c764:	2205      	movs	r2, #5
 800c766:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c76a:	4858      	ldr	r0, [pc, #352]	; (800c8cc <_vfiprintf_r+0x24c>)
 800c76c:	f7fe f9c0 	bl	800aaf0 <memchr>
 800c770:	9a04      	ldr	r2, [sp, #16]
 800c772:	b9d8      	cbnz	r0, 800c7ac <_vfiprintf_r+0x12c>
 800c774:	06d1      	lsls	r1, r2, #27
 800c776:	bf44      	itt	mi
 800c778:	2320      	movmi	r3, #32
 800c77a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c77e:	0713      	lsls	r3, r2, #28
 800c780:	bf44      	itt	mi
 800c782:	232b      	movmi	r3, #43	; 0x2b
 800c784:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c788:	f89a 3000 	ldrb.w	r3, [sl]
 800c78c:	2b2a      	cmp	r3, #42	; 0x2a
 800c78e:	d015      	beq.n	800c7bc <_vfiprintf_r+0x13c>
 800c790:	4654      	mov	r4, sl
 800c792:	2000      	movs	r0, #0
 800c794:	f04f 0c0a 	mov.w	ip, #10
 800c798:	9a07      	ldr	r2, [sp, #28]
 800c79a:	4621      	mov	r1, r4
 800c79c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c7a0:	3b30      	subs	r3, #48	; 0x30
 800c7a2:	2b09      	cmp	r3, #9
 800c7a4:	d94e      	bls.n	800c844 <_vfiprintf_r+0x1c4>
 800c7a6:	b1b0      	cbz	r0, 800c7d6 <_vfiprintf_r+0x156>
 800c7a8:	9207      	str	r2, [sp, #28]
 800c7aa:	e014      	b.n	800c7d6 <_vfiprintf_r+0x156>
 800c7ac:	eba0 0308 	sub.w	r3, r0, r8
 800c7b0:	fa09 f303 	lsl.w	r3, r9, r3
 800c7b4:	4313      	orrs	r3, r2
 800c7b6:	46a2      	mov	sl, r4
 800c7b8:	9304      	str	r3, [sp, #16]
 800c7ba:	e7d2      	b.n	800c762 <_vfiprintf_r+0xe2>
 800c7bc:	9b03      	ldr	r3, [sp, #12]
 800c7be:	1d19      	adds	r1, r3, #4
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	9103      	str	r1, [sp, #12]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	bfbb      	ittet	lt
 800c7c8:	425b      	neglt	r3, r3
 800c7ca:	f042 0202 	orrlt.w	r2, r2, #2
 800c7ce:	9307      	strge	r3, [sp, #28]
 800c7d0:	9307      	strlt	r3, [sp, #28]
 800c7d2:	bfb8      	it	lt
 800c7d4:	9204      	strlt	r2, [sp, #16]
 800c7d6:	7823      	ldrb	r3, [r4, #0]
 800c7d8:	2b2e      	cmp	r3, #46	; 0x2e
 800c7da:	d10c      	bne.n	800c7f6 <_vfiprintf_r+0x176>
 800c7dc:	7863      	ldrb	r3, [r4, #1]
 800c7de:	2b2a      	cmp	r3, #42	; 0x2a
 800c7e0:	d135      	bne.n	800c84e <_vfiprintf_r+0x1ce>
 800c7e2:	9b03      	ldr	r3, [sp, #12]
 800c7e4:	3402      	adds	r4, #2
 800c7e6:	1d1a      	adds	r2, r3, #4
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	9203      	str	r2, [sp, #12]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	bfb8      	it	lt
 800c7f0:	f04f 33ff 	movlt.w	r3, #4294967295
 800c7f4:	9305      	str	r3, [sp, #20]
 800c7f6:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800c8d0 <_vfiprintf_r+0x250>
 800c7fa:	2203      	movs	r2, #3
 800c7fc:	4650      	mov	r0, sl
 800c7fe:	7821      	ldrb	r1, [r4, #0]
 800c800:	f7fe f976 	bl	800aaf0 <memchr>
 800c804:	b140      	cbz	r0, 800c818 <_vfiprintf_r+0x198>
 800c806:	2340      	movs	r3, #64	; 0x40
 800c808:	eba0 000a 	sub.w	r0, r0, sl
 800c80c:	fa03 f000 	lsl.w	r0, r3, r0
 800c810:	9b04      	ldr	r3, [sp, #16]
 800c812:	3401      	adds	r4, #1
 800c814:	4303      	orrs	r3, r0
 800c816:	9304      	str	r3, [sp, #16]
 800c818:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c81c:	2206      	movs	r2, #6
 800c81e:	482d      	ldr	r0, [pc, #180]	; (800c8d4 <_vfiprintf_r+0x254>)
 800c820:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c824:	f7fe f964 	bl	800aaf0 <memchr>
 800c828:	2800      	cmp	r0, #0
 800c82a:	d03f      	beq.n	800c8ac <_vfiprintf_r+0x22c>
 800c82c:	4b2a      	ldr	r3, [pc, #168]	; (800c8d8 <_vfiprintf_r+0x258>)
 800c82e:	bb1b      	cbnz	r3, 800c878 <_vfiprintf_r+0x1f8>
 800c830:	9b03      	ldr	r3, [sp, #12]
 800c832:	3307      	adds	r3, #7
 800c834:	f023 0307 	bic.w	r3, r3, #7
 800c838:	3308      	adds	r3, #8
 800c83a:	9303      	str	r3, [sp, #12]
 800c83c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c83e:	443b      	add	r3, r7
 800c840:	9309      	str	r3, [sp, #36]	; 0x24
 800c842:	e767      	b.n	800c714 <_vfiprintf_r+0x94>
 800c844:	460c      	mov	r4, r1
 800c846:	2001      	movs	r0, #1
 800c848:	fb0c 3202 	mla	r2, ip, r2, r3
 800c84c:	e7a5      	b.n	800c79a <_vfiprintf_r+0x11a>
 800c84e:	2300      	movs	r3, #0
 800c850:	f04f 0c0a 	mov.w	ip, #10
 800c854:	4619      	mov	r1, r3
 800c856:	3401      	adds	r4, #1
 800c858:	9305      	str	r3, [sp, #20]
 800c85a:	4620      	mov	r0, r4
 800c85c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c860:	3a30      	subs	r2, #48	; 0x30
 800c862:	2a09      	cmp	r2, #9
 800c864:	d903      	bls.n	800c86e <_vfiprintf_r+0x1ee>
 800c866:	2b00      	cmp	r3, #0
 800c868:	d0c5      	beq.n	800c7f6 <_vfiprintf_r+0x176>
 800c86a:	9105      	str	r1, [sp, #20]
 800c86c:	e7c3      	b.n	800c7f6 <_vfiprintf_r+0x176>
 800c86e:	4604      	mov	r4, r0
 800c870:	2301      	movs	r3, #1
 800c872:	fb0c 2101 	mla	r1, ip, r1, r2
 800c876:	e7f0      	b.n	800c85a <_vfiprintf_r+0x1da>
 800c878:	ab03      	add	r3, sp, #12
 800c87a:	9300      	str	r3, [sp, #0]
 800c87c:	462a      	mov	r2, r5
 800c87e:	4630      	mov	r0, r6
 800c880:	4b16      	ldr	r3, [pc, #88]	; (800c8dc <_vfiprintf_r+0x25c>)
 800c882:	a904      	add	r1, sp, #16
 800c884:	f7fb fa0e 	bl	8007ca4 <_printf_float>
 800c888:	4607      	mov	r7, r0
 800c88a:	1c78      	adds	r0, r7, #1
 800c88c:	d1d6      	bne.n	800c83c <_vfiprintf_r+0x1bc>
 800c88e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c890:	07d9      	lsls	r1, r3, #31
 800c892:	d405      	bmi.n	800c8a0 <_vfiprintf_r+0x220>
 800c894:	89ab      	ldrh	r3, [r5, #12]
 800c896:	059a      	lsls	r2, r3, #22
 800c898:	d402      	bmi.n	800c8a0 <_vfiprintf_r+0x220>
 800c89a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c89c:	f7ff fe73 	bl	800c586 <__retarget_lock_release_recursive>
 800c8a0:	89ab      	ldrh	r3, [r5, #12]
 800c8a2:	065b      	lsls	r3, r3, #25
 800c8a4:	f53f af12 	bmi.w	800c6cc <_vfiprintf_r+0x4c>
 800c8a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c8aa:	e711      	b.n	800c6d0 <_vfiprintf_r+0x50>
 800c8ac:	ab03      	add	r3, sp, #12
 800c8ae:	9300      	str	r3, [sp, #0]
 800c8b0:	462a      	mov	r2, r5
 800c8b2:	4630      	mov	r0, r6
 800c8b4:	4b09      	ldr	r3, [pc, #36]	; (800c8dc <_vfiprintf_r+0x25c>)
 800c8b6:	a904      	add	r1, sp, #16
 800c8b8:	f7fb fc90 	bl	80081dc <_printf_i>
 800c8bc:	e7e4      	b.n	800c888 <_vfiprintf_r+0x208>
 800c8be:	bf00      	nop
 800c8c0:	0800d154 	.word	0x0800d154
 800c8c4:	0800d174 	.word	0x0800d174
 800c8c8:	0800d134 	.word	0x0800d134
 800c8cc:	0800d0cc 	.word	0x0800d0cc
 800c8d0:	0800d0d2 	.word	0x0800d0d2
 800c8d4:	0800d0d6 	.word	0x0800d0d6
 800c8d8:	08007ca5 	.word	0x08007ca5
 800c8dc:	0800c65d 	.word	0x0800c65d

0800c8e0 <__swbuf_r>:
 800c8e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8e2:	460e      	mov	r6, r1
 800c8e4:	4614      	mov	r4, r2
 800c8e6:	4605      	mov	r5, r0
 800c8e8:	b118      	cbz	r0, 800c8f2 <__swbuf_r+0x12>
 800c8ea:	6983      	ldr	r3, [r0, #24]
 800c8ec:	b90b      	cbnz	r3, 800c8f2 <__swbuf_r+0x12>
 800c8ee:	f7ff fd99 	bl	800c424 <__sinit>
 800c8f2:	4b21      	ldr	r3, [pc, #132]	; (800c978 <__swbuf_r+0x98>)
 800c8f4:	429c      	cmp	r4, r3
 800c8f6:	d12b      	bne.n	800c950 <__swbuf_r+0x70>
 800c8f8:	686c      	ldr	r4, [r5, #4]
 800c8fa:	69a3      	ldr	r3, [r4, #24]
 800c8fc:	60a3      	str	r3, [r4, #8]
 800c8fe:	89a3      	ldrh	r3, [r4, #12]
 800c900:	071a      	lsls	r2, r3, #28
 800c902:	d52f      	bpl.n	800c964 <__swbuf_r+0x84>
 800c904:	6923      	ldr	r3, [r4, #16]
 800c906:	b36b      	cbz	r3, 800c964 <__swbuf_r+0x84>
 800c908:	6923      	ldr	r3, [r4, #16]
 800c90a:	6820      	ldr	r0, [r4, #0]
 800c90c:	b2f6      	uxtb	r6, r6
 800c90e:	1ac0      	subs	r0, r0, r3
 800c910:	6963      	ldr	r3, [r4, #20]
 800c912:	4637      	mov	r7, r6
 800c914:	4283      	cmp	r3, r0
 800c916:	dc04      	bgt.n	800c922 <__swbuf_r+0x42>
 800c918:	4621      	mov	r1, r4
 800c91a:	4628      	mov	r0, r5
 800c91c:	f7ff fcee 	bl	800c2fc <_fflush_r>
 800c920:	bb30      	cbnz	r0, 800c970 <__swbuf_r+0x90>
 800c922:	68a3      	ldr	r3, [r4, #8]
 800c924:	3001      	adds	r0, #1
 800c926:	3b01      	subs	r3, #1
 800c928:	60a3      	str	r3, [r4, #8]
 800c92a:	6823      	ldr	r3, [r4, #0]
 800c92c:	1c5a      	adds	r2, r3, #1
 800c92e:	6022      	str	r2, [r4, #0]
 800c930:	701e      	strb	r6, [r3, #0]
 800c932:	6963      	ldr	r3, [r4, #20]
 800c934:	4283      	cmp	r3, r0
 800c936:	d004      	beq.n	800c942 <__swbuf_r+0x62>
 800c938:	89a3      	ldrh	r3, [r4, #12]
 800c93a:	07db      	lsls	r3, r3, #31
 800c93c:	d506      	bpl.n	800c94c <__swbuf_r+0x6c>
 800c93e:	2e0a      	cmp	r6, #10
 800c940:	d104      	bne.n	800c94c <__swbuf_r+0x6c>
 800c942:	4621      	mov	r1, r4
 800c944:	4628      	mov	r0, r5
 800c946:	f7ff fcd9 	bl	800c2fc <_fflush_r>
 800c94a:	b988      	cbnz	r0, 800c970 <__swbuf_r+0x90>
 800c94c:	4638      	mov	r0, r7
 800c94e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c950:	4b0a      	ldr	r3, [pc, #40]	; (800c97c <__swbuf_r+0x9c>)
 800c952:	429c      	cmp	r4, r3
 800c954:	d101      	bne.n	800c95a <__swbuf_r+0x7a>
 800c956:	68ac      	ldr	r4, [r5, #8]
 800c958:	e7cf      	b.n	800c8fa <__swbuf_r+0x1a>
 800c95a:	4b09      	ldr	r3, [pc, #36]	; (800c980 <__swbuf_r+0xa0>)
 800c95c:	429c      	cmp	r4, r3
 800c95e:	bf08      	it	eq
 800c960:	68ec      	ldreq	r4, [r5, #12]
 800c962:	e7ca      	b.n	800c8fa <__swbuf_r+0x1a>
 800c964:	4621      	mov	r1, r4
 800c966:	4628      	mov	r0, r5
 800c968:	f000 f80c 	bl	800c984 <__swsetup_r>
 800c96c:	2800      	cmp	r0, #0
 800c96e:	d0cb      	beq.n	800c908 <__swbuf_r+0x28>
 800c970:	f04f 37ff 	mov.w	r7, #4294967295
 800c974:	e7ea      	b.n	800c94c <__swbuf_r+0x6c>
 800c976:	bf00      	nop
 800c978:	0800d154 	.word	0x0800d154
 800c97c:	0800d174 	.word	0x0800d174
 800c980:	0800d134 	.word	0x0800d134

0800c984 <__swsetup_r>:
 800c984:	4b32      	ldr	r3, [pc, #200]	; (800ca50 <__swsetup_r+0xcc>)
 800c986:	b570      	push	{r4, r5, r6, lr}
 800c988:	681d      	ldr	r5, [r3, #0]
 800c98a:	4606      	mov	r6, r0
 800c98c:	460c      	mov	r4, r1
 800c98e:	b125      	cbz	r5, 800c99a <__swsetup_r+0x16>
 800c990:	69ab      	ldr	r3, [r5, #24]
 800c992:	b913      	cbnz	r3, 800c99a <__swsetup_r+0x16>
 800c994:	4628      	mov	r0, r5
 800c996:	f7ff fd45 	bl	800c424 <__sinit>
 800c99a:	4b2e      	ldr	r3, [pc, #184]	; (800ca54 <__swsetup_r+0xd0>)
 800c99c:	429c      	cmp	r4, r3
 800c99e:	d10f      	bne.n	800c9c0 <__swsetup_r+0x3c>
 800c9a0:	686c      	ldr	r4, [r5, #4]
 800c9a2:	89a3      	ldrh	r3, [r4, #12]
 800c9a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c9a8:	0719      	lsls	r1, r3, #28
 800c9aa:	d42c      	bmi.n	800ca06 <__swsetup_r+0x82>
 800c9ac:	06dd      	lsls	r5, r3, #27
 800c9ae:	d411      	bmi.n	800c9d4 <__swsetup_r+0x50>
 800c9b0:	2309      	movs	r3, #9
 800c9b2:	6033      	str	r3, [r6, #0]
 800c9b4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c9b8:	f04f 30ff 	mov.w	r0, #4294967295
 800c9bc:	81a3      	strh	r3, [r4, #12]
 800c9be:	e03e      	b.n	800ca3e <__swsetup_r+0xba>
 800c9c0:	4b25      	ldr	r3, [pc, #148]	; (800ca58 <__swsetup_r+0xd4>)
 800c9c2:	429c      	cmp	r4, r3
 800c9c4:	d101      	bne.n	800c9ca <__swsetup_r+0x46>
 800c9c6:	68ac      	ldr	r4, [r5, #8]
 800c9c8:	e7eb      	b.n	800c9a2 <__swsetup_r+0x1e>
 800c9ca:	4b24      	ldr	r3, [pc, #144]	; (800ca5c <__swsetup_r+0xd8>)
 800c9cc:	429c      	cmp	r4, r3
 800c9ce:	bf08      	it	eq
 800c9d0:	68ec      	ldreq	r4, [r5, #12]
 800c9d2:	e7e6      	b.n	800c9a2 <__swsetup_r+0x1e>
 800c9d4:	0758      	lsls	r0, r3, #29
 800c9d6:	d512      	bpl.n	800c9fe <__swsetup_r+0x7a>
 800c9d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c9da:	b141      	cbz	r1, 800c9ee <__swsetup_r+0x6a>
 800c9dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c9e0:	4299      	cmp	r1, r3
 800c9e2:	d002      	beq.n	800c9ea <__swsetup_r+0x66>
 800c9e4:	4630      	mov	r0, r6
 800c9e6:	f7fe fd5d 	bl	800b4a4 <_free_r>
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	6363      	str	r3, [r4, #52]	; 0x34
 800c9ee:	89a3      	ldrh	r3, [r4, #12]
 800c9f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c9f4:	81a3      	strh	r3, [r4, #12]
 800c9f6:	2300      	movs	r3, #0
 800c9f8:	6063      	str	r3, [r4, #4]
 800c9fa:	6923      	ldr	r3, [r4, #16]
 800c9fc:	6023      	str	r3, [r4, #0]
 800c9fe:	89a3      	ldrh	r3, [r4, #12]
 800ca00:	f043 0308 	orr.w	r3, r3, #8
 800ca04:	81a3      	strh	r3, [r4, #12]
 800ca06:	6923      	ldr	r3, [r4, #16]
 800ca08:	b94b      	cbnz	r3, 800ca1e <__swsetup_r+0x9a>
 800ca0a:	89a3      	ldrh	r3, [r4, #12]
 800ca0c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ca10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ca14:	d003      	beq.n	800ca1e <__swsetup_r+0x9a>
 800ca16:	4621      	mov	r1, r4
 800ca18:	4630      	mov	r0, r6
 800ca1a:	f000 f84d 	bl	800cab8 <__smakebuf_r>
 800ca1e:	89a0      	ldrh	r0, [r4, #12]
 800ca20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ca24:	f010 0301 	ands.w	r3, r0, #1
 800ca28:	d00a      	beq.n	800ca40 <__swsetup_r+0xbc>
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	60a3      	str	r3, [r4, #8]
 800ca2e:	6963      	ldr	r3, [r4, #20]
 800ca30:	425b      	negs	r3, r3
 800ca32:	61a3      	str	r3, [r4, #24]
 800ca34:	6923      	ldr	r3, [r4, #16]
 800ca36:	b943      	cbnz	r3, 800ca4a <__swsetup_r+0xc6>
 800ca38:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ca3c:	d1ba      	bne.n	800c9b4 <__swsetup_r+0x30>
 800ca3e:	bd70      	pop	{r4, r5, r6, pc}
 800ca40:	0781      	lsls	r1, r0, #30
 800ca42:	bf58      	it	pl
 800ca44:	6963      	ldrpl	r3, [r4, #20]
 800ca46:	60a3      	str	r3, [r4, #8]
 800ca48:	e7f4      	b.n	800ca34 <__swsetup_r+0xb0>
 800ca4a:	2000      	movs	r0, #0
 800ca4c:	e7f7      	b.n	800ca3e <__swsetup_r+0xba>
 800ca4e:	bf00      	nop
 800ca50:	20000010 	.word	0x20000010
 800ca54:	0800d154 	.word	0x0800d154
 800ca58:	0800d174 	.word	0x0800d174
 800ca5c:	0800d134 	.word	0x0800d134

0800ca60 <abort>:
 800ca60:	2006      	movs	r0, #6
 800ca62:	b508      	push	{r3, lr}
 800ca64:	f000 f898 	bl	800cb98 <raise>
 800ca68:	2001      	movs	r0, #1
 800ca6a:	f7f6 fb44 	bl	80030f6 <_exit>

0800ca6e <__swhatbuf_r>:
 800ca6e:	b570      	push	{r4, r5, r6, lr}
 800ca70:	460e      	mov	r6, r1
 800ca72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca76:	4614      	mov	r4, r2
 800ca78:	2900      	cmp	r1, #0
 800ca7a:	461d      	mov	r5, r3
 800ca7c:	b096      	sub	sp, #88	; 0x58
 800ca7e:	da08      	bge.n	800ca92 <__swhatbuf_r+0x24>
 800ca80:	2200      	movs	r2, #0
 800ca82:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ca86:	602a      	str	r2, [r5, #0]
 800ca88:	061a      	lsls	r2, r3, #24
 800ca8a:	d410      	bmi.n	800caae <__swhatbuf_r+0x40>
 800ca8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ca90:	e00e      	b.n	800cab0 <__swhatbuf_r+0x42>
 800ca92:	466a      	mov	r2, sp
 800ca94:	f000 f89c 	bl	800cbd0 <_fstat_r>
 800ca98:	2800      	cmp	r0, #0
 800ca9a:	dbf1      	blt.n	800ca80 <__swhatbuf_r+0x12>
 800ca9c:	9a01      	ldr	r2, [sp, #4]
 800ca9e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800caa2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800caa6:	425a      	negs	r2, r3
 800caa8:	415a      	adcs	r2, r3
 800caaa:	602a      	str	r2, [r5, #0]
 800caac:	e7ee      	b.n	800ca8c <__swhatbuf_r+0x1e>
 800caae:	2340      	movs	r3, #64	; 0x40
 800cab0:	2000      	movs	r0, #0
 800cab2:	6023      	str	r3, [r4, #0]
 800cab4:	b016      	add	sp, #88	; 0x58
 800cab6:	bd70      	pop	{r4, r5, r6, pc}

0800cab8 <__smakebuf_r>:
 800cab8:	898b      	ldrh	r3, [r1, #12]
 800caba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cabc:	079d      	lsls	r5, r3, #30
 800cabe:	4606      	mov	r6, r0
 800cac0:	460c      	mov	r4, r1
 800cac2:	d507      	bpl.n	800cad4 <__smakebuf_r+0x1c>
 800cac4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cac8:	6023      	str	r3, [r4, #0]
 800caca:	6123      	str	r3, [r4, #16]
 800cacc:	2301      	movs	r3, #1
 800cace:	6163      	str	r3, [r4, #20]
 800cad0:	b002      	add	sp, #8
 800cad2:	bd70      	pop	{r4, r5, r6, pc}
 800cad4:	466a      	mov	r2, sp
 800cad6:	ab01      	add	r3, sp, #4
 800cad8:	f7ff ffc9 	bl	800ca6e <__swhatbuf_r>
 800cadc:	9900      	ldr	r1, [sp, #0]
 800cade:	4605      	mov	r5, r0
 800cae0:	4630      	mov	r0, r6
 800cae2:	f7fe fd47 	bl	800b574 <_malloc_r>
 800cae6:	b948      	cbnz	r0, 800cafc <__smakebuf_r+0x44>
 800cae8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800caec:	059a      	lsls	r2, r3, #22
 800caee:	d4ef      	bmi.n	800cad0 <__smakebuf_r+0x18>
 800caf0:	f023 0303 	bic.w	r3, r3, #3
 800caf4:	f043 0302 	orr.w	r3, r3, #2
 800caf8:	81a3      	strh	r3, [r4, #12]
 800cafa:	e7e3      	b.n	800cac4 <__smakebuf_r+0xc>
 800cafc:	4b0d      	ldr	r3, [pc, #52]	; (800cb34 <__smakebuf_r+0x7c>)
 800cafe:	62b3      	str	r3, [r6, #40]	; 0x28
 800cb00:	89a3      	ldrh	r3, [r4, #12]
 800cb02:	6020      	str	r0, [r4, #0]
 800cb04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb08:	81a3      	strh	r3, [r4, #12]
 800cb0a:	9b00      	ldr	r3, [sp, #0]
 800cb0c:	6120      	str	r0, [r4, #16]
 800cb0e:	6163      	str	r3, [r4, #20]
 800cb10:	9b01      	ldr	r3, [sp, #4]
 800cb12:	b15b      	cbz	r3, 800cb2c <__smakebuf_r+0x74>
 800cb14:	4630      	mov	r0, r6
 800cb16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cb1a:	f000 f86b 	bl	800cbf4 <_isatty_r>
 800cb1e:	b128      	cbz	r0, 800cb2c <__smakebuf_r+0x74>
 800cb20:	89a3      	ldrh	r3, [r4, #12]
 800cb22:	f023 0303 	bic.w	r3, r3, #3
 800cb26:	f043 0301 	orr.w	r3, r3, #1
 800cb2a:	81a3      	strh	r3, [r4, #12]
 800cb2c:	89a0      	ldrh	r0, [r4, #12]
 800cb2e:	4305      	orrs	r5, r0
 800cb30:	81a5      	strh	r5, [r4, #12]
 800cb32:	e7cd      	b.n	800cad0 <__smakebuf_r+0x18>
 800cb34:	0800c3bd 	.word	0x0800c3bd

0800cb38 <_malloc_usable_size_r>:
 800cb38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb3c:	1f18      	subs	r0, r3, #4
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	bfbc      	itt	lt
 800cb42:	580b      	ldrlt	r3, [r1, r0]
 800cb44:	18c0      	addlt	r0, r0, r3
 800cb46:	4770      	bx	lr

0800cb48 <_raise_r>:
 800cb48:	291f      	cmp	r1, #31
 800cb4a:	b538      	push	{r3, r4, r5, lr}
 800cb4c:	4604      	mov	r4, r0
 800cb4e:	460d      	mov	r5, r1
 800cb50:	d904      	bls.n	800cb5c <_raise_r+0x14>
 800cb52:	2316      	movs	r3, #22
 800cb54:	6003      	str	r3, [r0, #0]
 800cb56:	f04f 30ff 	mov.w	r0, #4294967295
 800cb5a:	bd38      	pop	{r3, r4, r5, pc}
 800cb5c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cb5e:	b112      	cbz	r2, 800cb66 <_raise_r+0x1e>
 800cb60:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cb64:	b94b      	cbnz	r3, 800cb7a <_raise_r+0x32>
 800cb66:	4620      	mov	r0, r4
 800cb68:	f000 f830 	bl	800cbcc <_getpid_r>
 800cb6c:	462a      	mov	r2, r5
 800cb6e:	4601      	mov	r1, r0
 800cb70:	4620      	mov	r0, r4
 800cb72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cb76:	f000 b817 	b.w	800cba8 <_kill_r>
 800cb7a:	2b01      	cmp	r3, #1
 800cb7c:	d00a      	beq.n	800cb94 <_raise_r+0x4c>
 800cb7e:	1c59      	adds	r1, r3, #1
 800cb80:	d103      	bne.n	800cb8a <_raise_r+0x42>
 800cb82:	2316      	movs	r3, #22
 800cb84:	6003      	str	r3, [r0, #0]
 800cb86:	2001      	movs	r0, #1
 800cb88:	e7e7      	b.n	800cb5a <_raise_r+0x12>
 800cb8a:	2400      	movs	r4, #0
 800cb8c:	4628      	mov	r0, r5
 800cb8e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cb92:	4798      	blx	r3
 800cb94:	2000      	movs	r0, #0
 800cb96:	e7e0      	b.n	800cb5a <_raise_r+0x12>

0800cb98 <raise>:
 800cb98:	4b02      	ldr	r3, [pc, #8]	; (800cba4 <raise+0xc>)
 800cb9a:	4601      	mov	r1, r0
 800cb9c:	6818      	ldr	r0, [r3, #0]
 800cb9e:	f7ff bfd3 	b.w	800cb48 <_raise_r>
 800cba2:	bf00      	nop
 800cba4:	20000010 	.word	0x20000010

0800cba8 <_kill_r>:
 800cba8:	b538      	push	{r3, r4, r5, lr}
 800cbaa:	2300      	movs	r3, #0
 800cbac:	4d06      	ldr	r5, [pc, #24]	; (800cbc8 <_kill_r+0x20>)
 800cbae:	4604      	mov	r4, r0
 800cbb0:	4608      	mov	r0, r1
 800cbb2:	4611      	mov	r1, r2
 800cbb4:	602b      	str	r3, [r5, #0]
 800cbb6:	f7f6 fa8e 	bl	80030d6 <_kill>
 800cbba:	1c43      	adds	r3, r0, #1
 800cbbc:	d102      	bne.n	800cbc4 <_kill_r+0x1c>
 800cbbe:	682b      	ldr	r3, [r5, #0]
 800cbc0:	b103      	cbz	r3, 800cbc4 <_kill_r+0x1c>
 800cbc2:	6023      	str	r3, [r4, #0]
 800cbc4:	bd38      	pop	{r3, r4, r5, pc}
 800cbc6:	bf00      	nop
 800cbc8:	20000738 	.word	0x20000738

0800cbcc <_getpid_r>:
 800cbcc:	f7f6 ba7c 	b.w	80030c8 <_getpid>

0800cbd0 <_fstat_r>:
 800cbd0:	b538      	push	{r3, r4, r5, lr}
 800cbd2:	2300      	movs	r3, #0
 800cbd4:	4d06      	ldr	r5, [pc, #24]	; (800cbf0 <_fstat_r+0x20>)
 800cbd6:	4604      	mov	r4, r0
 800cbd8:	4608      	mov	r0, r1
 800cbda:	4611      	mov	r1, r2
 800cbdc:	602b      	str	r3, [r5, #0]
 800cbde:	f7f6 fad8 	bl	8003192 <_fstat>
 800cbe2:	1c43      	adds	r3, r0, #1
 800cbe4:	d102      	bne.n	800cbec <_fstat_r+0x1c>
 800cbe6:	682b      	ldr	r3, [r5, #0]
 800cbe8:	b103      	cbz	r3, 800cbec <_fstat_r+0x1c>
 800cbea:	6023      	str	r3, [r4, #0]
 800cbec:	bd38      	pop	{r3, r4, r5, pc}
 800cbee:	bf00      	nop
 800cbf0:	20000738 	.word	0x20000738

0800cbf4 <_isatty_r>:
 800cbf4:	b538      	push	{r3, r4, r5, lr}
 800cbf6:	2300      	movs	r3, #0
 800cbf8:	4d05      	ldr	r5, [pc, #20]	; (800cc10 <_isatty_r+0x1c>)
 800cbfa:	4604      	mov	r4, r0
 800cbfc:	4608      	mov	r0, r1
 800cbfe:	602b      	str	r3, [r5, #0]
 800cc00:	f7f6 fad6 	bl	80031b0 <_isatty>
 800cc04:	1c43      	adds	r3, r0, #1
 800cc06:	d102      	bne.n	800cc0e <_isatty_r+0x1a>
 800cc08:	682b      	ldr	r3, [r5, #0]
 800cc0a:	b103      	cbz	r3, 800cc0e <_isatty_r+0x1a>
 800cc0c:	6023      	str	r3, [r4, #0]
 800cc0e:	bd38      	pop	{r3, r4, r5, pc}
 800cc10:	20000738 	.word	0x20000738

0800cc14 <_init>:
 800cc14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc16:	bf00      	nop
 800cc18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc1a:	bc08      	pop	{r3}
 800cc1c:	469e      	mov	lr, r3
 800cc1e:	4770      	bx	lr

0800cc20 <_fini>:
 800cc20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc22:	bf00      	nop
 800cc24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc26:	bc08      	pop	{r3}
 800cc28:	469e      	mov	lr, r3
 800cc2a:	4770      	bx	lr
